{"version":3,"sources":["ng://ngx-slick-carousel/slick.component.ts","ng://ngx-slick-carousel/index.ts"],"names":["SlickCarouselComponent","el","zone","this","EventEmitter","prototype","ngOnDestroy","unslick","ngAfterViewInit","initSlick","_this","runOutsideAngular","$instance","jQuery","nativeElement","on","event","slick","run","init","emit","config","initialized","currentIndex","initialSlide","currentSlide","afterChange","nextSlide","beforeChange","breakpoint","destroy","addSlide","slickItem","slides","push","initSlidesLength","length","removeSlide","idx","indexOf","filter","s","slickGoTo","index","slickNext","slickPrev","slickPause","slickPlay","Component","args","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","template","ElementRef","NgZone","Input","Output","SlickItemDirective","platformId","carousel","isPlatformBrowser","Directive","Inject","PLATFORM_ID","decorators","type","Host","SlickCarouselModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {isPlatformBrowser} from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Host,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    PLATFORM_ID\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\n\ndeclare const jQuery: any;\n\n/**\n * Slick component\n */\n@Component({\n  selector: 'ngx-slick-carousel',\n  exportAs: 'slick-carousel',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SlickCarouselComponent),\n    multi: true\n  }],\n  template: '<ng-content></ng-content>',\n})\nexport class SlickCarouselComponent implements AfterViewInit, OnDestroy {\n\n  @Input() config: any;\n  @Input() initSlidesLength: number;\n  @Output() afterChange: EventEmitter<any> = new EventEmitter();\n  @Output() beforeChange: EventEmitter<any> = new EventEmitter();\n  @Output() breakpoint: EventEmitter<any> = new EventEmitter();\n  @Output() destroy: EventEmitter<any> = new EventEmitter();\n  @Output() init: EventEmitter<any> = new EventEmitter();\n\n\n  public slides: any = [];\n  public $instance: any;\n  public currentIndex: number;\n  private initialized: Boolean = false;\n\n  /**\n   * Constructor\n   */\n  constructor(private el: ElementRef,\n              private zone: NgZone) {\n\n  }\n\n  /**\n   * On component destroy\n   */\n  ngOnDestroy() {\n    this.unslick();\n  }\n\n  /**\n   * On component view init\n   */\n  ngAfterViewInit() {\n  }\n\n  /**\n   * init slick\n   */\n  initSlick() {\n    this.zone.runOutsideAngular(() => {\n      this.$instance = jQuery(this.el.nativeElement);\n\n      this.$instance.on('init', (event, slick) => {\n        this.zone.run(() => {\n          this.init.emit({event, slick});\n        });\n      });\n\n      this.$instance.slick(this.config);\n\n      this.zone.run(() => {\n        this.initialized = true;\n\n        this.currentIndex = (this.config && this.config.initialSlide) ? this.config.initialSlide : 0;\n      });\n\n      this.$instance.on('afterChange', (event, slick, currentSlide) => {\n        this.zone.run(() => {\n          this.afterChange.emit({event, slick, currentSlide});\n          this.currentIndex = currentSlide;\n        });\n      });\n\n      this.$instance.on('beforeChange', (event, slick, currentSlide, nextSlide) => {\n        this.zone.run(() => {\n          this.beforeChange.emit({event, slick, currentSlide, nextSlide});\n        });\n      });\n\n      this.$instance.on('breakpoint', (event, slick, breakpoint) => {\n        this.zone.run(() => {\n          this.breakpoint.emit({event, slick, breakpoint});\n        });\n      });\n\n      this.$instance.on('destroy', (event, slick) => {\n        this.zone.run(() => {\n          this.destroy.emit({event, slick});\n        });\n      });\n    });\n  }\n\n  addSlide(slickItem: SlickItemDirective) {\n    this.slides.push(slickItem);\n\n    if (!this.initialized) {\n      // Wait for adding slides as much as initSlidesLength if it defined\n      if (!this.initSlidesLength || this.initSlidesLength === this.slides.length) {\n        this.initSlick();\n      }\n      return;\n    }\n\n    this.zone.runOutsideAngular(() => {\n      this.$instance.slick('slickAdd', slickItem.el.nativeElement);\n    });\n  }\n\n  removeSlide(slickItem: SlickItemDirective) {\n    const idx = this.slides.indexOf(slickItem);\n    this.slides = this.slides.filter(s => s !== slickItem);\n    this.zone.runOutsideAngular(() => {\n      this.$instance.slick('slickRemove', idx);\n    });\n  }\n\n  /**\n   * Slick Method\n   */\n  public slickGoTo(index: number) {\n    this.zone.runOutsideAngular(() => {\n      this.$instance.slick('slickGoTo', index);\n    });\n  }\n\n  public slickNext() {\n    this.zone.runOutsideAngular(() => {\n      this.$instance.slick('slickNext');\n    });\n  }\n\n  public slickPrev() {\n    this.zone.runOutsideAngular(() => {\n      this.$instance.slick('slickPrev');\n    });\n  }\n\n  public slickPause() {\n    this.zone.runOutsideAngular(() => {\n      this.$instance.slick('slickPause');\n    });\n  }\n\n  public slickPlay() {\n    this.zone.runOutsideAngular(() => {\n      this.$instance.slick('slickPlay');\n    });\n  }\n\n  public unslick() {\n    if (this.$instance) {\n      this.zone.runOutsideAngular(() => {\n        this.$instance.slick('unslick');\n      });\n    }\n    this.initialized = false;\n  }\n}\n\n@Directive({\n  selector: '[ngxSlickItem]',\n})\nexport class SlickItemDirective implements AfterViewInit, OnDestroy {\n  constructor(public el: ElementRef,\n              @Inject(PLATFORM_ID) private platformId: string,\n              @Host() private carousel: SlickCarouselComponent) {\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.carousel.addSlide(this);\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.carousel.removeSlide(this);\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {SlickCarouselComponent, SlickItemDirective} from './slick.component';\n\nexport * from './slick.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SlickCarouselComponent,\n    SlickItemDirective,\n  ],\n  exports: [\n    SlickCarouselComponent,\n    SlickItemDirective,\n  ]\n})\nexport class SlickCarouselModule {\n}\n"]}