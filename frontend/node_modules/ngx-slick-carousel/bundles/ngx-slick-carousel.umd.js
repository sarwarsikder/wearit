(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-slick-carousel', ['exports', '@angular/common', '@angular/core', '@angular/forms'], factory) :
    (factory((global['ngx-slick-carousel'] = {}),global.ng.common,global.ng.core,global.ng.forms));
}(this, (function (exports,common,core,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Slick component
     */
    var SlickCarouselComponent = (function () {
        /**
         * Constructor
         */
        function SlickCarouselComponent(el, zone) {
            this.el = el;
            this.zone = zone;
            this.afterChange = new core.EventEmitter();
            this.beforeChange = new core.EventEmitter();
            this.breakpoint = new core.EventEmitter();
            this.destroy = new core.EventEmitter();
            this.init = new core.EventEmitter();
            this.slides = [];
            this.initialized = false;
        }
        /**
         * On component destroy
         */
        /**
         * On component destroy
         * @return {?}
         */
        SlickCarouselComponent.prototype.ngOnDestroy = /**
         * On component destroy
         * @return {?}
         */
            function () {
                this.unslick();
            };
        /**
         * On component view init
         */
        /**
         * On component view init
         * @return {?}
         */
        SlickCarouselComponent.prototype.ngAfterViewInit = /**
         * On component view init
         * @return {?}
         */
            function () {
            };
        /**
         * init slick
         */
        /**
         * init slick
         * @return {?}
         */
        SlickCarouselComponent.prototype.initSlick = /**
         * init slick
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    _this.$instance = jQuery(_this.el.nativeElement);
                    _this.$instance.on('init', function (event, slick) {
                        _this.zone.run(function () {
                            _this.init.emit({ event: event, slick: slick });
                        });
                    });
                    _this.$instance.slick(_this.config);
                    _this.zone.run(function () {
                        _this.initialized = true;
                        _this.currentIndex = (_this.config && _this.config.initialSlide) ? _this.config.initialSlide : 0;
                    });
                    _this.$instance.on('afterChange', function (event, slick, currentSlide) {
                        _this.zone.run(function () {
                            _this.afterChange.emit({ event: event, slick: slick, currentSlide: currentSlide });
                            _this.currentIndex = currentSlide;
                        });
                    });
                    _this.$instance.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
                        _this.zone.run(function () {
                            _this.beforeChange.emit({ event: event, slick: slick, currentSlide: currentSlide, nextSlide: nextSlide });
                        });
                    });
                    _this.$instance.on('breakpoint', function (event, slick, breakpoint) {
                        _this.zone.run(function () {
                            _this.breakpoint.emit({ event: event, slick: slick, breakpoint: breakpoint });
                        });
                    });
                    _this.$instance.on('destroy', function (event, slick) {
                        _this.zone.run(function () {
                            _this.destroy.emit({ event: event, slick: slick });
                        });
                    });
                });
            };
        /**
         * @param {?} slickItem
         * @return {?}
         */
        SlickCarouselComponent.prototype.addSlide = /**
         * @param {?} slickItem
         * @return {?}
         */
            function (slickItem) {
                var _this = this;
                this.slides.push(slickItem);
                if (!this.initialized) {
                    // Wait for adding slides as much as initSlidesLength if it defined
                    if (!this.initSlidesLength || this.initSlidesLength === this.slides.length) {
                        this.initSlick();
                    }
                    return;
                }
                this.zone.runOutsideAngular(function () {
                    _this.$instance.slick('slickAdd', slickItem.el.nativeElement);
                });
            };
        /**
         * @param {?} slickItem
         * @return {?}
         */
        SlickCarouselComponent.prototype.removeSlide = /**
         * @param {?} slickItem
         * @return {?}
         */
            function (slickItem) {
                var _this = this;
                /** @type {?} */
                var idx = this.slides.indexOf(slickItem);
                this.slides = this.slides.filter(function (s) { return s !== slickItem; });
                this.zone.runOutsideAngular(function () {
                    _this.$instance.slick('slickRemove', idx);
                });
            };
        /**
         * Slick Method
         * @param {?} index
         * @return {?}
         */
        SlickCarouselComponent.prototype.slickGoTo = /**
         * Slick Method
         * @param {?} index
         * @return {?}
         */
            function (index) {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    _this.$instance.slick('slickGoTo', index);
                });
            };
        /**
         * @return {?}
         */
        SlickCarouselComponent.prototype.slickNext = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    _this.$instance.slick('slickNext');
                });
            };
        /**
         * @return {?}
         */
        SlickCarouselComponent.prototype.slickPrev = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    _this.$instance.slick('slickPrev');
                });
            };
        /**
         * @return {?}
         */
        SlickCarouselComponent.prototype.slickPause = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    _this.$instance.slick('slickPause');
                });
            };
        /**
         * @return {?}
         */
        SlickCarouselComponent.prototype.slickPlay = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    _this.$instance.slick('slickPlay');
                });
            };
        /**
         * @return {?}
         */
        SlickCarouselComponent.prototype.unslick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.$instance) {
                    this.zone.runOutsideAngular(function () {
                        _this.$instance.slick('unslick');
                    });
                }
                this.initialized = false;
            };
        SlickCarouselComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-slick-carousel',
                        exportAs: 'slick-carousel',
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return SlickCarouselComponent; }),
                                multi: true
                            }],
                        template: '<ng-content></ng-content>',
                    },] },
        ];
        /** @nocollapse */
        SlickCarouselComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.NgZone }
            ];
        };
        SlickCarouselComponent.propDecorators = {
            config: [{ type: core.Input }],
            initSlidesLength: [{ type: core.Input }],
            afterChange: [{ type: core.Output }],
            beforeChange: [{ type: core.Output }],
            breakpoint: [{ type: core.Output }],
            destroy: [{ type: core.Output }],
            init: [{ type: core.Output }]
        };
        return SlickCarouselComponent;
    }());
    var SlickItemDirective = (function () {
        function SlickItemDirective(el, platformId, carousel) {
            this.el = el;
            this.platformId = platformId;
            this.carousel = carousel;
        }
        /**
         * @return {?}
         */
        SlickItemDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    this.carousel.addSlide(this);
                }
            };
        /**
         * @return {?}
         */
        SlickItemDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    this.carousel.removeSlide(this);
                }
            };
        SlickItemDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxSlickItem]',
                    },] },
        ];
        /** @nocollapse */
        SlickItemDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
                { type: SlickCarouselComponent, decorators: [{ type: core.Host }] }
            ];
        };
        return SlickItemDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SlickCarouselModule = (function () {
        function SlickCarouselModule() {
        }
        SlickCarouselModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            SlickCarouselComponent,
                            SlickItemDirective,
                        ],
                        exports: [
                            SlickCarouselComponent,
                            SlickItemDirective,
                        ]
                    },] },
        ];
        return SlickCarouselModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.SlickCarouselModule = SlickCarouselModule;
    exports.SlickCarouselComponent = SlickCarouselComponent;
    exports.SlickItemDirective = SlickItemDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,