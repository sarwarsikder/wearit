/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { Component, Directive, ElementRef, EventEmitter, forwardRef, Host, Inject, Input, NgZone, Output, PLATFORM_ID } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * Slick component
 */
var SlickCarouselComponent = /** @class */ (function () {
    /**
     * Constructor
     */
    function SlickCarouselComponent(el, zone) {
        this.el = el;
        this.zone = zone;
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.breakpoint = new EventEmitter();
        this.destroy = new EventEmitter();
        this.init = new EventEmitter();
        this.slides = [];
        this.initialized = false;
    }
    /**
     * On component destroy
     */
    /**
     * On component destroy
     * @return {?}
     */
    SlickCarouselComponent.prototype.ngOnDestroy = /**
     * On component destroy
     * @return {?}
     */
    function () {
        this.unslick();
    };
    /**
     * On component view init
     */
    /**
     * On component view init
     * @return {?}
     */
    SlickCarouselComponent.prototype.ngAfterViewInit = /**
     * On component view init
     * @return {?}
     */
    function () {
    };
    /**
     * init slick
     */
    /**
     * init slick
     * @return {?}
     */
    SlickCarouselComponent.prototype.initSlick = /**
     * init slick
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.$instance = jQuery(_this.el.nativeElement);
            _this.$instance.on('init', function (event, slick) {
                _this.zone.run(function () {
                    _this.init.emit({ event: event, slick: slick });
                });
            });
            _this.$instance.slick(_this.config);
            _this.zone.run(function () {
                _this.initialized = true;
                _this.currentIndex = (_this.config && _this.config.initialSlide) ? _this.config.initialSlide : 0;
            });
            _this.$instance.on('afterChange', function (event, slick, currentSlide) {
                _this.zone.run(function () {
                    _this.afterChange.emit({ event: event, slick: slick, currentSlide: currentSlide });
                    _this.currentIndex = currentSlide;
                });
            });
            _this.$instance.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
                _this.zone.run(function () {
                    _this.beforeChange.emit({ event: event, slick: slick, currentSlide: currentSlide, nextSlide: nextSlide });
                });
            });
            _this.$instance.on('breakpoint', function (event, slick, breakpoint) {
                _this.zone.run(function () {
                    _this.breakpoint.emit({ event: event, slick: slick, breakpoint: breakpoint });
                });
            });
            _this.$instance.on('destroy', function (event, slick) {
                _this.zone.run(function () {
                    _this.destroy.emit({ event: event, slick: slick });
                });
            });
        });
    };
    /**
     * @param {?} slickItem
     * @return {?}
     */
    SlickCarouselComponent.prototype.addSlide = /**
     * @param {?} slickItem
     * @return {?}
     */
    function (slickItem) {
        var _this = this;
        this.slides.push(slickItem);
        if (!this.initialized) {
            // Wait for adding slides as much as initSlidesLength if it defined
            if (!this.initSlidesLength || this.initSlidesLength === this.slides.length) {
                this.initSlick();
            }
            return;
        }
        this.zone.runOutsideAngular(function () {
            _this.$instance.slick('slickAdd', slickItem.el.nativeElement);
        });
    };
    /**
     * @param {?} slickItem
     * @return {?}
     */
    SlickCarouselComponent.prototype.removeSlide = /**
     * @param {?} slickItem
     * @return {?}
     */
    function (slickItem) {
        var _this = this;
        /** @type {?} */
        var idx = this.slides.indexOf(slickItem);
        this.slides = this.slides.filter(function (s) { return s !== slickItem; });
        this.zone.runOutsideAngular(function () {
            _this.$instance.slick('slickRemove', idx);
        });
    };
    /**
     * Slick Method
     * @param {?} index
     * @return {?}
     */
    SlickCarouselComponent.prototype.slickGoTo = /**
     * Slick Method
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.$instance.slick('slickGoTo', index);
        });
    };
    /**
     * @return {?}
     */
    SlickCarouselComponent.prototype.slickNext = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.$instance.slick('slickNext');
        });
    };
    /**
     * @return {?}
     */
    SlickCarouselComponent.prototype.slickPrev = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.$instance.slick('slickPrev');
        });
    };
    /**
     * @return {?}
     */
    SlickCarouselComponent.prototype.slickPause = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.$instance.slick('slickPause');
        });
    };
    /**
     * @return {?}
     */
    SlickCarouselComponent.prototype.slickPlay = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.$instance.slick('slickPlay');
        });
    };
    /**
     * @return {?}
     */
    SlickCarouselComponent.prototype.unslick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.$instance) {
            this.zone.runOutsideAngular(function () {
                _this.$instance.slick('unslick');
            });
        }
        this.initialized = false;
    };
    SlickCarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-slick-carousel',
                    exportAs: 'slick-carousel',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return SlickCarouselComponent; }),
                            multi: true
                        }],
                    template: '<ng-content></ng-content>',
                },] },
    ];
    /** @nocollapse */
    SlickCarouselComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    SlickCarouselComponent.propDecorators = {
        config: [{ type: Input }],
        initSlidesLength: [{ type: Input }],
        afterChange: [{ type: Output }],
        beforeChange: [{ type: Output }],
        breakpoint: [{ type: Output }],
        destroy: [{ type: Output }],
        init: [{ type: Output }]
    };
    return SlickCarouselComponent;
}());
export { SlickCarouselComponent };
if (false) {
    /** @type {?} */
    SlickCarouselComponent.prototype.config;
    /** @type {?} */
    SlickCarouselComponent.prototype.initSlidesLength;
    /** @type {?} */
    SlickCarouselComponent.prototype.afterChange;
    /** @type {?} */
    SlickCarouselComponent.prototype.beforeChange;
    /** @type {?} */
    SlickCarouselComponent.prototype.breakpoint;
    /** @type {?} */
    SlickCarouselComponent.prototype.destroy;
    /** @type {?} */
    SlickCarouselComponent.prototype.init;
    /** @type {?} */
    SlickCarouselComponent.prototype.slides;
    /** @type {?} */
    SlickCarouselComponent.prototype.$instance;
    /** @type {?} */
    SlickCarouselComponent.prototype.currentIndex;
    /** @type {?} */
    SlickCarouselComponent.prototype.initialized;
    /** @type {?} */
    SlickCarouselComponent.prototype.el;
    /** @type {?} */
    SlickCarouselComponent.prototype.zone;
}
var SlickItemDirective = /** @class */ (function () {
    function SlickItemDirective(el, platformId, carousel) {
        this.el = el;
        this.platformId = platformId;
        this.carousel = carousel;
    }
    /**
     * @return {?}
     */
    SlickItemDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this.carousel.addSlide(this);
        }
    };
    /**
     * @return {?}
     */
    SlickItemDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this.carousel.removeSlide(this);
        }
    };
    SlickItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxSlickItem]',
                },] },
    ];
    /** @nocollapse */
    SlickItemDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: SlickCarouselComponent, decorators: [{ type: Host }] }
    ]; };
    return SlickItemDirective;
}());
export { SlickItemDirective };
if (false) {
    /** @type {?} */
    SlickItemDirective.prototype.el;
    /** @type {?} */
    SlickItemDirective.prototype.platformId;
    /** @type {?} */
    SlickItemDirective.prototype.carousel;
}

//# sourceMappingURL=data:application/json;base64,