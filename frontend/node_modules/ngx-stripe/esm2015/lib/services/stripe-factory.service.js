/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/ngx-stripe.interface';
import { LazyStripeAPILoader } from './api-loader.service';
import { WindowRef } from './window-ref.service';
import { StripeInstance } from './stripe-instance.class';
export class StripeFactoryService {
    /**
     * @param {?} baseKey
     * @param {?} baseOptions
     * @param {?} loader
     * @param {?} window
     */
    constructor(baseKey, baseOptions, loader, window) {
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    /**
     * @param {?=} key
     * @param {?=} options
     * @return {?}
     */
    create(key, options) {
        if (!key && !this.baseKey) {
            return null;
        }
        return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    }
}
StripeFactoryService.decorators = [
    { type: Injectable }
];
StripeFactoryService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef }
];
if (false) {
    /** @type {?} */
    StripeFactoryService.prototype.baseKey;
    /** @type {?} */
    StripeFactoryService.prototype.baseOptions;
    /** @type {?} */
    StripeFactoryService.prototype.loader;
    /** @type {?} */
    StripeFactoryService.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zdHJpcGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3RyaXBlLWZhY3Rvcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSW5ELE9BQU8sRUFDTCxjQUFjLEVBQ2Qsc0JBQXNCLEVBQ3ZCLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWpELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUd6RCxNQUFNOzs7Ozs7O0lBQ0osWUFDeUMsT0FBZSxFQUN2QixXQUFxQyxFQUM3RCxNQUEyQixFQUMzQixNQUFpQjtRQUhlLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDdkIsZ0JBQVcsR0FBWCxXQUFXLENBQTBCO1FBQzdELFdBQU0sR0FBTixNQUFNLENBQXFCO1FBQzNCLFdBQU0sR0FBTixNQUFNLENBQVc7SUFDdkIsQ0FBQzs7Ozs7O0lBRUcsTUFBTSxDQUNYLEdBQVksRUFDWixPQUFrQztRQUVsQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxJQUFJLGNBQWMsQ0FDdkIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsTUFBTSxFQUNYLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUNuQixPQUFPLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FDNUIsQ0FBQztJQUNKLENBQUM7OztZQXZCRixVQUFVOzs7eUNBR04sTUFBTSxTQUFDLHNCQUFzQjs0Q0FDN0IsTUFBTSxTQUFDLGNBQWM7WUFUakIsbUJBQW1CO1lBQ25CLFNBQVM7Ozs7SUFPZCx1Q0FBc0Q7O0lBQ3RELDJDQUFvRTs7SUFDcEUsc0NBQWtDOztJQUNsQyxzQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3RyaXBlQ29uc3RydWN0b3JPcHRpb25zIH0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQge1xuICBTVFJJUEVfT1BUSU9OUyxcbiAgU1RSSVBFX1BVQkxJU0hBQkxFX0tFWVxufSBmcm9tICcuLi9pbnRlcmZhY2VzL25neC1zdHJpcGUuaW50ZXJmYWNlJztcblxuaW1wb3J0IHsgTGF6eVN0cmlwZUFQSUxvYWRlciB9IGZyb20gJy4vYXBpLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJy4vd2luZG93LXJlZi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU3RyaXBlSW5zdGFuY2UgfSBmcm9tICcuL3N0cmlwZS1pbnN0YW5jZS5jbGFzcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHJpcGVGYWN0b3J5U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoU1RSSVBFX1BVQkxJU0hBQkxFX0tFWSkgcHVibGljIGJhc2VLZXk6IHN0cmluZyxcbiAgICBASW5qZWN0KFNUUklQRV9PUFRJT05TKSBwdWJsaWMgYmFzZU9wdGlvbnM6IFN0cmlwZUNvbnN0cnVjdG9yT3B0aW9ucyxcbiAgICBwdWJsaWMgbG9hZGVyOiBMYXp5U3RyaXBlQVBJTG9hZGVyLFxuICAgIHB1YmxpYyB3aW5kb3c6IFdpbmRvd1JlZlxuICApIHt9XG5cbiAgcHVibGljIGNyZWF0ZShcbiAgICBrZXk/OiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IFN0cmlwZUNvbnN0cnVjdG9yT3B0aW9uc1xuICApOiBTdHJpcGVJbnN0YW5jZSB7XG4gICAgaWYgKCFrZXkgJiYgIXRoaXMuYmFzZUtleSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHJpcGVJbnN0YW5jZShcbiAgICAgIHRoaXMubG9hZGVyLFxuICAgICAgdGhpcy53aW5kb3csXG4gICAgICBrZXkgfHwgdGhpcy5iYXNlS2V5LFxuICAgICAgb3B0aW9ucyB8fCB0aGlzLmJhc2VPcHRpb25zXG4gICAgKTtcbiAgfVxufVxuIl19