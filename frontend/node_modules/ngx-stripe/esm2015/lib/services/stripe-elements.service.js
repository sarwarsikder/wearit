/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-elements.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { StripeService } from './stripe.service';
export class StripeElementsService {
    /**
     * @param {?} stripeService
     */
    constructor(stripeService) {
        this.stripeService = stripeService;
    }
    /**
     * @param {?} stripe
     * @param {?=} options
     * @return {?}
     */
    elements(stripe, options = {}) {
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    }
    /**
     * @param {?} stripe
     * @param {?} options
     * @return {?}
     */
    paymentRequest(stripe, options) {
        return stripe
            ? stripe.paymentRequest(options)
            : this.stripeService.paymentRequest(options);
    }
    /**
     * @param {?} options
     * @param {?} containerClass
     * @return {?}
     */
    mergeOptions(options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return Object.assign({}, (options || {}), { classes: {
                    base: containerClass,
                    complete: `${containerClass}--complete`,
                    empty: `${containerClass}--empty`,
                    focus: `${containerClass}--focus`,
                    invalid: `${containerClass}--invalid`,
                    webkitAutoFill: `${containerClass}--webkit-autoFill`
                } });
        }
        return options || {};
    }
}
StripeElementsService.decorators = [
    { type: Injectable }
];
StripeElementsService.ctorParameters = () => [
    { type: StripeService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    StripeElementsService.prototype.stripeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc3RyaXBlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0cmlwZS1lbGVtZW50cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWtCM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2pELE1BQU07Ozs7SUFDSixZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7Ozs7OztJQUVwRCxRQUFRLENBQ04sTUFBTSxFQUNOLFVBQWlDLEVBQUU7UUFFbkMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsT0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUI7YUFBTTtZQUNMLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsY0FBYyxDQUNaLE1BQU0sRUFDTixPQUE4QjtRQUU5QixPQUFPLE1BQU07WUFDWCxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7WUFDaEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7OztJQWtDRCxZQUFZLENBQUMsT0FBTyxFQUFFLGNBQXNCO1FBQzFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25ELE9BQU8sT0FBTyxJQUFJLEVBQUUsQ0FBQztTQUN0QjtRQUVELElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ2hDLHlCQUNLLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxJQUNsQixPQUFPLEVBQUU7b0JBQ1AsSUFBSSxFQUFFLGNBQWM7b0JBQ3BCLFFBQVEsRUFBRSxHQUFHLGNBQWMsWUFBWTtvQkFDdkMsS0FBSyxFQUFFLEdBQUcsY0FBYyxTQUFTO29CQUNqQyxLQUFLLEVBQUUsR0FBRyxjQUFjLFNBQVM7b0JBQ2pDLE9BQU8sRUFBRSxHQUFHLGNBQWMsV0FBVztvQkFDckMsY0FBYyxFQUFFLEdBQUcsY0FBYyxtQkFBbUI7aUJBQ3JELElBQ0Q7U0FDSDtRQUVELE9BQU8sT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7WUFsRkYsVUFBVTs7O1lBRkYsYUFBYTs7Ozs7OztJQUlSLDhDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtcbiAgUGF5bWVudFJlcXVlc3QsXG4gIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgU3RyaXBlQ2FyZEVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVFbGVtZW50cyxcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zLFxuICBTdHJpcGVGcHhCYW5rRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlSWRlYWxCYW5rRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZVBheW1lbnRSZXF1ZXN0QnV0dG9uRWxlbWVudE9wdGlvbnNcbn0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlIH0gZnJvbSAnLi9zdHJpcGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHJpcGVFbGVtZW50c1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZVNlcnZpY2U6IFN0cmlwZVNlcnZpY2UpIHt9XG5cbiAgZWxlbWVudHMoXG4gICAgc3RyaXBlLFxuICAgIG9wdGlvbnM6IFN0cmlwZUVsZW1lbnRzT3B0aW9ucyA9IHt9XG4gICk6IE9ic2VydmFibGU8U3RyaXBlRWxlbWVudHM+IHtcbiAgICBpZiAoc3RyaXBlKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gc3RyaXBlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmlwZS5lbGVtZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RyaXBlU2VydmljZS5lbGVtZW50cygpO1xuICAgIH1cbiAgfVxuXG4gIHBheW1lbnRSZXF1ZXN0KFxuICAgIHN0cmlwZSxcbiAgICBvcHRpb25zOiBQYXltZW50UmVxdWVzdE9wdGlvbnNcbiAgKTogUGF5bWVudFJlcXVlc3QgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBzdHJpcGVcbiAgICAgID8gc3RyaXBlLnBheW1lbnRSZXF1ZXN0KG9wdGlvbnMpXG4gICAgICA6IHRoaXMuc3RyaXBlU2VydmljZS5wYXltZW50UmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVDYXJkRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVDYXJkRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVGcHhCYW5rRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVGcHhCYW5rRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVJYmFuRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVJYmFuRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVJZGVhbEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMoXG4gICAgb3B0aW9uczogU3RyaXBlQXVCYW5rQWNjb3VudEVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlQXVCYW5rQWNjb3VudEVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMoXG4gICAgb3B0aW9uczogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZVBheW1lbnRSZXF1ZXN0QnV0dG9uRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhvcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKSB7XG4gICAgaWYgKCFjb250YWluZXJDbGFzcyB8fCAob3B0aW9ucyAmJiBvcHRpb25zLmNsYXNzZXMpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuY2xhc3Nlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uKG9wdGlvbnMgfHwge30pLFxuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgYmFzZTogY29udGFpbmVyQ2xhc3MsXG4gICAgICAgICAgY29tcGxldGU6IGAke2NvbnRhaW5lckNsYXNzfS0tY29tcGxldGVgLFxuICAgICAgICAgIGVtcHR5OiBgJHtjb250YWluZXJDbGFzc30tLWVtcHR5YCxcbiAgICAgICAgICBmb2N1czogYCR7Y29udGFpbmVyQ2xhc3N9LS1mb2N1c2AsXG4gICAgICAgICAgaW52YWxpZDogYCR7Y29udGFpbmVyQ2xhc3N9LS1pbnZhbGlkYCxcbiAgICAgICAgICB3ZWJraXRBdXRvRmlsbDogYCR7Y29udGFpbmVyQ2xhc3N9LS13ZWJraXQtYXV0b0ZpbGxgXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnMgfHwge307XG4gIH1cbn1cbiJdfQ==