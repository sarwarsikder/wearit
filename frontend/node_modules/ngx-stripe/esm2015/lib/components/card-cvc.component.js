/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card-cvc.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, EventEmitter, Output, Optional } from '@angular/core';
import { StripeCardGroupDirective } from '../directives/card-group.directive';
import { StripeElementsService } from '../services/stripe-elements.service';
export class StripeCardCvcComponent {
    /**
     * @param {?} stripeElementsService
     * @param {?} cardGroup
     */
    constructor(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (changes.options || changes.containerClass) {
                this.setupElement('options');
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((/**
             * @param {?} elements
             * @return {?}
             */
            (elements) => {
                this.elements = elements;
                this.setupElement('elements');
            }));
        }
        else {
            throw new Error('StripeCardCvcComponent must have StripeCardGroupDirective parent');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getCardCvc() {
        return this.element;
    }
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    setupElement(source) {
        /** @type {?} */
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardCvc', options);
            this.element.on('change', (/**
             * @param {?} ev
             * @return {?}
             */
            (ev) => this.change.emit(ev)));
            this.element.on('blur', (/**
             * @return {?}
             */
            () => this.blur.emit()));
            this.element.on('focus', (/**
             * @return {?}
             */
            () => this.focus.emit()));
            this.element.on('ready', (/**
             * @return {?}
             */
            () => this.ready.emit()));
            this.element.on('escape', (/**
             * @return {?}
             */
            () => this.escape.emit()));
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    }
}
StripeCardCvcComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-card-cvc',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeCardCvcComponent.ctorParameters = () => [
    { type: StripeElementsService },
    { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
];
StripeCardCvcComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    StripeCardCvcComponent.prototype.stripeElementRef;
    /** @type {?} */
    StripeCardCvcComponent.prototype.element;
    /** @type {?} */
    StripeCardCvcComponent.prototype.containerClass;
    /** @type {?} */
    StripeCardCvcComponent.prototype.options;
    /** @type {?} */
    StripeCardCvcComponent.prototype.load;
    /** @type {?} */
    StripeCardCvcComponent.prototype.blur;
    /** @type {?} */
    StripeCardCvcComponent.prototype.change;
    /** @type {?} */
    StripeCardCvcComponent.prototype.focus;
    /** @type {?} */
    StripeCardCvcComponent.prototype.ready;
    /** @type {?} */
    StripeCardCvcComponent.prototype.escape;
    /** @type {?} */
    StripeCardCvcComponent.prototype.elements;
    /** @type {?} */
    StripeCardCvcComponent.prototype.cardGroupSubscription;
    /** @type {?} */
    StripeCardCvcComponent.prototype.stripeElementsService;
    /**
     * @type {?}
     * @private
     */
    StripeCardCvcComponent.prototype.cardGroup;
}
//# sourceMappingURL=data:application/json;base64,