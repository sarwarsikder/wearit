/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, EventEmitter, Output } from '@angular/core';
import { StripeInstance } from '../services/stripe-instance.class';
import { StripeElementsService } from '../services/stripe-elements.service';
export class StripeCardComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe, this.elementsOptions)
                    .toPromise();
                updateElements = true;
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.createElement(options);
                }
            }
            this.state = 'ready';
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.createElement();
                this.state = 'ready';
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getCard() {
        return this.element;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    createElement(options = {}) {
        this.element = this.elements.create('card', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => this.change.emit(ev)));
        this.element.on('blur', (/**
         * @return {?}
         */
        () => this.blur.emit()));
        this.element.on('focus', (/**
         * @return {?}
         */
        () => this.focus.emit()));
        this.element.on('ready', (/**
         * @return {?}
         */
        () => this.ready.emit()));
        this.element.on('escape', (/**
         * @return {?}
         */
        () => this.escape.emit()));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-card',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeCardComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeCardComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    StripeCardComponent.prototype.stripeElementRef;
    /** @type {?} */
    StripeCardComponent.prototype.element;
    /** @type {?} */
    StripeCardComponent.prototype.containerClass;
    /** @type {?} */
    StripeCardComponent.prototype.options;
    /** @type {?} */
    StripeCardComponent.prototype.elementsOptions;
    /** @type {?} */
    StripeCardComponent.prototype.stripe;
    /** @type {?} */
    StripeCardComponent.prototype.load;
    /** @type {?} */
    StripeCardComponent.prototype.blur;
    /** @type {?} */
    StripeCardComponent.prototype.change;
    /** @type {?} */
    StripeCardComponent.prototype.focus;
    /** @type {?} */
    StripeCardComponent.prototype.ready;
    /** @type {?} */
    StripeCardComponent.prototype.escape;
    /** @type {?} */
    StripeCardComponent.prototype.elements;
    /** @type {?} */
    StripeCardComponent.prototype.state;
    /** @type {?} */
    StripeCardComponent.prototype.stripeElementsService;
}
//# sourceMappingURL=data:application/json;base64,