(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('rxjs/operators'), require('rxjs'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-stripe', ['exports', '@angular/common', 'rxjs/operators', 'rxjs', '@angular/core'], factory) :
    (factory((global['ngx-stripe'] = {}),global.ng.common,global.rxjs.operators,global.rxjs,global.ng.core));
}(this, (function (exports,common,operators,rxjs,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/interfaces/ngx-stripe.interface.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var STRIPE_PUBLISHABLE_KEY = new core.InjectionToken('Stripe Publishable Key');
    /** @type {?} */
    var STRIPE_OPTIONS = new core.InjectionToken('Stripe Options');

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/services/window-ref.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WindowRef = /** @class */ (function () {
        function WindowRef(platformId) {
            this.platformId = platformId;
        }
        /**
         * @return {?}
         */
        WindowRef.prototype.getNativeWindow = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return window;
                }
                return ( /** @type {?} */({}));
            };
        WindowRef.decorators = [
            { type: core.Injectable }
        ];
        WindowRef.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        return WindowRef;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/services/document-ref.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocumentRef = /** @class */ (function () {
        function DocumentRef(platformId) {
            this.platformId = platformId;
        }
        /**
         * @return {?}
         */
        DocumentRef.prototype.getNativeDocument = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return document;
                }
                return ( /** @type {?} */({}));
            };
        DocumentRef.decorators = [
            { type: core.Injectable }
        ];
        DocumentRef.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        return DocumentRef;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/services/api-loader.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LazyStripeAPILoader = /** @class */ (function () {
        function LazyStripeAPILoader(platformId, window, document) {
            this.platformId = platformId;
            this.window = window;
            this.document = document;
            this.status = new rxjs.BehaviorSubject({
                error: false,
                loaded: false,
                loading: false
            });
        }
        /**
         * @return {?}
         */
        LazyStripeAPILoader.prototype.asStream = /**
         * @return {?}
         */
            function () {
                this.load();
                return this.status.asObservable();
            };
        /**
         * @return {?}
         */
        LazyStripeAPILoader.prototype.isReady = /**
         * @return {?}
         */
            function () {
                return this.status.getValue().loaded;
            };
        /**
         * @return {?}
         */
        LazyStripeAPILoader.prototype.load = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (common.isPlatformServer(this.platformId)) {
                    return;
                }
                /** @type {?} */
                var status = this.status.getValue();
                if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
                    this.status.next({
                        error: false,
                        loaded: true,
                        loading: false
                    });
                }
                else if (!status.loaded && !status.loading) {
                    this.status.next(__assign({}, status, { loading: true }));
                    /** @type {?} */
                    var script = this.document.getNativeDocument().createElement('script');
                    script.type = 'text/javascript';
                    script.async = true;
                    script.defer = true;
                    script.src = 'https://js.stripe.com/v3/';
                    script.onload = ( /**
                     * @return {?}
                     */function () {
                        _this.status.next({
                            error: false,
                            loaded: true,
                            loading: false
                        });
                    });
                    script.onerror = ( /**
                     * @return {?}
                     */function () {
                        _this.status.next({
                            error: true,
                            loaded: false,
                            loading: false
                        });
                    });
                    this.document.getNativeDocument().body.appendChild(script);
                }
            };
        LazyStripeAPILoader.decorators = [
            { type: core.Injectable }
        ];
        LazyStripeAPILoader.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
                { type: WindowRef },
                { type: DocumentRef }
            ];
        };
        return LazyStripeAPILoader;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/services/stripe-instance.class.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeInstance = /** @class */ (function () {
        function StripeInstance(loader, window, key, options) {
            var _this = this;
            this.loader = loader;
            this.window = window;
            this.key = key;
            this.options = options;
            this.stripe$ = new rxjs.BehaviorSubject(undefined);
            this.stripe = this.stripe$
                .asObservable()
                .pipe(operators.filter(( /**
         * @param {?} stripe
         * @return {?}
         */function (stripe) { return Boolean(stripe); })));
            this.loader
                .asStream()
                .pipe(operators.filter(( /**
         * @param {?} status
         * @return {?}
         */function (status) { return status.loaded === true; })), operators.first(), operators.map(( /**
             * @return {?}
             */function () { return (( /** @type {?} */(_this.window.getNativeWindow()))).Stripe; })))
                .subscribe(( /**
         * @param {?} stripeInstance
         * @return {?}
         */function (stripeInstance) {
                /** @type {?} */
                var stripe = _this.options
                    ? (( /** @type {?} */(stripeInstance(_this.key, _this.options))))
                    : (( /** @type {?} */(stripeInstance(_this.key))));
                _this.stripe$.next(stripe);
            }));
        }
        /**
         * @return {?}
         */
        StripeInstance.prototype.getInstance = /**
         * @return {?}
         */
            function () {
                return this.stripe$.getValue();
            };
        /**
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.elements = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return this.stripe$.asObservable().pipe(operators.filter(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return Boolean(stripe); })), operators.map(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return stripe.elements(options); })), operators.first());
            };
        /**
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.redirectToCheckout = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return rxjs.from(stripe.redirectToCheckout(options)); })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.confirmAuBecsDebitPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmAuBecsDebitPayment(clientSecret, data));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmBancontactPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmBancontactPayment(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmCardPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmCardPayment(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmEpsPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmEpsPayment(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmFpxPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmFpxPayment(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmGiropayPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmGiropayPayment(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmIdealPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmIdealPayment(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmP24Payment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmP24Payment(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.confirmSepaDebitPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmSepaDebitPayment(clientSecret, data));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @return {?}
         */
        StripeInstance.prototype.handleCardAction = /**
         * @param {?} clientSecret
         * @return {?}
         */
            function (clientSecret) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return rxjs.from(stripe.handleCardAction(clientSecret)); })), operators.first());
            };
        /**
         * @param {?} paymentMethodData
         * @return {?}
         */
        StripeInstance.prototype.createPaymentMethod = /**
         * @param {?} paymentMethodData
         * @return {?}
         */
            function (paymentMethodData) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.createPaymentMethod(paymentMethodData));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @return {?}
         */
        StripeInstance.prototype.retrievePaymentIntent = /**
         * @param {?} clientSecret
         * @return {?}
         */
            function (clientSecret) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return rxjs.from(stripe.retrievePaymentIntent(clientSecret)); })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.confirmAuBecsDebitSetup = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmAuBecsDebitSetup(clientSecret, data));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeInstance.prototype.confirmCardSetup = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmCardSetup(clientSecret, data, options));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.confirmSepaDebitSetup = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from(stripe.confirmSepaDebitSetup(clientSecret, data));
                })), operators.first());
            };
        /**
         * @param {?} clientSecret
         * @return {?}
         */
        StripeInstance.prototype.retrieveSetupIntent = /**
         * @param {?} clientSecret
         * @return {?}
         */
            function (clientSecret) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return rxjs.from(stripe.confirmSepaDebitSetup(clientSecret)); })), operators.first());
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeInstance.prototype.paymentRequest = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var stripe = this.getInstance();
                return stripe ? stripe.paymentRequest(options) : undefined;
            };
        /**
         * @param {?} tokenType
         * @param {?} data
         * @return {?}
         */
        StripeInstance.prototype.createToken = /**
         * @param {?} tokenType
         * @param {?} data
         * @return {?}
         */
            function (tokenType, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return rxjs.from(stripe.createToken(tokenType, data)); })), operators.first());
            };
        /**
         * @param {?} a
         * @param {?=} b
         * @return {?}
         */
        StripeInstance.prototype.createSource = /**
         * @param {?} a
         * @param {?=} b
         * @return {?}
         */
            function (a, b) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return rxjs.from(stripe.createSource(a, b)); })), operators.first());
            };
        /**
         * @param {?} source
         * @return {?}
         */
        StripeInstance.prototype.retrieveSource = /**
         * @param {?} source
         * @return {?}
         */
            function (source) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) { return rxjs.from(stripe.retrieveSource(source)); })), operators.first());
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.handleCardPayment = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from((( /** @type {?} */(stripe))).handleCardPayment(clientSecret, element, data));
                })), operators.first());
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.confirmPaymentIntent = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from((( /** @type {?} */(stripe))).confirmPaymentIntent(clientSecret, element, data));
                })), operators.first());
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.handleCardSetup = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from((( /** @type {?} */(stripe))).handleCardSetup(clientSecret, element, data));
                })), operators.first());
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.confirmSetupIntent = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from((( /** @type {?} */(stripe))).confirmSetupIntent(clientSecret, element, data));
                })), operators.first());
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeInstance.prototype.handleFpxPayment = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.pipe(operators.switchMap(( /**
                 * @param {?} stripe
                 * @return {?}
                 */function (stripe) {
                    return rxjs.from((( /** @type {?} */(stripe))).handleFpxPayment(clientSecret, element, data));
                })), operators.first());
            };
        return StripeInstance;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/services/stripe.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeService = /** @class */ (function () {
        function StripeService(key, options, loader, window) {
            this.key = key;
            this.options = options;
            this.loader = loader;
            this.window = window;
            if (key) {
                this.stripe = new StripeInstance(this.loader, this.window, key, options);
            }
        }
        /**
         * @return {?}
         */
        StripeService.prototype.getStripeReference = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this.loader.asStream().pipe(operators.filter(( /**
                 * @param {?} status
                 * @return {?}
                 */function (status) { return status.loaded === true; })), operators.map(( /**
                 * @return {?}
                 */function () { return (( /** @type {?} */(_this.window.getNativeWindow()))).Stripe; })));
            };
        /**
         * @return {?}
         */
        StripeService.prototype.getInstance = /**
         * @return {?}
         */
            function () {
                return this.stripe.getInstance();
            };
        /**
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.setKey = /**
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
            function (key, options) {
                return this.changeKey(key, options);
            };
        /**
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.changeKey = /**
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
            function (key, options) {
                this.stripe = new StripeInstance(this.loader, this.window, key, options);
                return this.stripe;
            };
        /**
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.elements = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return this.stripe.elements(options);
            };
        /**
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.redirectToCheckout = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return this.stripe.redirectToCheckout(options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.confirmAuBecsDebitPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmBancontactPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmBancontactPayment(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmCardPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmCardPayment(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmEpsPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmEpsPayment(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmFpxPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmFpxPayment(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmGiropayPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmGiropayPayment(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmIdealPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmIdealPayment(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmP24Payment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmP24Payment(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.confirmSepaDebitPayment = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.confirmSepaDebitPayment(clientSecret, data);
            };
        /**
         * @param {?} clientSecret
         * @return {?}
         */
        StripeService.prototype.handleCardAction = /**
         * @param {?} clientSecret
         * @return {?}
         */
            function (clientSecret) {
                return this.stripe.handleCardAction(clientSecret);
            };
        /**
         * @param {?} paymentMethodData
         * @return {?}
         */
        StripeService.prototype.createPaymentMethod = /**
         * @param {?} paymentMethodData
         * @return {?}
         */
            function (paymentMethodData) {
                return this.stripe.createPaymentMethod(paymentMethodData);
            };
        /**
         * @param {?} clientSecret
         * @return {?}
         */
        StripeService.prototype.retrievePaymentIntent = /**
         * @param {?} clientSecret
         * @return {?}
         */
            function (clientSecret) {
                return this.stripe.retrievePaymentIntent(clientSecret);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.confirmAuBecsDebitSetup = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
        StripeService.prototype.confirmCardSetup = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @param {?=} options
         * @return {?}
         */
            function (clientSecret, data, options) {
                return this.stripe.confirmCardSetup(clientSecret, data, options);
            };
        /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.confirmSepaDebitSetup = /**
         * @param {?} clientSecret
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, data) {
                return this.stripe.confirmSepaDebitSetup(clientSecret, data);
            };
        /**
         * @param {?} clientSecret
         * @return {?}
         */
        StripeService.prototype.retrieveSetupIntent = /**
         * @param {?} clientSecret
         * @return {?}
         */
            function (clientSecret) {
                return this.stripe.retrieveSetupIntent(clientSecret);
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeService.prototype.paymentRequest = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return this.stripe.paymentRequest(options);
            };
        /**
         * @param {?} tokenType
         * @param {?} data
         * @return {?}
         */
        StripeService.prototype.createToken = /**
         * @param {?} tokenType
         * @param {?} data
         * @return {?}
         */
            function (tokenType, data) {
                return this.stripe.createToken(tokenType, data);
            };
        /**
         * @param {?} a
         * @param {?=} b
         * @return {?}
         */
        StripeService.prototype.createSource = /**
         * @param {?} a
         * @param {?=} b
         * @return {?}
         */
            function (a, b) {
                return this.stripe.createSource(a, b);
            };
        /**
         * @param {?} source
         * @return {?}
         */
        StripeService.prototype.retrieveSource = /**
         * @param {?} source
         * @return {?}
         */
            function (source) {
                return this.stripe.retrieveSource(source);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.handleCardPayment = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.handleCardPayment(clientSecret, element, data);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.confirmPaymentIntent = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.confirmPaymentIntent(clientSecret, element, data);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.handleCardSetup = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.handleCardSetup(clientSecret, element, data);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.confirmSetupIntent = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.confirmSetupIntent(clientSecret, element, data);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
        StripeService.prototype.handleFpxPayment = /**
         * @deprecated
         * @param {?} clientSecret
         * @param {?=} element
         * @param {?=} data
         * @return {?}
         */
            function (clientSecret, element, data) {
                return this.stripe.handleFpxPayment(clientSecret, element, data);
            };
        StripeService.decorators = [
            { type: core.Injectable }
        ];
        StripeService.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [STRIPE_OPTIONS,] }] },
                { type: LazyStripeAPILoader },
                { type: WindowRef }
            ];
        };
        return StripeService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/services/stripe-elements.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeElementsService = /** @class */ (function () {
        function StripeElementsService(stripeService) {
            this.stripeService = stripeService;
        }
        /**
         * @param {?} stripe
         * @param {?=} options
         * @return {?}
         */
        StripeElementsService.prototype.elements = /**
         * @param {?} stripe
         * @param {?=} options
         * @return {?}
         */
            function (stripe, options) {
                if (options === void 0) {
                    options = {};
                }
                if (stripe) {
                    if (Object.keys(options).length > 0) {
                        return stripe.elements(options);
                    }
                    return stripe.elements();
                }
                else {
                    if (Object.keys(options).length > 0) {
                        return this.stripeService.elements(options);
                    }
                    return this.stripeService.elements();
                }
            };
        /**
         * @param {?} stripe
         * @param {?} options
         * @return {?}
         */
        StripeElementsService.prototype.paymentRequest = /**
         * @param {?} stripe
         * @param {?} options
         * @return {?}
         */
            function (stripe, options) {
                return stripe
                    ? stripe.paymentRequest(options)
                    : this.stripeService.paymentRequest(options);
            };
        /**
         * @param {?} options
         * @param {?} containerClass
         * @return {?}
         */
        StripeElementsService.prototype.mergeOptions = /**
         * @param {?} options
         * @param {?} containerClass
         * @return {?}
         */
            function (options, containerClass) {
                if (!containerClass || (options && options.classes)) {
                    return options || {};
                }
                if (!options || !options.classes) {
                    return __assign({}, (options || {}), { classes: {
                            base: containerClass,
                            complete: containerClass + "--complete",
                            empty: containerClass + "--empty",
                            focus: containerClass + "--focus",
                            invalid: containerClass + "--invalid",
                            webkitAutoFill: containerClass + "--webkit-autoFill"
                        } });
                }
                return options || {};
            };
        StripeElementsService.decorators = [
            { type: core.Injectable }
        ];
        StripeElementsService.ctorParameters = function () {
            return [
                { type: StripeService }
            ];
        };
        return StripeElementsService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/card.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeCardComponent = /** @class */ (function () {
        function StripeCardComponent(stripeElementsService) {
            this.stripeElementsService = stripeElementsService;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
            this.state = 'notready';
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeCardComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    var options, updateElements, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.state = 'starting';
                                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                                updateElements = false;
                                if (!(changes.elementsOptions || changes.stripe || !this.elements))
                                    return [3 /*break*/, 2];
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe, this.elementsOptions)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                updateElements = true;
                                _b.label = 2;
                            case 2:
                                if (changes.options ||
                                    changes.containerClass ||
                                    !this.element ||
                                    updateElements) {
                                    if (this.element && !updateElements) {
                                        this.update(options);
                                    }
                                    else if (this.elements && updateElements) {
                                        this.createElement(options);
                                    }
                                }
                                this.state = 'ready';
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeCardComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.state === 'notready'))
                                    return [3 /*break*/, 2];
                                this.state = 'starting';
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                this.createElement();
                                this.state = 'ready';
                                _b.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeCardComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeCardComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeCardComponent.prototype.getCard = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?=} options
         * @return {?}
         */
        StripeCardComponent.prototype.createElement = /**
         * @private
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (options === void 0) {
                    options = {};
                }
                this.element = this.elements.create('card', options);
                this.element.on('change', ( /**
                 * @param {?} ev
                 * @return {?}
                 */function (ev) { return _this.change.emit(ev); }));
                this.element.on('blur', ( /**
                 * @return {?}
                 */function () { return _this.blur.emit(); }));
                this.element.on('focus', ( /**
                 * @return {?}
                 */function () { return _this.focus.emit(); }));
                this.element.on('ready', ( /**
                 * @return {?}
                 */function () { return _this.ready.emit(); }));
                this.element.on('escape', ( /**
                 * @return {?}
                 */function () { return _this.escape.emit(); }));
                this.element.mount(this.stripeElementRef.nativeElement);
                this.load.emit(this.element);
            };
        StripeCardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-card',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeCardComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService }
            ];
        };
        StripeCardComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            elementsOptions: [{ type: core.Input }],
            stripe: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeCardComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/card-group.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeCardGroupDirective = /** @class */ (function () {
        function StripeCardGroupDirective(stripeElementsService) {
            this.stripeElementsService = stripeElementsService;
            this.elements = new core.EventEmitter();
            this.state = 'notready';
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeCardGroupDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    var elementsOptions, stripe, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.state = 'starting';
                                elementsOptions = this.elementsOptions;
                                stripe = this.stripe;
                                if (!(changes.elementsOptions || changes.stripe || !this._elements))
                                    return [3 /*break*/, 2];
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(stripe, elementsOptions)
                                        .toPromise()];
                            case 1:
                                _a._elements = _b.sent();
                                this.elements.emit(this._elements);
                                _b.label = 2;
                            case 2:
                                this.state = 'ready';
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeCardGroupDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.state === 'notready'))
                                    return [3 /*break*/, 2];
                                this.state = 'starting';
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe)
                                        .toPromise()];
                            case 1:
                                _a._elements = _b.sent();
                                this.elements.emit(this._elements);
                                this.state = 'ready';
                                _b.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
        StripeCardGroupDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'
                    },] }
        ];
        StripeCardGroupDirective.ctorParameters = function () {
            return [
                { type: StripeElementsService }
            ];
        };
        StripeCardGroupDirective.propDecorators = {
            elementsOptions: [{ type: core.Input }],
            stripe: [{ type: core.Input }],
            elements: [{ type: core.Output }]
        };
        return StripeCardGroupDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/card-number.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeCardNumberComponent = /** @class */ (function () {
        function StripeCardNumberComponent(stripeElementsService, cardGroup) {
            this.stripeElementsService = stripeElementsService;
            this.cardGroup = cardGroup;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeCardNumberComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (changes.options || changes.containerClass) {
                            this.setupElement('options');
                        }
                        return [2 /*return*/];
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeCardNumberComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.cardGroup) {
                    this.cardGroupSubscription = this.cardGroup.elements.subscribe(( /**
                     * @param {?} elements
                     * @return {?}
                     */function (elements) {
                        _this.elements = elements;
                        _this.setupElement('elements');
                    }));
                }
                else {
                    throw new Error('StripeCardNumberComponent must have StripeCardGroupDirective parent');
                }
            };
        /**
         * @return {?}
         */
        StripeCardNumberComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
                if (this.cardGroupSubscription) {
                    this.cardGroupSubscription.unsubscribe();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeCardNumberComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeCardNumberComponent.prototype.getCardNumber = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?} source
         * @return {?}
         */
        StripeCardNumberComponent.prototype.setupElement = /**
         * @private
         * @param {?} source
         * @return {?}
         */
            function (source) {
                var _this = this;
                /** @type {?} */
                var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                if (this.element && source === 'options') {
                    this.update(options);
                }
                else if (this.elements && source === 'elements') {
                    this.element = this.elements.create('cardNumber', options);
                    this.element.on('change', ( /**
                     * @param {?} ev
                     * @return {?}
                     */function (ev) { return _this.change.emit(ev); }));
                    this.element.on('blur', ( /**
                     * @return {?}
                     */function () { return _this.blur.emit(); }));
                    this.element.on('focus', ( /**
                     * @return {?}
                     */function () { return _this.focus.emit(); }));
                    this.element.on('ready', ( /**
                     * @return {?}
                     */function () { return _this.ready.emit(); }));
                    this.element.on('escape', ( /**
                     * @return {?}
                     */function () { return _this.escape.emit(); }));
                    this.element.mount(this.stripeElementRef.nativeElement);
                    this.load.emit(this.element);
                }
            };
        StripeCardNumberComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-card-number',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeCardNumberComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService },
                { type: StripeCardGroupDirective, decorators: [{ type: core.Optional }] }
            ];
        };
        StripeCardNumberComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeCardNumberComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/card-expiry.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeCardExpiryComponent = /** @class */ (function () {
        function StripeCardExpiryComponent(stripeElementsService, cardGroup) {
            this.stripeElementsService = stripeElementsService;
            this.cardGroup = cardGroup;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeCardExpiryComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (changes.options || changes.containerClass) {
                            this.setupElement('options');
                        }
                        return [2 /*return*/];
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeCardExpiryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.cardGroup) {
                    this.cardGroupSubscription = this.cardGroup.elements.subscribe(( /**
                     * @param {?} elements
                     * @return {?}
                     */function (elements) {
                        _this.elements = elements;
                        _this.setupElement('elements');
                    }));
                }
                else {
                    throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');
                }
            };
        /**
         * @return {?}
         */
        StripeCardExpiryComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
                if (this.cardGroupSubscription) {
                    this.cardGroupSubscription.unsubscribe();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeCardExpiryComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeCardExpiryComponent.prototype.getCardExpiry = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?} source
         * @return {?}
         */
        StripeCardExpiryComponent.prototype.setupElement = /**
         * @private
         * @param {?} source
         * @return {?}
         */
            function (source) {
                var _this = this;
                /** @type {?} */
                var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                if (this.element && source === 'options') {
                    this.update(options);
                }
                else if (this.elements && source === 'elements') {
                    this.element = this.elements.create('cardExpiry', options);
                    this.element.on('change', ( /**
                     * @param {?} ev
                     * @return {?}
                     */function (ev) { return _this.change.emit(ev); }));
                    this.element.on('blur', ( /**
                     * @return {?}
                     */function () { return _this.blur.emit(); }));
                    this.element.on('focus', ( /**
                     * @return {?}
                     */function () { return _this.focus.emit(); }));
                    this.element.on('ready', ( /**
                     * @return {?}
                     */function () { return _this.ready.emit(); }));
                    this.element.on('escape', ( /**
                     * @return {?}
                     */function () { return _this.escape.emit(); }));
                    this.element.mount(this.stripeElementRef.nativeElement);
                    this.load.emit(this.element);
                }
            };
        StripeCardExpiryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-card-expiry',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeCardExpiryComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService },
                { type: StripeCardGroupDirective, decorators: [{ type: core.Optional }] }
            ];
        };
        StripeCardExpiryComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeCardExpiryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/card-cvc.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeCardCvcComponent = /** @class */ (function () {
        function StripeCardCvcComponent(stripeElementsService, cardGroup) {
            this.stripeElementsService = stripeElementsService;
            this.cardGroup = cardGroup;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeCardCvcComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (changes.options || changes.containerClass) {
                            this.setupElement('options');
                        }
                        return [2 /*return*/];
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeCardCvcComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.cardGroup) {
                    this.cardGroupSubscription = this.cardGroup.elements.subscribe(( /**
                     * @param {?} elements
                     * @return {?}
                     */function (elements) {
                        _this.elements = elements;
                        _this.setupElement('elements');
                    }));
                }
                else {
                    throw new Error('StripeCardCvcComponent must have StripeCardGroupDirective parent');
                }
            };
        /**
         * @return {?}
         */
        StripeCardCvcComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
                if (this.cardGroupSubscription) {
                    this.cardGroupSubscription.unsubscribe();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeCardCvcComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeCardCvcComponent.prototype.getCardCvc = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?} source
         * @return {?}
         */
        StripeCardCvcComponent.prototype.setupElement = /**
         * @private
         * @param {?} source
         * @return {?}
         */
            function (source) {
                var _this = this;
                /** @type {?} */
                var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                if (this.element && source === 'options') {
                    this.update(options);
                }
                else if (this.elements && source === 'elements') {
                    this.element = this.elements.create('cardCvc', options);
                    this.element.on('change', ( /**
                     * @param {?} ev
                     * @return {?}
                     */function (ev) { return _this.change.emit(ev); }));
                    this.element.on('blur', ( /**
                     * @return {?}
                     */function () { return _this.blur.emit(); }));
                    this.element.on('focus', ( /**
                     * @return {?}
                     */function () { return _this.focus.emit(); }));
                    this.element.on('ready', ( /**
                     * @return {?}
                     */function () { return _this.ready.emit(); }));
                    this.element.on('escape', ( /**
                     * @return {?}
                     */function () { return _this.escape.emit(); }));
                    this.element.mount(this.stripeElementRef.nativeElement);
                    this.load.emit(this.element);
                }
            };
        StripeCardCvcComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-card-cvc',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeCardCvcComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService },
                { type: StripeCardGroupDirective, decorators: [{ type: core.Optional }] }
            ];
        };
        StripeCardCvcComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeCardCvcComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/fpx-bank.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeFpxBankComponent = /** @class */ (function () {
        function StripeFpxBankComponent(stripeElementsService) {
            this.stripeElementsService = stripeElementsService;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
            this.state = 'notready';
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeFpxBankComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    var options, updateElements, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.state = 'starting';
                                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                                updateElements = false;
                                if (!(changes.elementsOptions || changes.stripe || !this.elements))
                                    return [3 /*break*/, 2];
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe, this.elementsOptions)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                updateElements = true;
                                _b.label = 2;
                            case 2:
                                if (changes.options ||
                                    changes.containerClass ||
                                    !this.element ||
                                    updateElements) {
                                    if (this.element && !updateElements) {
                                        this.update(options);
                                    }
                                    else if (this.elements && updateElements) {
                                        this.createElement(options);
                                    }
                                }
                                this.state = 'ready';
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeFpxBankComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.state === 'notready'))
                                    return [3 /*break*/, 2];
                                this.state = 'starting';
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                this.createElement();
                                this.state = 'ready';
                                _b.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeFpxBankComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeFpxBankComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeFpxBankComponent.prototype.getFpxBank = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?=} options
         * @return {?}
         */
        StripeFpxBankComponent.prototype.createElement = /**
         * @private
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (options === void 0) {
                    options = { accountHolderType: 'individual' };
                }
                this.element = this.elements.create('fpxBank', options);
                this.element.on('change', ( /**
                 * @param {?} ev
                 * @return {?}
                 */function (ev) { return _this.change.emit(ev); }));
                this.element.on('blur', ( /**
                 * @return {?}
                 */function () { return _this.blur.emit(); }));
                this.element.on('focus', ( /**
                 * @return {?}
                 */function () { return _this.focus.emit(); }));
                this.element.on('ready', ( /**
                 * @return {?}
                 */function () { return _this.ready.emit(); }));
                this.element.on('escape', ( /**
                 * @return {?}
                 */function () { return _this.escape.emit(); }));
                this.element.mount(this.stripeElementRef.nativeElement);
                this.load.emit(this.element);
            };
        StripeFpxBankComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-fpx-bank',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeFpxBankComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService }
            ];
        };
        StripeFpxBankComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            elementsOptions: [{ type: core.Input }],
            stripe: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeFpxBankComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/ideal-bank.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeIdealBankComponent = /** @class */ (function () {
        function StripeIdealBankComponent(stripeElementsService) {
            this.stripeElementsService = stripeElementsService;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
            this.state = 'notready';
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeIdealBankComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    var options, updateElements, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.state = 'starting';
                                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                                updateElements = false;
                                if (!(changes.elementsOptions || changes.stripe || !this.elements))
                                    return [3 /*break*/, 2];
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe, this.elementsOptions)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                updateElements = true;
                                _b.label = 2;
                            case 2:
                                if (changes.options ||
                                    changes.containerClass ||
                                    !this.element ||
                                    updateElements) {
                                    if (this.element && !updateElements) {
                                        this.update(options);
                                    }
                                    else if (this.elements && updateElements) {
                                        this.createElement(options);
                                    }
                                }
                                this.state = 'ready';
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeIdealBankComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.state === 'notready'))
                                    return [3 /*break*/, 2];
                                this.state = 'starting';
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                this.createElement();
                                this.state = 'ready';
                                _b.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeIdealBankComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeIdealBankComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeIdealBankComponent.prototype.getIdealBank = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?=} options
         * @return {?}
         */
        StripeIdealBankComponent.prototype.createElement = /**
         * @private
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (options === void 0) {
                    options = {};
                }
                this.element = this.elements.create('idealBank', options);
                this.element.on('change', ( /**
                 * @param {?} ev
                 * @return {?}
                 */function (ev) { return _this.change.emit(ev); }));
                this.element.on('blur', ( /**
                 * @return {?}
                 */function () { return _this.blur.emit(); }));
                this.element.on('focus', ( /**
                 * @return {?}
                 */function () { return _this.focus.emit(); }));
                this.element.on('ready', ( /**
                 * @return {?}
                 */function () { return _this.ready.emit(); }));
                this.element.on('escape', ( /**
                 * @return {?}
                 */function () { return _this.escape.emit(); }));
                this.element.mount(this.stripeElementRef.nativeElement);
                this.load.emit(this.element);
            };
        StripeIdealBankComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-ideal-bank',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeIdealBankComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService }
            ];
        };
        StripeIdealBankComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            elementsOptions: [{ type: core.Input }],
            stripe: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeIdealBankComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/iban.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeIbanComponent = /** @class */ (function () {
        function StripeIbanComponent(stripeElementsService) {
            this.stripeElementsService = stripeElementsService;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
            this.state = 'notready';
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeIbanComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    var options, updateElements, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.state = 'starting';
                                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                                updateElements = false;
                                if (!(changes.elementsOptions || changes.stripe || !this.elements))
                                    return [3 /*break*/, 2];
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe, this.elementsOptions)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                updateElements = true;
                                _b.label = 2;
                            case 2:
                                if (changes.options ||
                                    changes.containerClass ||
                                    !this.element ||
                                    updateElements) {
                                    if (this.element && !updateElements) {
                                        this.update(options);
                                    }
                                    else if (this.elements && updateElements) {
                                        this.createElement(options);
                                    }
                                }
                                this.state = 'ready';
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeIbanComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.state === 'notready'))
                                    return [3 /*break*/, 2];
                                this.state = 'starting';
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                this.createElement();
                                this.state = 'ready';
                                _b.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeIbanComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeIbanComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeIbanComponent.prototype.getIban = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?=} options
         * @return {?}
         */
        StripeIbanComponent.prototype.createElement = /**
         * @private
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (options === void 0) {
                    options = {};
                }
                this.element = this.elements.create('iban', options);
                this.element.on('change', ( /**
                 * @param {?} ev
                 * @return {?}
                 */function (ev) { return _this.change.emit(ev); }));
                this.element.on('blur', ( /**
                 * @return {?}
                 */function () { return _this.blur.emit(); }));
                this.element.on('focus', ( /**
                 * @return {?}
                 */function () { return _this.focus.emit(); }));
                this.element.on('ready', ( /**
                 * @return {?}
                 */function () { return _this.ready.emit(); }));
                this.element.on('escape', ( /**
                 * @return {?}
                 */function () { return _this.escape.emit(); }));
                this.element.mount(this.stripeElementRef.nativeElement);
                this.load.emit(this.element);
            };
        StripeIbanComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-iban',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeIbanComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService }
            ];
        };
        StripeIbanComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            elementsOptions: [{ type: core.Input }],
            stripe: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeIbanComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/au-bank-account.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeAuBankAccountComponent = /** @class */ (function () {
        function StripeAuBankAccountComponent(stripeElementsService) {
            this.stripeElementsService = stripeElementsService;
            this.load = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.escape = new core.EventEmitter();
            this.state = 'notready';
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripeAuBankAccountComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    var options, updateElements, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.state = 'starting';
                                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                                updateElements = false;
                                if (!(changes.elementsOptions || changes.stripe || !this.elements))
                                    return [3 /*break*/, 2];
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe, this.elementsOptions)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                updateElements = true;
                                _b.label = 2;
                            case 2:
                                if (changes.options ||
                                    changes.containerClass ||
                                    !this.element ||
                                    updateElements) {
                                    if (this.element && !updateElements) {
                                        this.update(options);
                                    }
                                    else if (this.elements && updateElements) {
                                        this.createElement(options);
                                    }
                                }
                                this.state = 'ready';
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeAuBankAccountComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.state === 'notready'))
                                    return [3 /*break*/, 2];
                                this.state = 'starting';
                                _a = this;
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(this.stripe)
                                        .toPromise()];
                            case 1:
                                _a.elements = _b.sent();
                                this.createElement();
                                this.state = 'ready';
                                _b.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripeAuBankAccountComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.element) {
                    this.element.destroy();
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripeAuBankAccountComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripeAuBankAccountComponent.prototype.getAuBankAccount = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        /**
         * @private
         * @param {?=} options
         * @return {?}
         */
        StripeAuBankAccountComponent.prototype.createElement = /**
         * @private
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (options === void 0) {
                    options = {};
                }
                this.element = this.elements.create('auBankAccount', options);
                this.element.on('change', ( /**
                 * @param {?} ev
                 * @return {?}
                 */function (ev) { return _this.change.emit(ev); }));
                this.element.on('blur', ( /**
                 * @return {?}
                 */function () { return _this.blur.emit(); }));
                this.element.on('focus', ( /**
                 * @return {?}
                 */function () { return _this.focus.emit(); }));
                this.element.on('ready', ( /**
                 * @return {?}
                 */function () { return _this.ready.emit(); }));
                this.element.on('escape', ( /**
                 * @return {?}
                 */function () { return _this.escape.emit(); }));
                this.element.mount(this.stripeElementRef.nativeElement);
                this.load.emit(this.element);
            };
        StripeAuBankAccountComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-au-bank-account',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripeAuBankAccountComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService }
            ];
        };
        StripeAuBankAccountComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            options: [{ type: core.Input }],
            elementsOptions: [{ type: core.Input }],
            stripe: [{ type: core.Input }],
            load: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            escape: [{ type: core.Output }]
        };
        return StripeAuBankAccountComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/payment-request-button.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripePaymentRequestButtonComponent = /** @class */ (function () {
        function StripePaymentRequestButtonComponent(stripeElementsService) {
            this.stripeElementsService = stripeElementsService;
            this.load = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.token = new core.EventEmitter();
            this.paymentMethod = new core.EventEmitter();
            this.source = new core.EventEmitter();
            this.cancel = new core.EventEmitter();
            this.shippingaddresschange = new core.EventEmitter();
            this.shippingoptionchange = new core.EventEmitter();
            this.notavailable = new core.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        StripePaymentRequestButtonComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    var options, elementsOptions, stripe, updateElements, elements;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                                elementsOptions = this.elementsOptions;
                                stripe = this.stripe;
                                updateElements = false;
                                if (!(changes.elementsOptions || changes.stripe || !this.elements))
                                    return [3 /*break*/, 2];
                                return [4 /*yield*/, this.stripeElementsService
                                        .elements(stripe, elementsOptions)
                                        .toPromise()];
                            case 1:
                                elements = _a.sent();
                                this.elements = elements;
                                updateElements = true;
                                _a.label = 2;
                            case 2:
                                if (changes.paymentOptions && this.paymentRequest) {
                                    this.updateRequest(this.paymentOptions);
                                }
                                if (changes.options ||
                                    changes.containerClass ||
                                    !this.element ||
                                    updateElements) {
                                    if (this.element && !updateElements) {
                                        this.update(options);
                                    }
                                    else if (this.elements && updateElements) {
                                        this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);
                                        this.paymentRequest.on('token', ( /**
                                         * @param {?} ev
                                         * @return {?}
                                         */function (ev) { return _this.token.emit(ev); }));
                                        this.paymentRequest.on('paymentmethod', ( /**
                                         * @param {?} ev
                                         * @return {?}
                                         */function (ev) {
                                            return _this.paymentMethod.emit(ev);
                                        }));
                                        this.paymentRequest.on('source', ( /**
                                         * @param {?} ev
                                         * @return {?}
                                         */function (ev) { return _this.source.emit(ev); }));
                                        this.paymentRequest.on('cancel', ( /**
                                         * @return {?}
                                         */function () { return _this.cancel.emit(); }));
                                        this.paymentRequest.on('shippingaddresschange', ( /**
                                         * @param {?} ev
                                         * @return {?}
                                         */function (ev) {
                                            return _this.shippingaddresschange.emit(ev);
                                        }));
                                        this.paymentRequest.on('shippingoptionchange', ( /**
                                         * @param {?} ev
                                         * @return {?}
                                         */function (ev) {
                                            return _this.shippingoptionchange.emit(ev);
                                        }));
                                        this.element = this.elements.create('paymentRequestButton', __assign({ paymentRequest: this.paymentRequest }, options));
                                        this.canMakePayment().subscribe(( /**
                                         * @param {?} result
                                         * @return {?}
                                         */function (result) {
                                            if (result) {
                                                _this.element.on('click', ( /**
                                                 * @param {?} ev
                                                 * @return {?}
                                                 */function (ev) { return _this.change.emit(ev); }));
                                                _this.element.on('blur', ( /**
                                                 * @return {?}
                                                 */function () { return _this.blur.emit(); }));
                                                _this.element.on('focus', ( /**
                                                 * @return {?}
                                                 */function () { return _this.focus.emit(); }));
                                                _this.element.on('ready', ( /**
                                                 * @return {?}
                                                 */function () { return _this.ready.emit(); }));
                                                _this.element.mount(_this.stripeElementRef.nativeElement);
                                                _this.load.emit({
                                                    paymentRequestButton: _this.element,
                                                    paymentRequest: _this.paymentRequest
                                                });
                                            }
                                            else {
                                                _this.notavailable.emit();
                                            }
                                        }));
                                    }
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        StripePaymentRequestButtonComponent.prototype.canMakePayment = /**
         * @return {?}
         */
            function () {
                return rxjs.from(this.paymentRequest.canMakePayment());
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripePaymentRequestButtonComponent.prototype.update = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.element.update(options);
            };
        /**
         * @param {?} options
         * @return {?}
         */
        StripePaymentRequestButtonComponent.prototype.updateRequest = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.paymentRequest.update(options);
            };
        /**
         * @return {?}
         */
        StripePaymentRequestButtonComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                this.paymentRequest.show();
            };
        /**
         * @deprecated
         */
        /**
         * @deprecated
         * @return {?}
         */
        StripePaymentRequestButtonComponent.prototype.getButton = /**
         * @deprecated
         * @return {?}
         */
            function () {
                return this.element;
            };
        StripePaymentRequestButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-stripe-payment-request-button',
                        template: "<div class=\"field\" #stripeElementRef></div>"
                    }] }
        ];
        StripePaymentRequestButtonComponent.ctorParameters = function () {
            return [
                { type: StripeElementsService }
            ];
        };
        StripePaymentRequestButtonComponent.propDecorators = {
            stripeElementRef: [{ type: core.ViewChild, args: ['stripeElementRef',] }],
            containerClass: [{ type: core.Input }],
            paymentOptions: [{ type: core.Input }],
            options: [{ type: core.Input }],
            elementsOptions: [{ type: core.Input }],
            stripe: [{ type: core.Input }],
            load: [{ type: core.Output }],
            change: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            token: [{ type: core.Output }],
            paymentMethod: [{ type: core.Output }],
            source: [{ type: core.Output }],
            cancel: [{ type: core.Output }],
            shippingaddresschange: [{ type: core.Output }],
            shippingoptionchange: [{ type: core.Output }],
            notavailable: [{ type: core.Output }]
        };
        return StripePaymentRequestButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/services/stripe-factory.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripeFactoryService = /** @class */ (function () {
        function StripeFactoryService(baseKey, baseOptions, loader, window) {
            this.baseKey = baseKey;
            this.baseOptions = baseOptions;
            this.loader = loader;
            this.window = window;
        }
        /**
         * @param {?=} key
         * @param {?=} options
         * @return {?}
         */
        StripeFactoryService.prototype.create = /**
         * @param {?=} key
         * @param {?=} options
         * @return {?}
         */
            function (key, options) {
                if (!key && !this.baseKey) {
                    return null;
                }
                return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);
            };
        StripeFactoryService.decorators = [
            { type: core.Injectable }
        ];
        StripeFactoryService.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [STRIPE_OPTIONS,] }] },
                { type: LazyStripeAPILoader },
                { type: WindowRef }
            ];
        };
        return StripeFactoryService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngx-stripe.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var components = [
        StripeCardComponent,
        StripeCardNumberComponent,
        StripeCardExpiryComponent,
        StripeCardCvcComponent,
        StripeFpxBankComponent,
        StripeIdealBankComponent,
        StripeIbanComponent,
        StripeAuBankAccountComponent,
        StripePaymentRequestButtonComponent
    ];
    /** @type {?} */
    var directives = [StripeCardGroupDirective];
    var NgxStripeModule = /** @class */ (function () {
        function NgxStripeModule() {
        }
        /**
         * @param {?=} publishableKey
         * @param {?=} options
         * @return {?}
         */
        NgxStripeModule.forRoot = /**
         * @param {?=} publishableKey
         * @param {?=} options
         * @return {?}
         */
            function (publishableKey, options) {
                return {
                    ngModule: NgxStripeModule,
                    providers: [
                        LazyStripeAPILoader,
                        StripeService,
                        StripeFactoryService,
                        StripeElementsService,
                        WindowRef,
                        DocumentRef,
                        {
                            provide: STRIPE_PUBLISHABLE_KEY,
                            useValue: publishableKey
                        },
                        {
                            provide: STRIPE_OPTIONS,
                            useValue: options
                        }
                    ]
                };
            };
        /**
         * @param {?=} publishableKey
         * @param {?=} options
         * @return {?}
         */
        NgxStripeModule.forChild = /**
         * @param {?=} publishableKey
         * @param {?=} options
         * @return {?}
         */
            function (publishableKey, options) {
                return {
                    ngModule: NgxStripeModule,
                    providers: [
                        LazyStripeAPILoader,
                        StripeService,
                        StripeFactoryService,
                        StripeElementsService,
                        WindowRef,
                        DocumentRef,
                        {
                            provide: STRIPE_PUBLISHABLE_KEY,
                            useValue: publishableKey
                        },
                        {
                            provide: STRIPE_OPTIONS,
                            useValue: options
                        }
                    ]
                };
            };
        NgxStripeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: __spread(components, directives),
                        exports: __spread(components, directives)
                    },] }
        ];
        return NgxStripeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public_api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: ngx-stripe.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxStripeModule = NgxStripeModule;
    exports.StripeCardComponent = StripeCardComponent;
    exports.StripeCardNumberComponent = StripeCardNumberComponent;
    exports.StripeCardExpiryComponent = StripeCardExpiryComponent;
    exports.StripeCardCvcComponent = StripeCardCvcComponent;
    exports.StripeFpxBankComponent = StripeFpxBankComponent;
    exports.StripeIbanComponent = StripeIbanComponent;
    exports.StripeIdealBankComponent = StripeIdealBankComponent;
    exports.StripeAuBankAccountComponent = StripeAuBankAccountComponent;
    exports.StripePaymentRequestButtonComponent = StripePaymentRequestButtonComponent;
    exports.StripeCardGroupDirective = StripeCardGroupDirective;
    exports.StripeService = StripeService;
    exports.StripeFactoryService = StripeFactoryService;
    exports.StripeInstance = StripeInstance;
    exports.LazyStripeAPILoader = LazyStripeAPILoader;
    exports.WindowRef = WindowRef;
    exports.DocumentRef = DocumentRef;
    exports.StripeElementsService = StripeElementsService;
    exports.STRIPE_PUBLISHABLE_KEY = STRIPE_PUBLISHABLE_KEY;
    exports.STRIPE_OPTIONS = STRIPE_OPTIONS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-stripe.umd.js.map