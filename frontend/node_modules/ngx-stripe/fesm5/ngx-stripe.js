import { filter, first, map, switchMap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { __spread, __awaiter, __generator, __assign } from 'tslib';
import { BehaviorSubject, from } from 'rxjs';
import { InjectionToken, Injectable, Inject, PLATFORM_ID, Component, Input, ViewChild, EventEmitter, Output, Directive, Optional, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-instance.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeInstance = /** @class */ (function () {
    function StripeInstance(loader, window, key, options) {
        var _this = this;
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.stripe = this.stripe$
            .asObservable()
            .pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return Boolean(stripe); })));
        this.loader
            .asStream()
            .pipe(filter((/**
         * @param {?} status
         * @return {?}
         */
        function (status) { return status.loaded === true; })), first(), map((/**
         * @return {?}
         */
        function () { return ((/** @type {?} */ (_this.window.getNativeWindow()))).Stripe; })))
            .subscribe((/**
         * @param {?} stripeInstance
         * @return {?}
         */
        function (stripeInstance) {
            /** @type {?} */
            var stripe = _this.options
                ? ((/** @type {?} */ (stripeInstance(_this.key, _this.options))))
                : ((/** @type {?} */ (stripeInstance(_this.key))));
            _this.stripe$.next(stripe);
        }));
    }
    /**
     * @return {?}
     */
    StripeInstance.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        return this.stripe$.getValue();
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.elements = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.stripe$.asObservable().pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return Boolean(stripe); })), map((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return stripe.elements(options); })), first());
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.redirectToCheckout = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.redirectToCheckout(options)); })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmAuBecsDebitPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmAuBecsDebitPayment(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmBancontactPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmBancontactPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmCardPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmCardPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmEpsPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmEpsPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmFpxPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmFpxPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmGiropayPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmGiropayPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmIdealPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmIdealPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmP24Payment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmP24Payment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmSepaDebitPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmSepaDebitPayment(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeInstance.prototype.handleCardAction = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.handleCardAction(clientSecret)); })), first());
    };
    /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    StripeInstance.prototype.createPaymentMethod = /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    function (paymentMethodData) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.createPaymentMethod(paymentMethodData));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeInstance.prototype.retrievePaymentIntent = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.retrievePaymentIntent(clientSecret)); })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmAuBecsDebitSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmAuBecsDebitSetup(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmCardSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmCardSetup(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmSepaDebitSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmSepaDebitSetup(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeInstance.prototype.retrieveSetupIntent = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.confirmSepaDebitSetup(clientSecret)); })), first());
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeInstance.prototype.paymentRequest = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var stripe = this.getInstance();
        return stripe ? stripe.paymentRequest(options) : undefined;
    };
    /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    StripeInstance.prototype.createToken = /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    function (tokenType, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.createToken(tokenType, data)); })), first());
    };
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    StripeInstance.prototype.createSource = /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    function (a, b) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.createSource(a, b)); })), first());
    };
    /**
     * @param {?} source
     * @return {?}
     */
    StripeInstance.prototype.retrieveSource = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.retrieveSource(source)); })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.handleCardPayment = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).handleCardPayment(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmPaymentIntent = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).confirmPaymentIntent(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.handleCardSetup = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).handleCardSetup(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmSetupIntent = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).confirmSetupIntent(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.handleFpxPayment = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).handleFpxPayment(clientSecret, element, data));
        })), first());
    };
    return StripeInstance;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/ngx-stripe.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
/** @type {?} */
var STRIPE_OPTIONS = new InjectionToken('Stripe Options');

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/window-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WindowRef = /** @class */ (function () {
    function WindowRef(platformId) {
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    WindowRef.prototype.getNativeWindow = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            return window;
        }
        return (/** @type {?} */ ({}));
    };
    WindowRef.decorators = [
        { type: Injectable }
    ];
    WindowRef.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return WindowRef;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/document-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DocumentRef = /** @class */ (function () {
    function DocumentRef(platformId) {
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    DocumentRef.prototype.getNativeDocument = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            return document;
        }
        return (/** @type {?} */ ({}));
    };
    DocumentRef.decorators = [
        { type: Injectable }
    ];
    DocumentRef.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DocumentRef;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/api-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LazyStripeAPILoader = /** @class */ (function () {
    function LazyStripeAPILoader(platformId, window, document) {
        this.platformId = platformId;
        this.window = window;
        this.document = document;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    /**
     * @return {?}
     */
    LazyStripeAPILoader.prototype.asStream = /**
     * @return {?}
     */
    function () {
        this.load();
        return this.status.asObservable();
    };
    /**
     * @return {?}
     */
    LazyStripeAPILoader.prototype.isReady = /**
     * @return {?}
     */
    function () {
        return this.status.getValue().loaded;
    };
    /**
     * @return {?}
     */
    LazyStripeAPILoader.prototype.load = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformServer(this.platformId)) {
            return;
        }
        /** @type {?} */
        var status = this.status.getValue();
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else if (!status.loaded && !status.loading) {
            this.status.next(__assign({}, status, { loading: true }));
            /** @type {?} */
            var script = this.document.getNativeDocument().createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
            script.src = 'https://js.stripe.com/v3/';
            script.onload = (/**
             * @return {?}
             */
            function () {
                _this.status.next({
                    error: false,
                    loaded: true,
                    loading: false
                });
            });
            script.onerror = (/**
             * @return {?}
             */
            function () {
                _this.status.next({
                    error: true,
                    loaded: false,
                    loading: false
                });
            });
            this.document.getNativeDocument().body.appendChild(script);
        }
    };
    LazyStripeAPILoader.decorators = [
        { type: Injectable }
    ];
    LazyStripeAPILoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: WindowRef },
        { type: DocumentRef }
    ]; };
    return LazyStripeAPILoader;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeService = /** @class */ (function () {
    function StripeService(key, options, loader, window) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        if (key) {
            this.stripe = new StripeInstance(this.loader, this.window, key, options);
        }
    }
    /**
     * @return {?}
     */
    StripeService.prototype.getStripeReference = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.loader.asStream().pipe(filter((/**
         * @param {?} status
         * @return {?}
         */
        function (status) { return status.loaded === true; })), map((/**
         * @return {?}
         */
        function () { return ((/** @type {?} */ (_this.window.getNativeWindow()))).Stripe; })));
    };
    /**
     * @return {?}
     */
    StripeService.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        return this.stripe.getInstance();
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.setKey = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        return this.changeKey(key, options);
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.changeKey = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        this.stripe = new StripeInstance(this.loader, this.window, key, options);
        return this.stripe;
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.elements = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.stripe.elements(options);
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.redirectToCheckout = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.stripe.redirectToCheckout(options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.confirmAuBecsDebitPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmBancontactPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmBancontactPayment(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmCardPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmCardPayment(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmEpsPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmEpsPayment(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmFpxPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmFpxPayment(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmGiropayPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmGiropayPayment(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmIdealPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmIdealPayment(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmP24Payment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmP24Payment(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.confirmSepaDebitPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.confirmSepaDebitPayment(clientSecret, data);
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeService.prototype.handleCardAction = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.handleCardAction(clientSecret);
    };
    /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    StripeService.prototype.createPaymentMethod = /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    function (paymentMethodData) {
        return this.stripe.createPaymentMethod(paymentMethodData);
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeService.prototype.retrievePaymentIntent = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.retrievePaymentIntent(clientSecret);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.confirmAuBecsDebitSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeService.prototype.confirmCardSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.confirmCardSetup(clientSecret, data, options);
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.confirmSepaDebitSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.confirmSepaDebitSetup(clientSecret, data);
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeService.prototype.retrieveSetupIntent = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.retrieveSetupIntent(clientSecret);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeService.prototype.paymentRequest = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.stripe.paymentRequest(options);
    };
    /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    StripeService.prototype.createToken = /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    function (tokenType, data) {
        return this.stripe.createToken(tokenType, data);
    };
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    StripeService.prototype.createSource = /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    function (a, b) {
        return this.stripe.createSource(a, b);
    };
    /**
     * @param {?} source
     * @return {?}
     */
    StripeService.prototype.retrieveSource = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return this.stripe.retrieveSource(source);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.handleCardPayment = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.handleCardPayment(clientSecret, element, data);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.confirmPaymentIntent = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.confirmPaymentIntent(clientSecret, element, data);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.handleCardSetup = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.handleCardSetup(clientSecret, element, data);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.confirmSetupIntent = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.confirmSetupIntent(clientSecret, element, data);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeService.prototype.handleFpxPayment = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.handleFpxPayment(clientSecret, element, data);
    };
    StripeService.decorators = [
        { type: Injectable }
    ];
    StripeService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
        { type: LazyStripeAPILoader },
        { type: WindowRef }
    ]; };
    return StripeService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-elements.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeElementsService = /** @class */ (function () {
    function StripeElementsService(stripeService) {
        this.stripeService = stripeService;
    }
    /**
     * @param {?} stripe
     * @param {?=} options
     * @return {?}
     */
    StripeElementsService.prototype.elements = /**
     * @param {?} stripe
     * @param {?=} options
     * @return {?}
     */
    function (stripe, options) {
        if (options === void 0) { options = {}; }
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    };
    /**
     * @param {?} stripe
     * @param {?} options
     * @return {?}
     */
    StripeElementsService.prototype.paymentRequest = /**
     * @param {?} stripe
     * @param {?} options
     * @return {?}
     */
    function (stripe, options) {
        return stripe
            ? stripe.paymentRequest(options)
            : this.stripeService.paymentRequest(options);
    };
    /**
     * @param {?} options
     * @param {?} containerClass
     * @return {?}
     */
    StripeElementsService.prototype.mergeOptions = /**
     * @param {?} options
     * @param {?} containerClass
     * @return {?}
     */
    function (options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return __assign({}, (options || {}), { classes: {
                    base: containerClass,
                    complete: containerClass + "--complete",
                    empty: containerClass + "--empty",
                    focus: containerClass + "--focus",
                    invalid: containerClass + "--invalid",
                    webkitAutoFill: containerClass + "--webkit-autoFill"
                } });
        }
        return options || {};
    };
    StripeElementsService.decorators = [
        { type: Injectable }
    ];
    StripeElementsService.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    return StripeElementsService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeCardComponent = /** @class */ (function () {
    function StripeCardComponent(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeCardComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var options, updateElements, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.state = 'starting';
                        options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                        updateElements = false;
                        if (!(changes.elementsOptions || changes.stripe || !this.elements)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe, this.elementsOptions)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        updateElements = true;
                        _b.label = 2;
                    case 2:
                        if (changes.options ||
                            changes.containerClass ||
                            !this.element ||
                            updateElements) {
                            if (this.element && !updateElements) {
                                this.update(options);
                            }
                            else if (this.elements && updateElements) {
                                this.createElement(options);
                            }
                        }
                        this.state = 'ready';
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeCardComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.state === 'notready')) return [3 /*break*/, 2];
                        this.state = 'starting';
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        this.createElement();
                        this.state = 'ready';
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeCardComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeCardComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeCardComponent.prototype.getCard = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    StripeCardComponent.prototype.createElement = /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.element = this.elements.create('card', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return _this.change.emit(ev); }));
        this.element.on('blur', (/**
         * @return {?}
         */
        function () { return _this.blur.emit(); }));
        this.element.on('focus', (/**
         * @return {?}
         */
        function () { return _this.focus.emit(); }));
        this.element.on('ready', (/**
         * @return {?}
         */
        function () { return _this.ready.emit(); }));
        this.element.on('escape', (/**
         * @return {?}
         */
        function () { return _this.escape.emit(); }));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    };
    StripeCardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-card',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeCardComponent.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripeCardComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeCardComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/card-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeCardGroupDirective = /** @class */ (function () {
    function StripeCardGroupDirective(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.elements = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeCardGroupDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var elementsOptions, stripe, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.state = 'starting';
                        elementsOptions = this.elementsOptions;
                        stripe = this.stripe;
                        if (!(changes.elementsOptions || changes.stripe || !this._elements)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(stripe, elementsOptions)
                                .toPromise()];
                    case 1:
                        _a._elements = _b.sent();
                        this.elements.emit(this._elements);
                        _b.label = 2;
                    case 2:
                        this.state = 'ready';
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeCardGroupDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.state === 'notready')) return [3 /*break*/, 2];
                        this.state = 'starting';
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe)
                                .toPromise()];
                    case 1:
                        _a._elements = _b.sent();
                        this.elements.emit(this._elements);
                        this.state = 'ready';
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    StripeCardGroupDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'
                },] }
    ];
    StripeCardGroupDirective.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripeCardGroupDirective.propDecorators = {
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        elements: [{ type: Output }]
    };
    return StripeCardGroupDirective;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card-number.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeCardNumberComponent = /** @class */ (function () {
    function StripeCardNumberComponent(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeCardNumberComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (changes.options || changes.containerClass) {
                    this.setupElement('options');
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * @return {?}
     */
    StripeCardNumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((/**
             * @param {?} elements
             * @return {?}
             */
            function (elements) {
                _this.elements = elements;
                _this.setupElement('elements');
            }));
        }
        else {
            throw new Error('StripeCardNumberComponent must have StripeCardGroupDirective parent');
        }
    };
    /**
     * @return {?}
     */
    StripeCardNumberComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeCardNumberComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeCardNumberComponent.prototype.getCardNumber = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    StripeCardNumberComponent.prototype.setupElement = /**
     * @private
     * @param {?} source
     * @return {?}
     */
    function (source) {
        var _this = this;
        /** @type {?} */
        var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardNumber', options);
            this.element.on('change', (/**
             * @param {?} ev
             * @return {?}
             */
            function (ev) { return _this.change.emit(ev); }));
            this.element.on('blur', (/**
             * @return {?}
             */
            function () { return _this.blur.emit(); }));
            this.element.on('focus', (/**
             * @return {?}
             */
            function () { return _this.focus.emit(); }));
            this.element.on('ready', (/**
             * @return {?}
             */
            function () { return _this.ready.emit(); }));
            this.element.on('escape', (/**
             * @return {?}
             */
            function () { return _this.escape.emit(); }));
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    };
    StripeCardNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-card-number',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeCardNumberComponent.ctorParameters = function () { return [
        { type: StripeElementsService },
        { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    StripeCardNumberComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeCardNumberComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card-expiry.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeCardExpiryComponent = /** @class */ (function () {
    function StripeCardExpiryComponent(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeCardExpiryComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (changes.options || changes.containerClass) {
                    this.setupElement('options');
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * @return {?}
     */
    StripeCardExpiryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((/**
             * @param {?} elements
             * @return {?}
             */
            function (elements) {
                _this.elements = elements;
                _this.setupElement('elements');
            }));
        }
        else {
            throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');
        }
    };
    /**
     * @return {?}
     */
    StripeCardExpiryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeCardExpiryComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeCardExpiryComponent.prototype.getCardExpiry = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    StripeCardExpiryComponent.prototype.setupElement = /**
     * @private
     * @param {?} source
     * @return {?}
     */
    function (source) {
        var _this = this;
        /** @type {?} */
        var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardExpiry', options);
            this.element.on('change', (/**
             * @param {?} ev
             * @return {?}
             */
            function (ev) { return _this.change.emit(ev); }));
            this.element.on('blur', (/**
             * @return {?}
             */
            function () { return _this.blur.emit(); }));
            this.element.on('focus', (/**
             * @return {?}
             */
            function () { return _this.focus.emit(); }));
            this.element.on('ready', (/**
             * @return {?}
             */
            function () { return _this.ready.emit(); }));
            this.element.on('escape', (/**
             * @return {?}
             */
            function () { return _this.escape.emit(); }));
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    };
    StripeCardExpiryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-card-expiry',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeCardExpiryComponent.ctorParameters = function () { return [
        { type: StripeElementsService },
        { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    StripeCardExpiryComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeCardExpiryComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card-cvc.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeCardCvcComponent = /** @class */ (function () {
    function StripeCardCvcComponent(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeCardCvcComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (changes.options || changes.containerClass) {
                    this.setupElement('options');
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * @return {?}
     */
    StripeCardCvcComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((/**
             * @param {?} elements
             * @return {?}
             */
            function (elements) {
                _this.elements = elements;
                _this.setupElement('elements');
            }));
        }
        else {
            throw new Error('StripeCardCvcComponent must have StripeCardGroupDirective parent');
        }
    };
    /**
     * @return {?}
     */
    StripeCardCvcComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeCardCvcComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeCardCvcComponent.prototype.getCardCvc = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    StripeCardCvcComponent.prototype.setupElement = /**
     * @private
     * @param {?} source
     * @return {?}
     */
    function (source) {
        var _this = this;
        /** @type {?} */
        var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardCvc', options);
            this.element.on('change', (/**
             * @param {?} ev
             * @return {?}
             */
            function (ev) { return _this.change.emit(ev); }));
            this.element.on('blur', (/**
             * @return {?}
             */
            function () { return _this.blur.emit(); }));
            this.element.on('focus', (/**
             * @return {?}
             */
            function () { return _this.focus.emit(); }));
            this.element.on('ready', (/**
             * @return {?}
             */
            function () { return _this.ready.emit(); }));
            this.element.on('escape', (/**
             * @return {?}
             */
            function () { return _this.escape.emit(); }));
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    };
    StripeCardCvcComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-card-cvc',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeCardCvcComponent.ctorParameters = function () { return [
        { type: StripeElementsService },
        { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    StripeCardCvcComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeCardCvcComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/fpx-bank.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeFpxBankComponent = /** @class */ (function () {
    function StripeFpxBankComponent(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeFpxBankComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var options, updateElements, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.state = 'starting';
                        options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                        updateElements = false;
                        if (!(changes.elementsOptions || changes.stripe || !this.elements)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe, this.elementsOptions)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        updateElements = true;
                        _b.label = 2;
                    case 2:
                        if (changes.options ||
                            changes.containerClass ||
                            !this.element ||
                            updateElements) {
                            if (this.element && !updateElements) {
                                this.update(options);
                            }
                            else if (this.elements && updateElements) {
                                this.createElement(options);
                            }
                        }
                        this.state = 'ready';
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeFpxBankComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.state === 'notready')) return [3 /*break*/, 2];
                        this.state = 'starting';
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        this.createElement();
                        this.state = 'ready';
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeFpxBankComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeFpxBankComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeFpxBankComponent.prototype.getFpxBank = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    StripeFpxBankComponent.prototype.createElement = /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = { accountHolderType: 'individual' }; }
        this.element = this.elements.create('fpxBank', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return _this.change.emit(ev); }));
        this.element.on('blur', (/**
         * @return {?}
         */
        function () { return _this.blur.emit(); }));
        this.element.on('focus', (/**
         * @return {?}
         */
        function () { return _this.focus.emit(); }));
        this.element.on('ready', (/**
         * @return {?}
         */
        function () { return _this.ready.emit(); }));
        this.element.on('escape', (/**
         * @return {?}
         */
        function () { return _this.escape.emit(); }));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    };
    StripeFpxBankComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-fpx-bank',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeFpxBankComponent.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripeFpxBankComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeFpxBankComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ideal-bank.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeIdealBankComponent = /** @class */ (function () {
    function StripeIdealBankComponent(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeIdealBankComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var options, updateElements, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.state = 'starting';
                        options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                        updateElements = false;
                        if (!(changes.elementsOptions || changes.stripe || !this.elements)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe, this.elementsOptions)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        updateElements = true;
                        _b.label = 2;
                    case 2:
                        if (changes.options ||
                            changes.containerClass ||
                            !this.element ||
                            updateElements) {
                            if (this.element && !updateElements) {
                                this.update(options);
                            }
                            else if (this.elements && updateElements) {
                                this.createElement(options);
                            }
                        }
                        this.state = 'ready';
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeIdealBankComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.state === 'notready')) return [3 /*break*/, 2];
                        this.state = 'starting';
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        this.createElement();
                        this.state = 'ready';
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeIdealBankComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeIdealBankComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeIdealBankComponent.prototype.getIdealBank = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    StripeIdealBankComponent.prototype.createElement = /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.element = this.elements.create('idealBank', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return _this.change.emit(ev); }));
        this.element.on('blur', (/**
         * @return {?}
         */
        function () { return _this.blur.emit(); }));
        this.element.on('focus', (/**
         * @return {?}
         */
        function () { return _this.focus.emit(); }));
        this.element.on('ready', (/**
         * @return {?}
         */
        function () { return _this.ready.emit(); }));
        this.element.on('escape', (/**
         * @return {?}
         */
        function () { return _this.escape.emit(); }));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    };
    StripeIdealBankComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-ideal-bank',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeIdealBankComponent.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripeIdealBankComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeIdealBankComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/iban.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeIbanComponent = /** @class */ (function () {
    function StripeIbanComponent(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeIbanComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var options, updateElements, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.state = 'starting';
                        options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                        updateElements = false;
                        if (!(changes.elementsOptions || changes.stripe || !this.elements)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe, this.elementsOptions)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        updateElements = true;
                        _b.label = 2;
                    case 2:
                        if (changes.options ||
                            changes.containerClass ||
                            !this.element ||
                            updateElements) {
                            if (this.element && !updateElements) {
                                this.update(options);
                            }
                            else if (this.elements && updateElements) {
                                this.createElement(options);
                            }
                        }
                        this.state = 'ready';
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeIbanComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.state === 'notready')) return [3 /*break*/, 2];
                        this.state = 'starting';
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        this.createElement();
                        this.state = 'ready';
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeIbanComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeIbanComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeIbanComponent.prototype.getIban = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    StripeIbanComponent.prototype.createElement = /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.element = this.elements.create('iban', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return _this.change.emit(ev); }));
        this.element.on('blur', (/**
         * @return {?}
         */
        function () { return _this.blur.emit(); }));
        this.element.on('focus', (/**
         * @return {?}
         */
        function () { return _this.focus.emit(); }));
        this.element.on('ready', (/**
         * @return {?}
         */
        function () { return _this.ready.emit(); }));
        this.element.on('escape', (/**
         * @return {?}
         */
        function () { return _this.escape.emit(); }));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    };
    StripeIbanComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-iban',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeIbanComponent.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripeIbanComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeIbanComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/au-bank-account.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeAuBankAccountComponent = /** @class */ (function () {
    function StripeAuBankAccountComponent(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeAuBankAccountComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var options, updateElements, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.state = 'starting';
                        options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                        updateElements = false;
                        if (!(changes.elementsOptions || changes.stripe || !this.elements)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe, this.elementsOptions)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        updateElements = true;
                        _b.label = 2;
                    case 2:
                        if (changes.options ||
                            changes.containerClass ||
                            !this.element ||
                            updateElements) {
                            if (this.element && !updateElements) {
                                this.update(options);
                            }
                            else if (this.elements && updateElements) {
                                this.createElement(options);
                            }
                        }
                        this.state = 'ready';
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeAuBankAccountComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.state === 'notready')) return [3 /*break*/, 2];
                        this.state = 'starting';
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe)
                                .toPromise()];
                    case 1:
                        _a.elements = _b.sent();
                        this.createElement();
                        this.state = 'ready';
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeAuBankAccountComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.element) {
            this.element.destroy();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeAuBankAccountComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripeAuBankAccountComponent.prototype.getAuBankAccount = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    StripeAuBankAccountComponent.prototype.createElement = /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.element = this.elements.create('auBankAccount', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return _this.change.emit(ev); }));
        this.element.on('blur', (/**
         * @return {?}
         */
        function () { return _this.blur.emit(); }));
        this.element.on('focus', (/**
         * @return {?}
         */
        function () { return _this.focus.emit(); }));
        this.element.on('ready', (/**
         * @return {?}
         */
        function () { return _this.ready.emit(); }));
        this.element.on('escape', (/**
         * @return {?}
         */
        function () { return _this.escape.emit(); }));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    };
    StripeAuBankAccountComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-au-bank-account',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripeAuBankAccountComponent.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripeAuBankAccountComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        options: [{ type: Input }],
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        load: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        escape: [{ type: Output }]
    };
    return StripeAuBankAccountComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/payment-request-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripePaymentRequestButtonComponent = /** @class */ (function () {
    function StripePaymentRequestButtonComponent(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.token = new EventEmitter();
        this.paymentMethod = new EventEmitter();
        this.source = new EventEmitter();
        this.cancel = new EventEmitter();
        this.shippingaddresschange = new EventEmitter();
        this.shippingoptionchange = new EventEmitter();
        this.notavailable = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var options, elementsOptions, stripe, updateElements, elements;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                        elementsOptions = this.elementsOptions;
                        stripe = this.stripe;
                        updateElements = false;
                        if (!(changes.elementsOptions || changes.stripe || !this.elements)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(stripe, elementsOptions)
                                .toPromise()];
                    case 1:
                        elements = _a.sent();
                        this.elements = elements;
                        updateElements = true;
                        _a.label = 2;
                    case 2:
                        if (changes.paymentOptions && this.paymentRequest) {
                            this.updateRequest(this.paymentOptions);
                        }
                        if (changes.options ||
                            changes.containerClass ||
                            !this.element ||
                            updateElements) {
                            if (this.element && !updateElements) {
                                this.update(options);
                            }
                            else if (this.elements && updateElements) {
                                this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);
                                this.paymentRequest.on('token', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) { return _this.token.emit(ev); }));
                                this.paymentRequest.on('paymentmethod', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) {
                                    return _this.paymentMethod.emit(ev);
                                }));
                                this.paymentRequest.on('source', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) { return _this.source.emit(ev); }));
                                this.paymentRequest.on('cancel', (/**
                                 * @return {?}
                                 */
                                function () { return _this.cancel.emit(); }));
                                this.paymentRequest.on('shippingaddresschange', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) {
                                    return _this.shippingaddresschange.emit(ev);
                                }));
                                this.paymentRequest.on('shippingoptionchange', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) {
                                    return _this.shippingoptionchange.emit(ev);
                                }));
                                this.element = this.elements.create('paymentRequestButton', __assign({ paymentRequest: this.paymentRequest }, options));
                                this.canMakePayment().subscribe((/**
                                 * @param {?} result
                                 * @return {?}
                                 */
                                function (result) {
                                    if (result) {
                                        _this.element.on('click', (/**
                                         * @param {?} ev
                                         * @return {?}
                                         */
                                        function (ev) { return _this.change.emit(ev); }));
                                        _this.element.on('blur', (/**
                                         * @return {?}
                                         */
                                        function () { return _this.blur.emit(); }));
                                        _this.element.on('focus', (/**
                                         * @return {?}
                                         */
                                        function () { return _this.focus.emit(); }));
                                        _this.element.on('ready', (/**
                                         * @return {?}
                                         */
                                        function () { return _this.ready.emit(); }));
                                        _this.element.mount(_this.stripeElementRef.nativeElement);
                                        _this.load.emit({
                                            paymentRequestButton: _this.element,
                                            paymentRequest: _this.paymentRequest
                                        });
                                    }
                                    else {
                                        _this.notavailable.emit();
                                    }
                                }));
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.canMakePayment = /**
     * @return {?}
     */
    function () {
        return from(this.paymentRequest.canMakePayment());
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.updateRequest = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.paymentRequest.update(options);
    };
    /**
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        this.paymentRequest.show();
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.getButton = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    StripePaymentRequestButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-payment-request-button',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripePaymentRequestButtonComponent.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripePaymentRequestButtonComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        paymentOptions: [{ type: Input }],
        options: [{ type: Input }],
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        load: [{ type: Output }],
        change: [{ type: Output }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        token: [{ type: Output }],
        paymentMethod: [{ type: Output }],
        source: [{ type: Output }],
        cancel: [{ type: Output }],
        shippingaddresschange: [{ type: Output }],
        shippingoptionchange: [{ type: Output }],
        notavailable: [{ type: Output }]
    };
    return StripePaymentRequestButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripeFactoryService = /** @class */ (function () {
    function StripeFactoryService(baseKey, baseOptions, loader, window) {
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    /**
     * @param {?=} key
     * @param {?=} options
     * @return {?}
     */
    StripeFactoryService.prototype.create = /**
     * @param {?=} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        if (!key && !this.baseKey) {
            return null;
        }
        return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    };
    StripeFactoryService.decorators = [
        { type: Injectable }
    ];
    StripeFactoryService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
        { type: LazyStripeAPILoader },
        { type: WindowRef }
    ]; };
    return StripeFactoryService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-stripe.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var components = [
    StripeCardComponent,
    StripeCardNumberComponent,
    StripeCardExpiryComponent,
    StripeCardCvcComponent,
    StripeFpxBankComponent,
    StripeIdealBankComponent,
    StripeIbanComponent,
    StripeAuBankAccountComponent,
    StripePaymentRequestButtonComponent
];
/** @type {?} */
var directives = [StripeCardGroupDirective];
var NgxStripeModule = /** @class */ (function () {
    function NgxStripeModule() {
    }
    /**
     * @param {?=} publishableKey
     * @param {?=} options
     * @return {?}
     */
    NgxStripeModule.forRoot = /**
     * @param {?=} publishableKey
     * @param {?=} options
     * @return {?}
     */
    function (publishableKey, options) {
        return {
            ngModule: NgxStripeModule,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                StripeElementsService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    };
    /**
     * @param {?=} publishableKey
     * @param {?=} options
     * @return {?}
     */
    NgxStripeModule.forChild = /**
     * @param {?=} publishableKey
     * @param {?=} options
     * @return {?}
     */
    function (publishableKey, options) {
        return {
            ngModule: NgxStripeModule,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                StripeElementsService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    };
    NgxStripeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: __spread(components, directives),
                    exports: __spread(components, directives)
                },] }
    ];
    return NgxStripeModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-stripe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxStripeModule, StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIbanComponent, StripeIdealBankComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective, StripeService, StripeFactoryService, StripeInstance, LazyStripeAPILoader, WindowRef, DocumentRef, StripeElementsService, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS };

//# sourceMappingURL=ngx-stripe.js.map