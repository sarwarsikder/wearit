/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-instance.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject, from } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
var StripeInstance = /** @class */ (function () {
    function StripeInstance(loader, window, key, options) {
        var _this = this;
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.stripe = this.stripe$
            .asObservable()
            .pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return Boolean(stripe); })));
        this.loader
            .asStream()
            .pipe(filter((/**
         * @param {?} status
         * @return {?}
         */
        function (status) { return status.loaded === true; })), first(), map((/**
         * @return {?}
         */
        function () { return ((/** @type {?} */ (_this.window.getNativeWindow()))).Stripe; })))
            .subscribe((/**
         * @param {?} stripeInstance
         * @return {?}
         */
        function (stripeInstance) {
            /** @type {?} */
            var stripe = _this.options
                ? ((/** @type {?} */ (stripeInstance(_this.key, _this.options))))
                : ((/** @type {?} */ (stripeInstance(_this.key))));
            _this.stripe$.next(stripe);
        }));
    }
    /**
     * @return {?}
     */
    StripeInstance.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        return this.stripe$.getValue();
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.elements = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.stripe$.asObservable().pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return Boolean(stripe); })), map((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return stripe.elements(options); })), first());
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.redirectToCheckout = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.redirectToCheckout(options)); })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmAuBecsDebitPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmAuBecsDebitPayment(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmBancontactPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmBancontactPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmCardPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmCardPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmEpsPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmEpsPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmFpxPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmFpxPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmGiropayPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmGiropayPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmIdealPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmIdealPayment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmP24Payment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmP24Payment(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmSepaDebitPayment = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmSepaDebitPayment(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeInstance.prototype.handleCardAction = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.handleCardAction(clientSecret)); })), first());
    };
    /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    StripeInstance.prototype.createPaymentMethod = /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    function (paymentMethodData) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.createPaymentMethod(paymentMethodData));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeInstance.prototype.retrievePaymentIntent = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.retrievePaymentIntent(clientSecret)); })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmAuBecsDebitSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmAuBecsDebitSetup(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    StripeInstance.prototype.confirmCardSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    function (clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmCardSetup(clientSecret, data, options));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmSepaDebitSetup = /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(stripe.confirmSepaDebitSetup(clientSecret, data));
        })), first());
    };
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    StripeInstance.prototype.retrieveSetupIntent = /**
     * @param {?} clientSecret
     * @return {?}
     */
    function (clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.confirmSepaDebitSetup(clientSecret)); })), first());
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripeInstance.prototype.paymentRequest = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var stripe = this.getInstance();
        return stripe ? stripe.paymentRequest(options) : undefined;
    };
    /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    StripeInstance.prototype.createToken = /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    function (tokenType, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.createToken(tokenType, data)); })), first());
    };
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    StripeInstance.prototype.createSource = /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    function (a, b) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.createSource(a, b)); })), first());
    };
    /**
     * @param {?} source
     * @return {?}
     */
    StripeInstance.prototype.retrieveSource = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) { return from(stripe.retrieveSource(source)); })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.handleCardPayment = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).handleCardPayment(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmPaymentIntent = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).confirmPaymentIntent(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.handleCardSetup = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).handleCardSetup(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.confirmSetupIntent = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).confirmSetupIntent(clientSecret, element, data));
        })), first());
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    StripeInstance.prototype.handleFpxPayment = /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    function (clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        function (stripe) {
            return from(((/** @type {?} */ (stripe))).handleFpxPayment(clientSecret, element, data));
        })), first());
    };
    return StripeInstance;
}());
export { StripeInstance };
if (false) {
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.stripe$;
    /** @type {?} */
    StripeInstance.prototype.stripe;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.window;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.key;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,