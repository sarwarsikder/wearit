/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/ngx-stripe.interface';
import { LazyStripeAPILoader } from './api-loader.service';
import { WindowRef } from './window-ref.service';
import { StripeInstance } from './stripe-instance.class';
var StripeFactoryService = /** @class */ (function () {
    function StripeFactoryService(baseKey, baseOptions, loader, window) {
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    /**
     * @param {?=} key
     * @param {?=} options
     * @return {?}
     */
    StripeFactoryService.prototype.create = /**
     * @param {?=} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        if (!key && !this.baseKey) {
            return null;
        }
        return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    };
    StripeFactoryService.decorators = [
        { type: Injectable }
    ];
    StripeFactoryService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
        { type: LazyStripeAPILoader },
        { type: WindowRef }
    ]; };
    return StripeFactoryService;
}());
export { StripeFactoryService };
if (false) {
    /** @type {?} */
    StripeFactoryService.prototype.baseKey;
    /** @type {?} */
    StripeFactoryService.prototype.baseOptions;
    /** @type {?} */
    StripeFactoryService.prototype.loader;
    /** @type {?} */
    StripeFactoryService.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zdHJpcGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3RyaXBlLWZhY3Rvcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSW5ELE9BQU8sRUFDTCxjQUFjLEVBQ2Qsc0JBQXNCLEVBQ3ZCLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWpELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RDtJQUVFLDhCQUN5QyxPQUFlLEVBQ3ZCLFdBQXFDLEVBQzdELE1BQTJCLEVBQzNCLE1BQWlCO1FBSGUsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUN2QixnQkFBVyxHQUFYLFdBQVcsQ0FBMEI7UUFDN0QsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUN2QixDQUFDOzs7Ozs7SUFFRyxxQ0FBTTs7Ozs7SUFBYixVQUNFLEdBQVksRUFDWixPQUFrQztRQUVsQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxJQUFJLGNBQWMsQ0FDdkIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsTUFBTSxFQUNYLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUNuQixPQUFPLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FDNUIsQ0FBQztJQUNKLENBQUM7O2dCQXZCRixVQUFVOzs7NkNBR04sTUFBTSxTQUFDLHNCQUFzQjtnREFDN0IsTUFBTSxTQUFDLGNBQWM7Z0JBVGpCLG1CQUFtQjtnQkFDbkIsU0FBUzs7SUE0QmxCLDJCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F2Qlksb0JBQW9COzs7SUFFN0IsdUNBQXNEOztJQUN0RCwyQ0FBb0U7O0lBQ3BFLHNDQUFrQzs7SUFDbEMsc0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN0cmlwZUNvbnN0cnVjdG9yT3B0aW9ucyB9IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJztcblxuaW1wb3J0IHtcbiAgU1RSSVBFX09QVElPTlMsXG4gIFNUUklQRV9QVUJMSVNIQUJMRV9LRVlcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9uZ3gtc3RyaXBlLmludGVyZmFjZSc7XG5cbmltcG9ydCB7IExhenlTdHJpcGVBUElMb2FkZXIgfSBmcm9tICcuL2FwaS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICcuL3dpbmRvdy1yZWYuc2VydmljZSc7XG5cbmltcG9ydCB7IFN0cmlwZUluc3RhbmNlIH0gZnJvbSAnLi9zdHJpcGUtaW5zdGFuY2UuY2xhc3MnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RyaXBlRmFjdG9yeVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFNUUklQRV9QVUJMSVNIQUJMRV9LRVkpIHB1YmxpYyBiYXNlS2V5OiBzdHJpbmcsXG4gICAgQEluamVjdChTVFJJUEVfT1BUSU9OUykgcHVibGljIGJhc2VPcHRpb25zOiBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnMsXG4gICAgcHVibGljIGxvYWRlcjogTGF6eVN0cmlwZUFQSUxvYWRlcixcbiAgICBwdWJsaWMgd2luZG93OiBXaW5kb3dSZWZcbiAgKSB7fVxuXG4gIHB1YmxpYyBjcmVhdGUoXG4gICAga2V5Pzogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnNcbiAgKTogU3RyaXBlSW5zdGFuY2Uge1xuICAgIGlmICgha2V5ICYmICF0aGlzLmJhc2VLZXkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3RyaXBlSW5zdGFuY2UoXG4gICAgICB0aGlzLmxvYWRlcixcbiAgICAgIHRoaXMud2luZG93LFxuICAgICAga2V5IHx8IHRoaXMuYmFzZUtleSxcbiAgICAgIG9wdGlvbnMgfHwgdGhpcy5iYXNlT3B0aW9uc1xuICAgICk7XG4gIH1cbn1cbiJdfQ==