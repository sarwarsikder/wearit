/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/payment-request-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, EventEmitter, Output } from '@angular/core';
import { from } from 'rxjs';
import { StripeInstance } from '../services/stripe-instance.class';
import { StripeElementsService } from '../services/stripe-elements.service';
var StripePaymentRequestButtonComponent = /** @class */ (function () {
    function StripePaymentRequestButtonComponent(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.token = new EventEmitter();
        this.paymentMethod = new EventEmitter();
        this.source = new EventEmitter();
        this.cancel = new EventEmitter();
        this.shippingaddresschange = new EventEmitter();
        this.shippingoptionchange = new EventEmitter();
        this.notavailable = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, elementsOptions, stripe, updateElements, elements;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
                        elementsOptions = this.elementsOptions;
                        stripe = this.stripe;
                        updateElements = false;
                        if (!(changes.elementsOptions || changes.stripe || !this.elements)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(stripe, elementsOptions)
                                .toPromise()];
                    case 1:
                        elements = _a.sent();
                        this.elements = elements;
                        updateElements = true;
                        _a.label = 2;
                    case 2:
                        if (changes.paymentOptions && this.paymentRequest) {
                            this.updateRequest(this.paymentOptions);
                        }
                        if (changes.options ||
                            changes.containerClass ||
                            !this.element ||
                            updateElements) {
                            if (this.element && !updateElements) {
                                this.update(options);
                            }
                            else if (this.elements && updateElements) {
                                this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);
                                this.paymentRequest.on('token', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) { return _this.token.emit(ev); }));
                                this.paymentRequest.on('paymentmethod', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) {
                                    return _this.paymentMethod.emit(ev);
                                }));
                                this.paymentRequest.on('source', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) { return _this.source.emit(ev); }));
                                this.paymentRequest.on('cancel', (/**
                                 * @return {?}
                                 */
                                function () { return _this.cancel.emit(); }));
                                this.paymentRequest.on('shippingaddresschange', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) {
                                    return _this.shippingaddresschange.emit(ev);
                                }));
                                this.paymentRequest.on('shippingoptionchange', (/**
                                 * @param {?} ev
                                 * @return {?}
                                 */
                                function (ev) {
                                    return _this.shippingoptionchange.emit(ev);
                                }));
                                this.element = this.elements.create('paymentRequestButton', tslib_1.__assign({ paymentRequest: this.paymentRequest }, options));
                                this.canMakePayment().subscribe((/**
                                 * @param {?} result
                                 * @return {?}
                                 */
                                function (result) {
                                    if (result) {
                                        _this.element.on('click', (/**
                                         * @param {?} ev
                                         * @return {?}
                                         */
                                        function (ev) { return _this.change.emit(ev); }));
                                        _this.element.on('blur', (/**
                                         * @return {?}
                                         */
                                        function () { return _this.blur.emit(); }));
                                        _this.element.on('focus', (/**
                                         * @return {?}
                                         */
                                        function () { return _this.focus.emit(); }));
                                        _this.element.on('ready', (/**
                                         * @return {?}
                                         */
                                        function () { return _this.ready.emit(); }));
                                        _this.element.mount(_this.stripeElementRef.nativeElement);
                                        _this.load.emit({
                                            paymentRequestButton: _this.element,
                                            paymentRequest: _this.paymentRequest
                                        });
                                    }
                                    else {
                                        _this.notavailable.emit();
                                    }
                                }));
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.canMakePayment = /**
     * @return {?}
     */
    function () {
        return from(this.paymentRequest.canMakePayment());
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.update = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.element.update(options);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.updateRequest = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.paymentRequest.update(options);
    };
    /**
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        this.paymentRequest.show();
    };
    /**
     * @deprecated
     */
    /**
     * @deprecated
     * @return {?}
     */
    StripePaymentRequestButtonComponent.prototype.getButton = /**
     * @deprecated
     * @return {?}
     */
    function () {
        return this.element;
    };
    StripePaymentRequestButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-stripe-payment-request-button',
                    template: "<div class=\"field\" #stripeElementRef></div>"
                }] }
    ];
    StripePaymentRequestButtonComponent.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripePaymentRequestButtonComponent.propDecorators = {
        stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
        containerClass: [{ type: Input }],
        paymentOptions: [{ type: Input }],
        options: [{ type: Input }],
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        load: [{ type: Output }],
        change: [{ type: Output }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        token: [{ type: Output }],
        paymentMethod: [{ type: Output }],
        source: [{ type: Output }],
        cancel: [{ type: Output }],
        shippingaddresschange: [{ type: Output }],
        shippingoptionchange: [{ type: Output }],
        notavailable: [{ type: Output }]
    };
    return StripePaymentRequestButtonComponent;
}());
export { StripePaymentRequestButtonComponent };
if (false) {
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.stripeElementRef;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.element;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.paymentRequest;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.containerClass;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.paymentOptions;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.options;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.elementsOptions;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.stripe;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.load;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.change;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.blur;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.focus;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.ready;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.token;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.paymentMethod;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.source;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.cancel;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.shippingaddresschange;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.shippingoptionchange;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.notavailable;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.elements;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.stripeElementsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1yZXF1ZXN0LWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc3RyaXBlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcGF5bWVudC1yZXF1ZXN0LWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUdQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFtQnhDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUU1RTtJQTJDRSw2Q0FBbUIscUJBQTRDO1FBQTVDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUE1QnJELFNBQUksR0FBRyxJQUFJLFlBQVksRUFHN0IsQ0FBQztRQUVLLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFFaEMsQ0FBQztRQUNNLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ2hDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ2pDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRWpDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBNEIsQ0FBQztRQUNyRCxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUV2QyxDQUFDO1FBQ00sV0FBTSxHQUFHLElBQUksWUFBWSxFQUE2QixDQUFDO1FBQ3ZELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ2xDLDBCQUFxQixHQUFHLElBQUksWUFBWSxFQUUvQyxDQUFDO1FBQ00seUJBQW9CLEdBQUcsSUFBSSxZQUFZLEVBRTlDLENBQUM7UUFDTSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFRLENB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LG1EQUEwQzs7SUFDMUMsb0RBQTJDOztJQUMzQyxvREFBMkM7O0lBRTNDLG9EQUErRDs7SUFDL0QsNERBRUk7O0lBQ0oscURBQWlFOztJQUNqRSxxREFBNEM7O0lBQzVDLG9FQUVJOztJQUNKLG1FQUVJOztJQUNKLDJEQUFrRDs7SUFFbEQsdURBQXlCOztJQUViLG9FQUFtRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zLFxuICBTdHJpcGVFbGVtZW50cyxcbiAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICBQYXltZW50UmVxdWVzdCxcbiAgQ2FuTWFrZVBheW1lbnRSZXN1bHQsXG4gIFBheW1lbnRSZXF1ZXN0VXBkYXRlT3B0aW9ucyxcbiAgU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50LFxuICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRDbGlja0V2ZW50LFxuICBQYXltZW50UmVxdWVzdFRva2VuRXZlbnQsXG4gIFBheW1lbnRSZXF1ZXN0UGF5bWVudE1ldGhvZEV2ZW50LFxuICBQYXltZW50UmVxdWVzdFNvdXJjZUV2ZW50LFxuICBQYXltZW50UmVxdWVzdFNoaXBwaW5nQWRkcmVzc0V2ZW50LFxuICBQYXltZW50UmVxdWVzdFNoaXBwaW5nT3B0aW9uRXZlbnRcbn0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQgeyBTdHJpcGVJbnN0YW5jZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0cmlwZS1pbnN0YW5jZS5jbGFzcyc7XG5pbXBvcnQgeyBTdHJpcGVFbGVtZW50c1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdHJpcGUtZWxlbWVudHMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1zdHJpcGUtcGF5bWVudC1yZXF1ZXN0LWJ1dHRvbicsXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cImZpZWxkXCIgI3N0cmlwZUVsZW1lbnRSZWY+PC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBWaWV3Q2hpbGQoJ3N0cmlwZUVsZW1lbnRSZWYnKSBwdWJsaWMgc3RyaXBlRWxlbWVudFJlZiE6IEVsZW1lbnRSZWY7XG4gIGVsZW1lbnQhOiBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnQ7XG4gIHBheW1lbnRSZXF1ZXN0ITogUGF5bWVudFJlcXVlc3Q7XG5cbiAgQElucHV0KCkgY29udGFpbmVyQ2xhc3M6IHN0cmluZztcbiAgQElucHV0KCkgcGF5bWVudE9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0T3B0aW9ucztcbiAgQElucHV0KCkgb3B0aW9uczogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucztcbiAgQElucHV0KCkgZWxlbWVudHNPcHRpb25zOiBQYXJ0aWFsPFN0cmlwZUVsZW1lbnRzT3B0aW9ucz47XG4gIEBJbnB1dCgpIHN0cmlwZTogU3RyaXBlSW5zdGFuY2U7XG5cbiAgQE91dHB1dCgpIGxvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgICBwYXltZW50UmVxdWVzdEJ1dHRvbjogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50O1xuICAgIHBheW1lbnRSZXF1ZXN0OiBQYXltZW50UmVxdWVzdDtcbiAgfT4oKTtcblxuICBAT3V0cHV0KCkgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRDbGlja0V2ZW50XG4gID4oKTtcbiAgQE91dHB1dCgpIGJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBmb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIEBPdXRwdXQoKSB0b2tlbiA9IG5ldyBFdmVudEVtaXR0ZXI8UGF5bWVudFJlcXVlc3RUb2tlbkV2ZW50PigpO1xuICBAT3V0cHV0KCkgcGF5bWVudE1ldGhvZCA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgUGF5bWVudFJlcXVlc3RQYXltZW50TWV0aG9kRXZlbnRcbiAgPigpO1xuICBAT3V0cHV0KCkgc291cmNlID0gbmV3IEV2ZW50RW1pdHRlcjxQYXltZW50UmVxdWVzdFNvdXJjZUV2ZW50PigpO1xuICBAT3V0cHV0KCkgY2FuY2VsID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgc2hpcHBpbmdhZGRyZXNzY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBQYXltZW50UmVxdWVzdFNoaXBwaW5nQWRkcmVzc0V2ZW50XG4gID4oKTtcbiAgQE91dHB1dCgpIHNoaXBwaW5nb3B0aW9uY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBQYXltZW50UmVxdWVzdFNoaXBwaW5nT3B0aW9uRXZlbnRcbiAgPigpO1xuICBAT3V0cHV0KCkgbm90YXZhaWxhYmxlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIGVsZW1lbnRzOiBTdHJpcGVFbGVtZW50cztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RyaXBlRWxlbWVudHNTZXJ2aWNlOiBTdHJpcGVFbGVtZW50c1NlcnZpY2UpIHt9XG5cbiAgYXN5bmMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZS5tZXJnZU9wdGlvbnMoXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICB0aGlzLmNvbnRhaW5lckNsYXNzXG4gICAgKTtcbiAgICBjb25zdCBlbGVtZW50c09wdGlvbnMgPSB0aGlzLmVsZW1lbnRzT3B0aW9ucztcbiAgICBjb25zdCBzdHJpcGUgPSB0aGlzLnN0cmlwZTtcbiAgICBsZXQgdXBkYXRlRWxlbWVudHMgPSBmYWxzZTtcblxuICAgIGlmIChjaGFuZ2VzLmVsZW1lbnRzT3B0aW9ucyB8fCBjaGFuZ2VzLnN0cmlwZSB8fCAhdGhpcy5lbGVtZW50cykge1xuICAgICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZVxuICAgICAgICAuZWxlbWVudHMoc3RyaXBlLCBlbGVtZW50c09wdGlvbnMpXG4gICAgICAgIC50b1Byb21pc2UoKTtcbiAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgIHVwZGF0ZUVsZW1lbnRzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5wYXltZW50T3B0aW9ucyAmJiB0aGlzLnBheW1lbnRSZXF1ZXN0KSB7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVlc3QodGhpcy5wYXltZW50T3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY2hhbmdlcy5vcHRpb25zIHx8XG4gICAgICBjaGFuZ2VzLmNvbnRhaW5lckNsYXNzIHx8XG4gICAgICAhdGhpcy5lbGVtZW50IHx8XG4gICAgICB1cGRhdGVFbGVtZW50c1xuICAgICkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudCAmJiAhdXBkYXRlRWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy51cGRhdGUob3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudHMgJiYgdXBkYXRlRWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy5wYXltZW50UmVxdWVzdCA9IHRoaXMuc3RyaXBlRWxlbWVudHNTZXJ2aWNlLnBheW1lbnRSZXF1ZXN0KFxuICAgICAgICAgIHN0cmlwZSxcbiAgICAgICAgICB0aGlzLnBheW1lbnRPcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucGF5bWVudFJlcXVlc3Qub24oJ3Rva2VuJywgKGV2KSA9PiB0aGlzLnRva2VuLmVtaXQoZXYpKTtcbiAgICAgICAgdGhpcy5wYXltZW50UmVxdWVzdC5vbigncGF5bWVudG1ldGhvZCcsIChldikgPT5cbiAgICAgICAgICB0aGlzLnBheW1lbnRNZXRob2QuZW1pdChldilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wYXltZW50UmVxdWVzdC5vbignc291cmNlJywgKGV2KSA9PiB0aGlzLnNvdXJjZS5lbWl0KGV2KSk7XG4gICAgICAgIHRoaXMucGF5bWVudFJlcXVlc3Qub24oJ2NhbmNlbCcsICgpID0+IHRoaXMuY2FuY2VsLmVtaXQoKSk7XG4gICAgICAgIHRoaXMucGF5bWVudFJlcXVlc3Qub24oJ3NoaXBwaW5nYWRkcmVzc2NoYW5nZScsIChldikgPT5cbiAgICAgICAgICB0aGlzLnNoaXBwaW5nYWRkcmVzc2NoYW5nZS5lbWl0KGV2KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnBheW1lbnRSZXF1ZXN0Lm9uKCdzaGlwcGluZ29wdGlvbmNoYW5nZScsIChldikgPT5cbiAgICAgICAgICB0aGlzLnNoaXBwaW5nb3B0aW9uY2hhbmdlLmVtaXQoZXYpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudHMuY3JlYXRlKCdwYXltZW50UmVxdWVzdEJ1dHRvbicsIHtcbiAgICAgICAgICBwYXltZW50UmVxdWVzdDogdGhpcy5wYXltZW50UmVxdWVzdCxcbiAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY2FuTWFrZVBheW1lbnQoKS5zdWJzY3JpYmUoKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbignY2xpY2snLCAoZXYpID0+IHRoaXMuY2hhbmdlLmVtaXQoZXYpKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbignYmx1cicsICgpID0+IHRoaXMuYmx1ci5lbWl0KCkpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm9uKCdmb2N1cycsICgpID0+IHRoaXMuZm9jdXMuZW1pdCgpKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbigncmVhZHknLCAoKSA9PiB0aGlzLnJlYWR5LmVtaXQoKSk7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5tb3VudCh0aGlzLnN0cmlwZUVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgICAgIHRoaXMubG9hZC5lbWl0KHtcbiAgICAgICAgICAgICAgcGF5bWVudFJlcXVlc3RCdXR0b246IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgICAgcGF5bWVudFJlcXVlc3Q6IHRoaXMucGF5bWVudFJlcXVlc3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5vdGF2YWlsYWJsZS5lbWl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYW5NYWtlUGF5bWVudCgpOiBPYnNlcnZhYmxlPENhbk1ha2VQYXltZW50UmVzdWx0IHwgbnVsbD4ge1xuICAgIHJldHVybiBmcm9tKHRoaXMucGF5bWVudFJlcXVlc3QuY2FuTWFrZVBheW1lbnQoKSk7XG4gIH1cblxuICB1cGRhdGUob3B0aW9uczogUGFydGlhbDxTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zPikge1xuICAgIHRoaXMuZWxlbWVudC51cGRhdGUob3B0aW9ucyk7XG4gIH1cblxuICB1cGRhdGVSZXF1ZXN0KG9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0VXBkYXRlT3B0aW9ucykge1xuICAgIHRoaXMucGF5bWVudFJlcXVlc3QudXBkYXRlKG9wdGlvbnMpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLnBheW1lbnRSZXF1ZXN0LnNob3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgZ2V0QnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==