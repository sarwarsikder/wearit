{"version":3,"sources":["./src/app/payout-account/components/form/update.component.ts","./src/app/payout-account/components/form/form.html","./src/app/payout-account/components/listing/listing.component.ts","./src/app/payout-account/account.routing.ts","./src/app/payout-account/services/account.service.ts","./src/app/payout-account/components/form/create.component.ts","./src/app/payout-account/components/listing/listing.html","./src/app/payout-account/account.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAkD;AACc;AACP;AACd;;IAYzC,gCAAoB,MAAc,EAAU,cAA8B,EAAU,KAAqB,EAAU,MAAqB;QAApH,WAAM,GAAN,MAAM,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAAU,UAAK,GAAL,KAAK,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAe;QAHjI,gBAAW,GAAY,KAAK,CAAC;IAIpC,CAAC;IAED,yCAAQ,GAAR;QAAA,iBAMC;QALC,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAEhD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAI;YACvC,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uCAAM,GAAN,UAAO,GAAG;QAAV,iBA8BC;QA7BC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,GAAG,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACtD;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,EAAE,EAAE;YACtE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;SAC9F;aAAM,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;YAC7E,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,EAAE,CAAC;SACjC;QAED,IAAI,KAAK,GAAG;YACV,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YACvB,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;YACzC,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB;YACjD,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;YACzC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YACvB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;YACrC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;YACzC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;YACjC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;SACtC;QAED,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,cAAI;YAC3D,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAC/C,CAAC,CAAC;IACJ,CAAC;;gBAtDM,sDAAM;gBADN,wEAAc;gBACN,8DAAc;gBACtB,wDAAa;;IAOT,sBAAsB;QAJlC,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,uEAA0B;SAC3B,CAAC;yCAM4B,sDAAM,EAA0B,wEAAc,EAAiB,8DAAc,EAAkB,wDAAa;OAL7H,sBAAsB,CA+ClC;IAAD,6BAAC;CAAA;AA/CkC;;;;;;;;;;;;;ACVnC;AAAe,6GAA8C,k4RAAk4R,2GAA2G,sHAAsH,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA9mS;AACc;AACT;AACd;AACE;;IAsBzC,2BACU,MAAc,EACd,cAA8B,EAC9B,MAAqB,EACrB,WAAwB;QAHxB,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAe;QACrB,gBAAW,GAAX,WAAW,CAAa;QAhB3B,cAAS,GAAG,KAAK,CAAC;QAClB,aAAQ,GAAG,EAAE,CAAC;QACd,SAAI,GAAW,CAAC,CAAC;QACjB,SAAI,GAAW,EAAE,CAAC;QAClB,UAAK,GAAW,CAAC,CAAC;QAClB,eAAU,GAAQ,EAAE,CAAC;QACrB,eAAU,GAAQ;YACvB,MAAM,EAAE,WAAW;YACnB,QAAQ,EAAE,MAAM;SACjB,CAAC;IAQE,CAAC;IAEL,oCAAQ,GAAR;QACE,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,iCAAK,GAAL;QAAA,iBAqBC;QApBC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,MAAM,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,KAAG,IAAI,CAAC,UAAU,CAAC,MAAQ;YACjC,QAAQ,EAAE,KAAG,IAAI,CAAC,UAAU,CAAC,QAAU;YACvC,IAAI,EAAE,IAAI,CAAC,UAAU;SACtB,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;YACxC,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;YAC/B,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACnC,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC,CAAC,KAAK,CAAC;YACP,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAC7D,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACnC,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,kCAAM,GAAN,UAAO,KAAa,EAAE,IAAY;QAChC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,oCAAQ,GAAR,UAAS,KAAU;QACjB,IAAI,KAAK,CAAC,QAAQ,KAAK,EAAE,EAAE;YACzB,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;IACH,CAAC;IAED,kCAAM,GAAN,UAAO,MAAW,EAAE,KAAa;QAAjC,iBASC;QARC,IAAI,MAAM,CAAC,OAAO,CAAC,wCAAwC,CAAC,EAAE;YAC5D,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC;iBAC/B,IAAI,CAAC;gBACJ,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;gBAC9C,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,GAAG,IAAK,YAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,IAAI,yCAAyC,CAAC,EAAhF,CAAgF,CAAC,CAAC;SACrG;IACH,CAAC;;gBA9EM,sDAAM;gBAFN,wEAAc;gBAGd,wDAAa;gBAFb,4DAAW;;IAUP,iBAAiB;QAJ7B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,0EAA6B;SAC9B,CAAC;yCAgBkB,sDAAM;YACE,wEAAc;YACtB,wDAAa;YACR,4DAAW;OAlBvB,iBAAiB,CAsE7B;IAAD,wBAAC;CAAA;AAtE6B;;;;;;;;;;;;;;;;;;;;;;;;;;ACZW;AACc;AACqB;AACA;AACD;AAE3E,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,uFAAiB;QAC5B,IAAI,EAAE;YACJ,KAAK,EAAE,iBAAiB;YACxB,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE,iBAAiB,EAAE,CAAC;SACtD;KACF;IACD;QACE,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,wFAAsB;QACjC,IAAI,EAAE;YACJ,KAAK,EAAE,iBAAiB;YACxB,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE,iBAAiB,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,wBAAwB,EAAE,CAAC;SAC1G;KACF;IACD;QACE,IAAI,EAAE,YAAY;QAClB,SAAS,EAAE,wFAAsB;QACjC,IAAI,EAAE;YACJ,KAAK,EAAE,iBAAiB;YACxB,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE,iBAAiB,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,wBAAwB,EAAE,CAAC;SAC1G;KACF;CACF,CAAC;;;IAMkC,CAAC;IAAxB,oBAAoB;QAJhC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,oBAAoB,CAAI;IAAD,2BAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCU;AACG;AACT;;IAMnC,wBAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IAEjD,6BAAI,GAAJ,UAAK,MAAW;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;IACzE,CAAC;IAED,+BAAM,GAAN,UAAO,IAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;IACxE,CAAC;IAED,+BAAM,GAAN,UAAO,EAAE;QACP,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC,SAAS,EAAE,CAAC;IAChF,CAAC;IAED,gCAAO,GAAP,UAAQ,EAAE;QACR,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;IACvE,CAAC;IAED,+BAAM,GAAN,UAAO,EAAE,EAAE,IAAI;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;IACjF,CAAC;;gBA3BM,2DAAW;;IAKP,cAAc;QAD1B,gEAAU,EAAE;yCAGsB,2DAAW;OAFjC,cAAc,CAuB1B;IAAD,qBAAC;CAAA;AAvB0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNuB;AACc;AACvB;AACE;;IAyBzC,gCAAoB,MAAc,EAAU,cAA8B,EAAU,MAAqB;QAArF,WAAM,GAAN,MAAM,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAe;QAhBlG,gBAAW,GAAY,KAAK,CAAC;QAC7B,YAAO,GAAQ;YACpB,IAAI,EAAE,cAAc;YACpB,aAAa,EAAE,EAAE;YACjB,iBAAiB,EAAE,EAAE;YACrB,aAAa,EAAE,EAAE;YACjB,IAAI,EAAE,EAAE;YACR,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,EAAE;YACZ,aAAa,EAAE,EAAE;YACjB,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,EAAE;SAChB,CAAC;IAGF,CAAC;IAED,yCAAQ,GAAR;IACA,CAAC;IAED,uCAAM,GAAN,UAAO,GAAQ;QAAf,iBAgBC;QAfC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,IAAI,GAAG,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;SAChE;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,EAAE,EAAE;YACtE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;SAC9F;QAED,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;aACrC,IAAI,CAAC;YACJ,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;YAChD,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC3C,CAAC,EAAE,aAAG,IAAI,YAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,mDAAmD,CAAC,EAA/F,CAA+F,CAAC,CAAC;IAC/G,CAAC;;gBAhDM,sDAAM;gBADN,wEAAc;gBAEd,wDAAa;;IAOT,sBAAsB;QAJlC,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,uEAA0B;SAC3B,CAAC;yCAmB4B,sDAAM,EAA0B,wEAAc,EAAkB,wDAAa;OAlB9F,sBAAsB,CAyClC;IAAD,6BAAC;CAAA;AAzCkC;;;;;;;;;;;;;ACVnC;AAAe,oUAAqQ,qeAAqe,idAAid,4eAA4e,keAAke,ydAAyd,ydAAyd,ycAAyc,qdAAqd,ydAAyd,ieAAie,udAAud,8dAA8d,szCAAszC,yBAAyB,sYAAsY,qBAAqB,0HAA0H,qBAAqB,0HAA0H,gBAAgB,qHAAqH,mBAAmB,wHAAwH,YAAY,iHAAiH,iBAAiB,sHAAsH,eAAe,qHAAqH,qBAAqB,0HAA0H,gBAAgB,qHAAqH,mBAAmB,8IAA8I,+BAA+B,ulBAAulB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAp+S;AACM;AACF;AACU;AACL;AAC4B;AACrB;AAEmB;AACA;AACD;AAEf;;;IAsB/B,CAAC;IAAjB,aAAa;QApBzB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,+DAAgB;gBAChB,mBAAmB;gBACnB,qEAAoB;gBACpB,oEAAS;gBACT,yEAAkB,CAAC,OAAO,EAAE;gBAC5B,uEAAgB,CAAC,OAAO,EAAE;aAC3B;YACD,YAAY,EAAE;gBACZ,wFAAsB;gBACtB,wFAAsB;gBACtB,uFAAiB;aAClB;YACD,SAAS,EAAE;gBACT,yEAAc;aACf;SACF,CAAC;OACW,aAAa,CAAI;IAAD,oBAAC;CAAA;AAAJ","file":"payout-account-account-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ToastyService } from 'ng2-toasty';\r\nimport * as _ from 'lodash';\r\n\r\n@Component({\r\n  selector: 'account-update',\r\n  templateUrl: './form.html'\r\n})\r\nexport class AccountUpdateComponent implements OnInit {\r\n\r\n  public isSubmitted: boolean = false;\r\n  public account: any;\r\n\r\n  constructor(private router: Router, private accountService: AccountService, private route: ActivatedRoute, private toasty: ToastyService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    let id = this.route.snapshot.paramMap.get('id');\r\n\r\n    this.accountService.findOne(id).then(resp => {\r\n      this.account = resp.data;\r\n    });\r\n  }\r\n\r\n  submit(frm) {\r\n    this.isSubmitted = true;\r\n    if (frm.$invalid) {\r\n      this.toasty.error('Invalid form, please try again.');\r\n    }\r\n\r\n    if (this.account.type === 'paypal' && this.account.paypalAccount == '') {\r\n      return this.toasty.error('If you select type payout is paypal, please enter Paypal Account');\r\n    } else if (this.account.type === 'bank-account' && this.account.paypalAccount) {\r\n      this.account.paypalAccount = '';\r\n    }\r\n\r\n    let param = {\r\n      type: this.account.type,\r\n      paypalAccount: this.account.paypalAccount,\r\n      accountHolderName: this.account.accountHolderName,\r\n      accountNumber: this.account.accountNumber,\r\n      iban: this.account.iban,\r\n      bankName: this.account.bankName,\r\n      bankAddress: this.account.bankAddress,\r\n      sortCode: this.account.sortCode,\r\n      routingNumber: this.account.routingNumber,\r\n      swiftCode: this.account.swiftCode,\r\n      ifscCode: this.account.ifscCode,\r\n      routingCode: this.account.routingCode\r\n    }\r\n\r\n    this.accountService.update(this.account._id, param).then(resp => {\r\n      this.toasty.success('Updated successfully.');\r\n    })\r\n  }\r\n}\r\n","export default \"<div class=\\\"col-md-8\\\" style=\\\"padding: 0px;\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form (submit)=\\\"submit(frm)\\\" #frm=\\\"ngForm\\\" *ngIf=\\\"account\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-md-6\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>Type</label>\\r\\n              <select [(ngModel)]=\\\"account.type\\\" class=\\\"form-control\\\" name=\\\"accountType\\\" #accountType=\\\"ngModel\\\" required>\\r\\n                <option value=\\\"bank-account\\\">Bank Account</option>\\r\\n                <option value=\\\"paypal\\\">Paypal</option>\\r\\n              </select>\\r\\n              <div *ngIf=\\\"accountType.errors && (accountType.dirty || accountType.touched || isSubmitted)\\\">\\r\\n                <p [hidden]=\\\"!accountType.errors.required\\\" class=\\\"required-text\\\">\\r\\n                  Please select account type!\\r\\n                </p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col-md-12\\\" *ngIf=\\\"account.type === 'paypal'\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Paypal Account (*)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"paypalAccount\\\" #paypalAccount=\\\"ngModel\\\" class=\\\"form-control\\\" required\\r\\n                    placeholder=\\\"Enter paypal account\\\" [(ngModel)]=\\\"account.paypalAccount\\\" />\\r\\n                  <div *ngIf=\\\"paypalAccount.errors && (paypalAccount.dirty || paypalAccount.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!paypalAccount.errors.required\\\" class=\\\"required-text\\\">\\r\\n                      Please enter paypal account!\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col-md-12\\\" *ngIf=\\\"account.type === 'bank-account'\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Recipient's name (*)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"accountHolderName\\\" #accountHolderName=\\\"ngModel\\\" class=\\\"form-control\\\"\\r\\n                    placeholder=\\\"Enter recipient's name\\\" [(ngModel)]=\\\"account.accountHolderName\\\" required />\\r\\n                  <div *ngIf=\\\"accountHolderName.errors && (accountHolderName.dirty || accountHolderName.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!accountHolderName.errors.required\\\" class=\\\"required-text\\\">\\r\\n                      Please enter recipient's name!\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Account Number (*)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"accountNumber\\\" #accountNumber=\\\"ngModel\\\" class=\\\"form-control\\\" placeholder=\\\"Enter account number\\\"\\r\\n                    [(ngModel)]=\\\"account.accountNumber\\\" required />\\r\\n                  <div *ngIf=\\\"accountNumber.errors && (accountNumber.dirty || accountNumber.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!accountNumber.errors.required\\\" class=\\\"required-text\\\">\\r\\n                      Please enter account number!\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Bank Name (*)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"bankName\\\" #bankName=\\\"ngModel\\\" class=\\\"form-control\\\" placeholder=\\\"Enter bank name\\\"\\r\\n                    [(ngModel)]=\\\"account.bankName\\\" required />\\r\\n                  <div *ngIf=\\\"bankName.errors && (bankName.dirty || bankName.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!bankName.errors.required\\\" class=\\\"required-text\\\">\\r\\n                      Please enter bank name!\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Bank Address (*)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"bankAddress\\\" #bankAddress=\\\"ngModel\\\" class=\\\"form-control\\\" placeholder=\\\"Enter bank address\\\"\\r\\n                    [(ngModel)]=\\\"account.bankAddress\\\" required />\\r\\n                  <div *ngIf=\\\"bankAddress.errors && (bankAddress.dirty || bankAddress.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!bankAddress.errors.required\\\" class=\\\"required-text\\\">\\r\\n                      Please enter bank address!\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>International Bank Account Number</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"iban\\\" #iban=\\\"ngModel\\\" class=\\\"form-control\\\" placeholder=\\\"Enter number\\\"\\r\\n                    [(ngModel)]=\\\"account.iban\\\" />\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Worldwide Interbank Financial Telecommunication (8 or 11 characters)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"swiftCode\\\" #swiftCode=\\\"ngModel\\\" [minlength]=\\\"8\\\" [maxlength]=\\\"11\\\" class=\\\"form-control\\\"\\r\\n                    placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"account.swiftCode\\\" />\\r\\n                  <div *ngIf=\\\"routingNumber.errors && (routingNumber.dirty || routingNumber.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!routingNumber.errors.minlength\\\" class=\\\"error\\\" translate>\\r\\n                      SWIFT Code must be 8 or 11 characters\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>UK Bank Code (6 characters)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"sortCode\\\" #sortCode=\\\"ngModel\\\" [minlength]=\\\"6\\\" [maxlength]=\\\"6\\\" class=\\\"form-control\\\"\\r\\n                    placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"account.sortCode\\\" />\\r\\n                  <div *ngIf=\\\"sortCode.errors && (sortCode.dirty || sortCode.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!sortCode.errors.minlength\\\" class=\\\"error\\\" translate>\\r\\n                      UK Bank Code must be 6 characters\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>American Bankers Association Number (9 characters)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"routingNumber\\\" #routingNumber=\\\"ngModel\\\" [minlength]=\\\"9\\\" [maxlength]=\\\"9\\\" class=\\\"form-control\\\"\\r\\n                    placeholder=\\\"Enter number\\\" [(ngModel)]=\\\"account.routingNumber\\\" />\\r\\n                  <div *ngIf=\\\"routingNumber.errors && (routingNumber.dirty || routingNumber.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!routingNumber.errors.minlength\\\" class=\\\"error\\\" translate>\\r\\n                      American Bankers Association Number must be 9 characters\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Indian Financial System Code (11 characters)</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"ifscCode\\\" #ifscCode=\\\"ngModel\\\" [minlength]=\\\"11\\\" [maxlength]=\\\"11\\\" class=\\\"form-control\\\"\\r\\n                    placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"account.ifscCode\\\" />\\r\\n                  <div *ngIf=\\\"ifscCode.errors && (ifscCode.dirty || ifscCode.touched || isSubmitted)\\\">\\r\\n                    <p [hidden]=\\\"!ifscCode.errors.minlength\\\" class=\\\"error\\\" translate>\\r\\n                      Indian Financial System Code must be 11 characters\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label>Any other local Bank Code</label>\\r\\n                  <input type=\\\"text\\\" name=\\\"routingCode\\\" #routingCode=\\\"ngModel\\\" class=\\\"form-control\\\" placeholder=\\\"Enter code\\\"\\r\\n                    [(ngModel)]=\\\"account.routingCode\\\" />\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col-md-12\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <hr />\\r\\n              <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\">Submit</button>\\r\\n              &nbsp;\\r\\n              <a class=\\\"btn btn-danger\\\" [routerLink]=\\\"'/payout/account'\\\" translate>Cancel</a>&nbsp;\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { UtilService } from '../../../shared/services';\r\nimport { Router } from '@angular/router';\r\nimport { ToastyService } from 'ng2-toasty';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport * as _ from 'lodash';\r\n\r\n@Component({\r\n  selector: 'account-listing',\r\n  templateUrl: './listing.html'\r\n})\r\nexport class AccountsComponent implements OnInit {\r\n\r\n  public isLoading = false;\r\n  public accounts = [];\r\n  public page: Number = 1;\r\n  public take: Number = 10;\r\n  public total: Number = 0;\r\n  public searchType: any = '';\r\n  public sortOption: any = {\r\n    sortBy: 'createdAt',\r\n    sortType: 'desc'\r\n  };\r\n\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private accountService: AccountService,\r\n    private toasty: ToastyService,\r\n    private utilService: UtilService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.query();\r\n  }\r\n\r\n  query() {\r\n    this.utilService.setLoading(true);\r\n    this.isLoading = true;\r\n    let params = {\r\n      page: this.page,\r\n      take: this.take,\r\n      sort: `${this.sortOption.sortBy}`,\r\n      sortType: `${this.sortOption.sortType}`,\r\n      type: this.searchType,\r\n    };\r\n\r\n    this.accountService.find(params).then((res) => {\r\n      this.accounts = res.data.items;\r\n      this.total = res.data.count;\r\n      this.utilService.setLoading(false);\r\n      this.isLoading = false;\r\n    }).catch(() => {\r\n      this.toasty.error('Something went wrong, please try again!');\r\n      this.utilService.setLoading(false);\r\n      this.isLoading = false;\r\n    });\r\n  }\r\n\r\n  sortBy(field: string, type: string) {\r\n    this.sortOption.sortBy = field;\r\n    this.sortOption.sortType = type;\r\n    this.query();\r\n  }\r\n\r\n  keyPress(event: any) {\r\n    if (event.charCode === 13) {\r\n      this.query();\r\n    }\r\n  }\r\n\r\n  remove(itemId: any, index: number) {\r\n    if (window.confirm('Are you sure want to delete this item?')) {\r\n      this.accountService.remove(itemId)\r\n        .then(() => {\r\n          this.toasty.success('Item has been deleted!');\r\n          this.accounts.splice(index, 1);\r\n        })\r\n        .catch((err) => this.toasty.error(err.data.message || 'Something went wrong, please try again!'));\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AccountCreateComponent } from './components/form/create.component';\r\nimport { AccountUpdateComponent } from './components/form/update.component';\r\nimport { AccountsComponent } from './components/listing/listing.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AccountsComponent,\r\n    data: {\r\n      title: 'Account manager',\r\n      urls: [{ title: 'Accounts', url: '/payout/account' }]\r\n    }\r\n  },\r\n  {\r\n    path: 'create',\r\n    component: AccountCreateComponent,\r\n    data: {\r\n      title: 'Account manager',\r\n      urls: [{ title: 'Accounts', url: '/payout/account' }, { title: 'Create', url: '/payout/account/create' }]\r\n    }\r\n  },\r\n  {\r\n    path: 'update/:id',\r\n    component: AccountUpdateComponent,\r\n    data: {\r\n      title: 'Account manager',\r\n      urls: [{ title: 'Accounts', url: '/payout/account' }, { title: 'Update', url: '/payout/account/update' }]\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Restangular } from 'ngx-restangular';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable()\r\nexport class AccountService {\r\n\r\n  constructor(private restangular: Restangular) { }\r\n\r\n  find(params: any): Promise<any> {\r\n    return this.restangular.one('payout/accounts').get(params).toPromise();\r\n  }\r\n\r\n  create(data: any): Promise<any> {\r\n    return this.restangular.all('payout/accounts').post(data).toPromise();\r\n  }\r\n\r\n  remove(id): Promise<any> {\r\n    return this.restangular.one('payout/accounts', id).customDELETE().toPromise();\r\n  }\r\n\r\n  findOne(id): Promise<any> {\r\n    return this.restangular.one('payout/accounts', id).get().toPromise();\r\n  }\r\n\r\n  update(id, data): Promise<any> {\r\n    return this.restangular.one('payout/accounts', id).customPUT(data).toPromise();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastyService } from 'ng2-toasty';\r\nimport * as _ from 'lodash';\r\n\r\n@Component({\r\n  selector: 'account-create',\r\n  templateUrl: './form.html'\r\n})\r\nexport class AccountCreateComponent implements OnInit {\r\n\r\n  public isSubmitted: boolean = false;\r\n  public account: any = {\r\n    type: 'bank-account',\r\n    paypalAccount: '',\r\n    accountHolderName: '',\r\n    accountNumber: '',\r\n    iban: '',\r\n    bankName: '',\r\n    bankAddress: '',\r\n    sortCode: '',\r\n    routingNumber: '',\r\n    swiftCode: '',\r\n    ifscCode: '',\r\n    routingCode: ''\r\n  };\r\n\r\n  constructor(private router: Router, private accountService: AccountService, private toasty: ToastyService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  submit(frm: any) {\r\n    this.isSubmitted = true;\r\n    console.log(frm);\r\n    if (frm.invalid) {\r\n      return this.toasty.error('Form is invalid, please try again.');\r\n    }\r\n\r\n    if (this.account.type === 'paypal' && this.account.paypalAccount == '') {\r\n      return this.toasty.error('If you select type payout is paypal, please enter Paypal Account');\r\n    }\r\n\r\n    this.accountService.create(this.account)\r\n      .then(() => {\r\n        this.toasty.success('Account has been created');\r\n        this.router.navigate(['/accounts/list']);\r\n      }, err => this.toasty.error(err.data.data.message || 'Something went wrong, please check and try again!'));\r\n  }\r\n}\r\n","export default \"<div class=\\\"card\\\" *ngIf=\\\"!isLoading\\\">\\r\\n  <div class=\\\"card-body table-responsive\\\">\\r\\n    <table class=\\\"table\\\">\\r\\n      <thead>\\r\\n        <tr>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('accountHolderName', 'desc')\\\">Recipient's name&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='accountHolderName'\\\">\\r\\n              <a (click)=\\\"sortBy('accountHolderName', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('accountHolderName', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('type', 'desc')\\\">Type&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='type'\\\">\\r\\n              <a (click)=\\\"sortBy('type', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('type', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('paypalAccount', 'desc')\\\">Paypal Account&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='paypalAccount'\\\">\\r\\n              <a (click)=\\\"sortBy('paypalAccount', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('paypalAccount', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('accountNumber', 'desc')\\\">Account Number&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='accountNumber'\\\">\\r\\n              <a (click)=\\\"sortBy('accountNumber', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('accountNumber', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('bankName', 'desc')\\\">Bank Name&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='bankName'\\\">\\r\\n              <a (click)=\\\"sortBy('bankName', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('bankName', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('bankAddress', 'desc')\\\">Bank Address&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='bankAddress'\\\">\\r\\n              <a (click)=\\\"sortBy('bankAddress', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('bankAddress', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('iban', 'desc')\\\">IBA Number&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='iban'\\\">\\r\\n              <a (click)=\\\"sortBy('iban', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('iban', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('swiftCode', 'desc')\\\">Swift Code&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='swiftCode'\\\">\\r\\n              <a (click)=\\\"sortBy('swiftCode', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('swiftCode', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('sortCode', 'desc')\\\">UKB Code&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='sortCode'\\\">\\r\\n              <a (click)=\\\"sortBy('sortCode', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('sortCode', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('routingNumber', 'desc')\\\">ABA Number&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='routingNumber'\\\">\\r\\n              <a (click)=\\\"sortBy('routingNumber', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('routingNumber', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('ifscCode', 'desc')\\\">IFS Code&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='ifscCode'\\\">\\r\\n              <a (click)=\\\"sortBy('ifscCode', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('ifscCode', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('routingCode', 'desc')\\\">Other Code&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='routingCode'\\\">\\r\\n              <a (click)=\\\"sortBy('routingCode', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('routingCode', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>\\r\\n            <a (click)=\\\"sortBy('createdAt', 'desc')\\\">Created At&nbsp;</a>\\r\\n            <span *ngIf=\\\"sortOption.sortBy=='createdAt'\\\">\\r\\n              <a (click)=\\\"sortBy('createdAt', 'asc')\\\" *ngIf=\\\"sortOption.sortType=='desc'\\\"><i class=\\\"fa fa-caret-down\\\"></i></a>\\r\\n              <a (click)=\\\"sortBy('createdAt', 'desc')\\\" *ngIf=\\\"sortOption.sortType=='asc'\\\"><i class=\\\"fa fa-caret-up\\\"></i></a>\\r\\n            </span>\\r\\n          </th>\\r\\n          <th>Action</th>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <th></th>\\r\\n          <th>\\r\\n            <div class=\\\"input-group\\\">\\r\\n              <select [(ngModel)]=\\\"searchType\\\" class=\\\"form-control\\\" (change)=\\\"query()\\\">\\r\\n                <option value=\\\"\\\">All</option>\\r\\n                <option value=\\\"bank-account\\\">Bank Account</option>\\r\\n                <option value=\\\"paypal\\\">Paypal</option>\\r\\n              </select>\\r\\n            </div>\\r\\n          </th>\\r\\n          <th colspan=\\\"12\\\">\\r\\n          </th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr *ngIf=\\\"!total\\\">\\r\\n          <td colspan=\\\"14\\\">\\r\\n            <p class=\\\"text-center text-danger\\\">There is no items yet..</p>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr *ngFor=\\\"let item of accounts, let i = index\\\">\\r\\n          <td>\\r\\n            <a [routerLink]=\\\"['payout/accounts/update', item._id ]\\\">\\r\\n              {{item?.accountHolderName}}\\r\\n            </a>\\r\\n            <span *ngIf=\\\"!item.accountHolderName\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>\\r\\n            <span *ngIf=\\\"item.type === 'bank-account'\\\" class=\\\"badge badge-warning\\\">Bank account</span>\\r\\n            <span *ngIf=\\\"item.type === 'paypal'\\\" class=\\\"badge badge-danger\\\">Paypal</span>\\r\\n          </td>\\r\\n          <td>{{item?.paypalAccount}}\\r\\n            <span *ngIf=\\\"!item.paypalAccount\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.accountNumber}}\\r\\n            <span *ngIf=\\\"!item.accountNumber\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.bankName}}\\r\\n            <span *ngIf=\\\"!item.bankName\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.bankAddress}}\\r\\n            <span *ngIf=\\\"!item.bankAddress\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.iban}}\\r\\n            <span *ngIf=\\\"!item.iban\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.swiftCode}}\\r\\n            <span *ngIf=\\\"!item.swiftCode\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item.sortCode}}\\r\\n            <span *ngIf=\\\"!item.sortCode\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.routingNumber}}\\r\\n            <span *ngIf=\\\"!item.routingNumber\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.ifscCode}}\\r\\n            <span *ngIf=\\\"!item.ifscCode\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>{{item?.routingCode}}\\r\\n            <span *ngIf=\\\"!item.routingCode\\\" class=\\\"text-muted\\\">N/A</span>\\r\\n          </td>\\r\\n          <td>\\r\\n            <span>{{item.createdAt | date:'short'}}</span>\\r\\n          </td>\\r\\n          <td>\\r\\n            <a [routerLink]=\\\"['update', item._id ]\\\"><i class=\\\"fa fa-pencil\\\"></i></a>\\r\\n            <a (click)=\\\"remove(item?._id, i)\\\"><i class=\\\"fa fa-trash\\\"></i></a>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n    <div class=\\\"display-inline\\\" [hidden]=\\\"total < take\\\">\\r\\n      <div class=\\\"pull-right\\\">\\r\\n        <ngb-pagination [collectionSize]=\\\"total\\\" [(page)]=\\\"page\\\" [maxSize]=\\\"5\\\" [pageSize]=\\\"take\\\" (pageChange)=\\\"query()\\\"></ngb-pagination>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SortablejsModule } from 'ngx-sortablejs';\r\nimport { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';\r\nimport { AccountRoutingModule } from './account.routing';\r\n\r\nimport { AccountCreateComponent } from './components/form/create.component';\r\nimport { AccountUpdateComponent } from './components/form/update.component';\r\nimport { AccountsComponent } from './components/listing/listing.component';\r\n\r\nimport { AccountService } from './services/account.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    SortablejsModule,\r\n    //our custom module\r\n    AccountRoutingModule,\r\n    NgbModule,\r\n    FroalaEditorModule.forRoot(),\r\n    FroalaViewModule.forRoot()\r\n  ],\r\n  declarations: [\r\n    AccountCreateComponent,\r\n    AccountUpdateComponent,\r\n    AccountsComponent\r\n  ],\r\n  providers: [\r\n    AccountService\r\n  ]\r\n})\r\nexport class AccountModule { }\r\n"],"sourceRoot":"webpack:///"}