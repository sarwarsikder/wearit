{"ast":null,"code":"import _toConsumableArray from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { InjectionToken, Injectable, Optional, Inject, Injector, NgModule, SkipSelf } from '@angular/core';\nimport { HttpRequest, HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse, HttpBackend, HttpClientModule } from '@angular/common/http';\nimport { isArray, includes, isUndefined, isNull, defaults, each, extend, find, has, initial, last, clone, reduce, isBoolean, keys, isEmpty, forEach, isObject, isFunction, map as map$1, bind, union, values, pick, isNumber, omit, every, get } from 'lodash';\nimport { assign } from 'core-js/features/object';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { filter, map, catchError } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular.config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nvar RESTANGULAR = new InjectionToken('restangularWithConfig');\n/**\n * @param {?} __0\n * @return {?}\n */\n\nfunction RestangularFactory(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      callbackOrServices = _ref2[0],\n      callback = _ref2[1];\n\n  /** @type {?} */\n  var arrServices = [];\n  /** @type {?} */\n\n  var fn = callbackOrServices;\n\n  if (isArray(callbackOrServices)) {\n    arrServices = callbackOrServices;\n    fn = callback;\n  }\n\n  return {\n    fn: fn,\n    arrServices: arrServices\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular-helper.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar RestangularHelper = /*#__PURE__*/function () {\n  function RestangularHelper() {\n    _classCallCheck(this, RestangularHelper);\n  }\n\n  _createClass(RestangularHelper, null, [{\n    key: \"createRequest\",\n\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    value: function createRequest(options) {\n      /** @type {?} */\n      var requestQueryParams = RestangularHelper.createRequestQueryParams(options.params);\n      /** @type {?} */\n\n      var requestHeaders = RestangularHelper.createRequestHeaders(options.headers);\n      /** @type {?} */\n\n      var methodName = options.method.toUpperCase();\n      /** @type {?} */\n\n      var withCredentials = options.withCredentials || false;\n      /** @type {?} */\n\n      var request = new HttpRequest(methodName, options.url, options.data, {\n        headers: requestHeaders,\n        params: requestQueryParams,\n        responseType: options.responseType,\n        withCredentials: withCredentials\n      });\n\n      if (['GET', 'DELETE', 'HEAD', 'JSONP', 'OPTIONS'].indexOf(methodName) >= 0) {\n        request = new HttpRequest(methodName, options.url, {\n          headers: requestHeaders,\n          params: requestQueryParams,\n          responseType: options.responseType,\n          withCredentials: withCredentials\n        });\n      }\n\n      return request;\n    }\n    /**\n     * @param {?} queryParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"createRequestQueryParams\",\n    value: function createRequestQueryParams(queryParams) {\n      /** @type {?} */\n      var requestQueryParams = assign({}, queryParams);\n      /** @type {?} */\n\n      var search = new HttpParams();\n\n      var _loop = function _loop(key) {\n        /** @type {?} */\n        var value = requestQueryParams[key];\n\n        if (Array.isArray(value)) {\n          value.forEach(\n          /**\n          * @param {?} val\n          * @return {?}\n          */\n          function (val) {\n            search = search.append(key, val);\n          });\n        } else {\n          if (typeof value === 'object') {\n            value = JSON.stringify(value);\n          }\n\n          search = search.append(key, value);\n        }\n      };\n\n      for (var key in requestQueryParams) {\n        _loop(key);\n      }\n\n      return search;\n    }\n    /**\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"createRequestHeaders\",\n    value: function createRequestHeaders(headers) {\n      for (var key in headers) {\n        /** @type {?} */\n        var value = headers[key];\n\n        if (typeof value === 'undefined') {\n          delete headers[key];\n        }\n      }\n\n      return new HttpHeaders(assign({}, headers));\n    }\n  }]);\n\n  return RestangularHelper;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular-http.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar RestangularHttp = /*#__PURE__*/function () {\n  /**\n   * @param {?} http\n   */\n  function RestangularHttp(http) {\n    _classCallCheck(this, RestangularHttp);\n\n    this.http = http;\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _createClass(RestangularHttp, [{\n    key: \"createRequest\",\n    value: function createRequest(options) {\n      /** @type {?} */\n      var request = RestangularHelper.createRequest(options);\n      return this.request(request);\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(_request) {\n      var _this = this;\n\n      return this.http.handle(_request).pipe(filter(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        return event instanceof HttpResponse;\n      }), map(\n      /**\n      * @param {?} response\n      * @return {?}\n      */\n      function (response) {\n        if (!response.ok) {\n          return throwError(new HttpErrorResponse(response));\n        }\n\n        return response;\n      }), map(\n      /**\n      * @param {?} response\n      * @return {?}\n      */\n      function (response) {\n        response.config = {\n          params: _request\n        };\n        return response;\n      }), catchError(\n      /**\n      * @param {?} err\n      * @return {?}\n      */\n      function (err) {\n        err.request = _request;\n        err.data = err.error;\n\n        err.repeatRequest =\n        /**\n        * @param {?=} newRequest\n        * @return {?}\n        */\n        function (newRequest) {\n          return _this.request(newRequest || _request);\n        };\n\n        return throwError(err);\n      }));\n    }\n  }]);\n\n  return RestangularHttp;\n}();\n\nRestangularHttp.ɵfac = function RestangularHttp_Factory(t) {\n  return new (t || RestangularHttp)(ɵngcc0.ɵɵinject(ɵngcc1.HttpBackend));\n};\n\nRestangularHttp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RestangularHttp,\n  factory: RestangularHttp.ɵfac\n});\n/** @nocollapse */\n\nRestangularHttp.ctorParameters = function () {\n  return [{\n    type: HttpBackend\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RestangularHttp, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpBackend\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  RestangularHttp.prototype.http;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular-config.factory.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} object\n * @param {?} configuration\n * @return {?}\n */\n\n\nfunction RestangularConfigurer(object, configuration) {\n  object.configuration = configuration;\n  /**\n   * Those are HTTP safe methods for which there is no need to pass any data with the request.\n   * @type {?}\n   */\n\n  var safeMethods = ['get', 'head', 'options', 'trace', 'getlist'];\n\n  configuration.isSafe =\n  /**\n  * @param {?} operation\n  * @return {?}\n  */\n  function (operation) {\n    return includes(safeMethods, operation.toLowerCase());\n  };\n  /** @type {?} */\n\n\n  var absolutePattern = /^https?:\\/\\//i;\n\n  configuration.isAbsoluteUrl =\n  /**\n  * @param {?} string\n  * @return {?}\n  */\n  function (string) {\n    return isUndefined(configuration.absoluteUrl) || isNull(configuration.absoluteUrl) ? string && absolutePattern.test(string) : configuration.absoluteUrl;\n  };\n\n  configuration.absoluteUrl = isUndefined(configuration.absoluteUrl) ? true : configuration.absoluteUrl;\n\n  object.setSelfLinkAbsoluteUrl =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    configuration.absoluteUrl = value;\n  };\n  /**\n   * This is the BaseURL to be used with Restangular\n   */\n\n\n  configuration.baseUrl = isUndefined(configuration.baseUrl) ? '' : configuration.baseUrl;\n\n  object.setBaseUrl =\n  /**\n  * @param {?} newBaseUrl\n  * @return {?}\n  */\n  function (newBaseUrl) {\n    configuration.baseUrl = /\\/$/.test(newBaseUrl) ? newBaseUrl.substring(0, newBaseUrl.length - 1) : newBaseUrl;\n    return this;\n  };\n  /**\n   * Sets the extra fields to keep from the parents\n   */\n\n\n  configuration.extraFields = configuration.extraFields || [];\n\n  object.setExtraFields =\n  /**\n  * @param {?} newExtraFields\n  * @return {?}\n  */\n  function (newExtraFields) {\n    configuration.extraFields = newExtraFields;\n    return this;\n  };\n  /**\n   * Some default $http parameter to be used in EVERY call\n   **/\n\n\n  configuration.defaultHttpFields = configuration.defaultHttpFields || {};\n\n  object.setDefaultHttpFields =\n  /**\n  * @param {?} values\n  * @return {?}\n  */\n  function (values) {\n    configuration.defaultHttpFields = values;\n    return this;\n  };\n  /**\n   * Always return plain data, no restangularized object\n   **/\n\n\n  configuration.plainByDefault = configuration.plainByDefault || false;\n\n  object.setPlainByDefault =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    configuration.plainByDefault = value === true ? true : false;\n    return this;\n  };\n\n  configuration.withHttpValues =\n  /**\n  * @param {?} httpLocalConfig\n  * @param {?} obj\n  * @return {?}\n  */\n  function (httpLocalConfig, obj) {\n    return defaults(obj, httpLocalConfig, configuration.defaultHttpFields);\n  };\n\n  configuration.encodeIds = isUndefined(configuration.encodeIds) ? true : configuration.encodeIds;\n\n  object.setEncodeIds =\n  /**\n  * @param {?} encode\n  * @return {?}\n  */\n  function (encode) {\n    configuration.encodeIds = encode;\n  };\n\n  configuration.defaultRequestParams = configuration.defaultRequestParams || {\n    get: {},\n    post: {},\n    put: {},\n    remove: {},\n    common: {}\n  };\n\n  object.setDefaultRequestParams =\n  /**\n  * @param {?} param1\n  * @param {?} param2\n  * @return {?}\n  */\n  function (param1, param2) {\n    /** @type {?} */\n    var methods = [];\n    /** @type {?} */\n\n    var params = param2 || param1;\n\n    if (!isUndefined(param2)) {\n      if (isArray(param1)) {\n        methods = param1;\n      } else {\n        methods.push(param1);\n      }\n    } else {\n      methods.push('common');\n    }\n\n    each(methods,\n    /**\n    * @param {?} method\n    * @return {?}\n    */\n    function (method) {\n      configuration.defaultRequestParams[method] = params;\n    });\n    return this;\n  };\n\n  object.requestParams = configuration.defaultRequestParams;\n  configuration.defaultHeaders = configuration.defaultHeaders || {};\n\n  object.setDefaultHeaders =\n  /**\n  * @param {?} headers\n  * @return {?}\n  */\n  function (headers) {\n    configuration.defaultHeaders = headers;\n    object.defaultHeaders = configuration.defaultHeaders;\n    return this;\n  };\n\n  object.defaultHeaders = configuration.defaultHeaders;\n  /**\n   * Method overriders response Method\n   **/\n\n  configuration.defaultResponseMethod = configuration.defaultResponseMethod || 'promise';\n\n  object.setDefaultResponseMethod =\n  /**\n  * @param {?} method\n  * @return {?}\n  */\n  function (method) {\n    configuration.defaultResponseMethod = method;\n    object.defaultResponseMethod = configuration.defaultResponseMethod;\n    return this;\n  };\n\n  object.defaultResponseMethod = configuration.defaultResponseMethod;\n  /**\n   * Method overriders will set which methods are sent via POST with an X-HTTP-Method-Override\n   **/\n\n  configuration.methodOverriders = configuration.methodOverriders || [];\n\n  object.setMethodOverriders =\n  /**\n  * @param {?} values\n  * @return {?}\n  */\n  function (values) {\n    /** @type {?} */\n    var overriders = extend([], values);\n\n    if (configuration.isOverridenMethod('delete', overriders)) {\n      overriders.push('remove');\n    }\n\n    configuration.methodOverriders = overriders;\n    return this;\n  };\n\n  configuration.jsonp = isUndefined(configuration.jsonp) ? false : configuration.jsonp;\n\n  object.setJsonp =\n  /**\n  * @param {?} active\n  * @return {?}\n  */\n  function (active) {\n    configuration.jsonp = active;\n  };\n\n  configuration.isOverridenMethod =\n  /**\n  * @param {?} method\n  * @param {?} values\n  * @return {?}\n  */\n  function (method, values) {\n    /** @type {?} */\n    var search = values || configuration.methodOverriders;\n    return !isUndefined(find(search,\n    /**\n    * @param {?} one\n    * @return {?}\n    */\n    function (one) {\n      return one.toLowerCase() === method.toLowerCase();\n    }));\n  };\n  /**\n   * Sets the URL creator type. For now, only Path is created. In the future we'll have queryParams\n   **/\n\n\n  configuration.urlCreator = configuration.urlCreator || 'path';\n\n  object.setUrlCreator =\n  /**\n  * @param {?} name\n  * @return {?}\n  */\n  function (name) {\n    if (!has(configuration.urlCreatorFactory, name)) {\n      throw new Error('URL Path selected isn\\'t valid');\n    }\n\n    configuration.urlCreator = name;\n    return this;\n  };\n  /**\n   * You can set the restangular fields here. The 3 required fields for Restangular are:\n   *\n   * id: Id of the element\n   * route: name of the route of this element\n   * parentResource: the reference to the parent resource\n   *\n   *  All of this fields except for id, are handled (and created) by Restangular. By default,\n   *  the field values will be id, route and parentResource respectively\n   */\n\n\n  configuration.restangularFields = configuration.restangularFields || {\n    id: 'id',\n    route: 'route',\n    parentResource: 'parentResource',\n    restangularCollection: 'restangularCollection',\n    cannonicalId: '__cannonicalId',\n    etag: 'restangularEtag',\n    selfLink: 'href',\n    get: 'get',\n    getList: 'getList',\n    put: 'put',\n    post: 'post',\n    remove: 'remove',\n    head: 'head',\n    trace: 'trace',\n    options: 'options',\n    patch: 'patch',\n    getRestangularUrl: 'getRestangularUrl',\n    getRequestedUrl: 'getRequestedUrl',\n    putElement: 'putElement',\n    addRestangularMethod: 'addRestangularMethod',\n    getParentList: 'getParentList',\n    clone: 'clone',\n    ids: 'ids',\n    httpConfig: '_$httpConfig',\n    reqParams: 'reqParams',\n    one: 'one',\n    all: 'all',\n    several: 'several',\n    oneUrl: 'oneUrl',\n    allUrl: 'allUrl',\n    customPUT: 'customPUT',\n    customPATCH: 'customPATCH',\n    customPOST: 'customPOST',\n    customDELETE: 'customDELETE',\n    customGET: 'customGET',\n    customGETLIST: 'customGETLIST',\n    customOperation: 'customOperation',\n    doPUT: 'doPUT',\n    doPATCH: 'doPATCH',\n    doPOST: 'doPOST',\n    doDELETE: 'doDELETE',\n    doGET: 'doGET',\n    doGETLIST: 'doGETLIST',\n    fromServer: 'fromServer',\n    withConfig: 'withConfig',\n    withHttpConfig: 'withHttpConfig',\n    singleOne: 'singleOne',\n    plain: 'plain',\n    save: 'save',\n    restangularized: 'restangularized'\n  };\n\n  object.setRestangularFields =\n  /**\n  * @param {?} resFields\n  * @return {?}\n  */\n  function (resFields) {\n    configuration.restangularFields = extend({}, configuration.restangularFields, resFields);\n    return this;\n  };\n\n  configuration.isRestangularized =\n  /**\n  * @param {?} obj\n  * @return {?}\n  */\n  function (obj) {\n    return !!obj[configuration.restangularFields.restangularized];\n  };\n\n  configuration.setFieldToElem =\n  /**\n  * @param {?} field\n  * @param {?} elem\n  * @param {?} value\n  * @return {?}\n  */\n  function (field, elem, value) {\n    /** @type {?} */\n    var properties = field.split('.');\n    /** @type {?} */\n\n    var idValue = elem;\n    each(initial(properties),\n    /**\n    * @param {?} prop\n    * @return {?}\n    */\n    function (prop) {\n      idValue[prop] = {};\n      idValue = idValue[prop];\n    });\n    /** @type {?} */\n\n    var index = last(properties);\n    idValue[index] = value;\n    return this;\n  };\n\n  configuration.getFieldFromElem =\n  /**\n  * @param {?} field\n  * @param {?} elem\n  * @return {?}\n  */\n  function (field, elem) {\n    /** @type {?} */\n    var properties = field.split('.');\n    /** @type {?} */\n\n    var idValue = elem;\n    each(properties,\n    /**\n    * @param {?} prop\n    * @return {?}\n    */\n    function (prop) {\n      if (idValue) {\n        idValue = idValue[prop];\n      }\n    });\n    return clone(idValue);\n  };\n\n  configuration.setIdToElem =\n  /**\n  * @param {?} elem\n  * @param {?} id\n  * @return {?}\n  */\n  function (elem, id\n  /*, route */\n  ) {\n    configuration.setFieldToElem(configuration.restangularFields.id, elem, id);\n    return this;\n  };\n\n  configuration.getIdFromElem =\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return configuration.getFieldFromElem(configuration.restangularFields.id, elem);\n  };\n\n  configuration.isValidId =\n  /**\n  * @param {?} elemId\n  * @return {?}\n  */\n  function (elemId) {\n    return '' !== elemId && !isUndefined(elemId) && !isNull(elemId);\n  };\n\n  configuration.setUrlToElem =\n  /**\n  * @param {?} elem\n  * @param {?} url\n  * @return {?}\n  */\n  function (elem, url\n  /*, route */\n  ) {\n    configuration.setFieldToElem(configuration.restangularFields.selfLink, elem, url);\n    return this;\n  };\n\n  configuration.getUrlFromElem =\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return configuration.getFieldFromElem(configuration.restangularFields.selfLink, elem);\n  };\n\n  configuration.useCannonicalId = isUndefined(configuration.useCannonicalId) ? false : configuration.useCannonicalId;\n\n  object.setUseCannonicalId =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    configuration.useCannonicalId = value;\n    return this;\n  };\n\n  configuration.getCannonicalIdFromElem =\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    /** @type {?} */\n    var cannonicalId = elem[configuration.restangularFields.cannonicalId];\n    /** @type {?} */\n\n    var actualId = configuration.isValidId(cannonicalId) ? cannonicalId : configuration.getIdFromElem(elem);\n    return actualId;\n  };\n  /**\n   * Sets the Response parser. This is used in case your response isn't directly the data.\n   * For example if you have a response like {meta: {'meta'}, data: {name: 'Gonto'}}\n   * you can extract this data which is the one that needs wrapping\n   *\n   * The ResponseExtractor is a function that receives the response and the method executed.\n   */\n\n\n  configuration.responseInterceptors = configuration.responseInterceptors ? _toConsumableArray(configuration.responseInterceptors) : [];\n\n  configuration.defaultResponseInterceptor =\n  /**\n  * @param {?} data\n  * @return {?}\n  */\n  function (data\n  /*, operation, what, url, response, subject */\n  ) {\n    return data || {};\n  };\n\n  configuration.responseExtractor =\n  /**\n  * @param {?} data\n  * @param {?} operation\n  * @param {?} what\n  * @param {?} url\n  * @param {?} response\n  * @param {?} subject\n  * @return {?}\n  */\n  function (data, operation, what, url, response, subject) {\n    /** @type {?} */\n    var interceptors = clone(configuration.responseInterceptors);\n    interceptors.push(configuration.defaultResponseInterceptor);\n    /** @type {?} */\n\n    var theData = data;\n    each(interceptors,\n    /**\n    * @param {?} interceptor\n    * @return {?}\n    */\n    function (interceptor) {\n      theData = interceptor(theData, operation, what, url, response, subject);\n    });\n    return theData;\n  };\n\n  object.addResponseInterceptor =\n  /**\n  * @param {?} extractor\n  * @return {?}\n  */\n  function (extractor) {\n    configuration.responseInterceptors.push(extractor);\n    return this;\n  };\n\n  configuration.errorInterceptors = configuration.errorInterceptors ? _toConsumableArray(configuration.errorInterceptors) : [];\n\n  object.addErrorInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.errorInterceptors = [interceptor].concat(_toConsumableArray(configuration.errorInterceptors));\n    return this;\n  };\n\n  object.setResponseInterceptor = object.addResponseInterceptor;\n  object.setResponseExtractor = object.addResponseInterceptor;\n  object.setErrorInterceptor = object.addErrorInterceptor;\n  /**\n   * Response interceptor is called just before resolving promises.\n   */\n\n  /**\n   * Request interceptor is called before sending an object to the server.\n   */\n\n  configuration.requestInterceptors = configuration.requestInterceptors ? _toConsumableArray(configuration.requestInterceptors) : [];\n\n  configuration.defaultInterceptor =\n  /**\n  * @param {?} element\n  * @param {?} operation\n  * @param {?} path\n  * @param {?} url\n  * @param {?} headers\n  * @param {?} params\n  * @param {?} httpConfig\n  * @return {?}\n  */\n  function (element, operation, path, url, headers, params, httpConfig) {\n    return {\n      element: element,\n      headers: headers,\n      params: params,\n      httpConfig: httpConfig\n    };\n  };\n\n  configuration.fullRequestInterceptor =\n  /**\n  * @param {?} element\n  * @param {?} operation\n  * @param {?} path\n  * @param {?} url\n  * @param {?} headers\n  * @param {?} params\n  * @param {?} httpConfig\n  * @return {?}\n  */\n  function (element, operation, path, url, headers, params, httpConfig) {\n    /** @type {?} */\n    var interceptors = clone(configuration.requestInterceptors);\n    /** @type {?} */\n\n    var defaultRequest = configuration.defaultInterceptor(element, operation, path, url, headers, params, httpConfig);\n    return reduce(interceptors,\n    /**\n    * @param {?} request\n    * @param {?} interceptor\n    * @return {?}\n    */\n    function (request, interceptor) {\n      /** @type {?} */\n      var returnInterceptor = interceptor(request.element, operation, path, url, request.headers, request.params, request.httpConfig);\n      return extend(request, returnInterceptor);\n    }, defaultRequest);\n  };\n\n  object.addRequestInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.requestInterceptors.push(\n    /**\n    * @param {?} elem\n    * @param {?} operation\n    * @param {?} path\n    * @param {?} url\n    * @param {?} headers\n    * @param {?} params\n    * @param {?} httpConfig\n    * @return {?}\n    */\n    function (elem, operation, path, url, headers, params, httpConfig) {\n      return {\n        headers: headers,\n        params: params,\n        element: interceptor(elem, operation, path, url),\n        httpConfig: httpConfig\n      };\n    });\n    return this;\n  };\n\n  object.setRequestInterceptor = object.addRequestInterceptor;\n\n  object.addFullRequestInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.requestInterceptors.push(interceptor);\n    return this;\n  };\n\n  object.setFullRequestInterceptor = object.addFullRequestInterceptor;\n\n  configuration.onBeforeElemRestangularized = configuration.onBeforeElemRestangularized ||\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return elem;\n  };\n\n  object.setOnBeforeElemRestangularized =\n  /**\n  * @param {?} post\n  * @return {?}\n  */\n  function (post) {\n    configuration.onBeforeElemRestangularized = post;\n    return this;\n  };\n\n  object.setRestangularizePromiseInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.restangularizePromiseInterceptor = interceptor;\n    return this;\n  };\n  /**\n   * This method is called after an element has been \"Restangularized\".\n   *\n   * It receives the element, a boolean indicating if it's an element or a collection\n   * and the name of the model\n   *\n   */\n\n\n  configuration.onElemRestangularized = configuration.onElemRestangularized ||\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return elem;\n  };\n\n  object.setOnElemRestangularized =\n  /**\n  * @param {?} post\n  * @return {?}\n  */\n  function (post) {\n    configuration.onElemRestangularized = post;\n    return this;\n  };\n\n  configuration.shouldSaveParent = configuration.shouldSaveParent ||\n  /**\n  * @return {?}\n  */\n  function () {\n    return true;\n  };\n\n  object.setParentless =\n  /**\n  * @param {?} values\n  * @return {?}\n  */\n  function (values) {\n    if (isArray(values)) {\n      configuration.shouldSaveParent =\n      /**\n      * @param {?} route\n      * @return {?}\n      */\n      function (route) {\n        return !includes(values, route);\n      };\n    } else if (isBoolean(values)) {\n      configuration.shouldSaveParent =\n      /**\n      * @return {?}\n      */\n      function () {\n        return !values;\n      };\n    }\n\n    return this;\n  };\n  /**\n   * This lets you set a suffix to every request.\n   *\n   * For example, if your api requires that for JSon requests you do /users/123.json, you can set that\n   * in here.\n   *\n   *\n   * By default, the suffix is null\n   */\n\n\n  configuration.suffix = isUndefined(configuration.suffix) ? null : configuration.suffix;\n\n  object.setRequestSuffix =\n  /**\n  * @param {?} newSuffix\n  * @return {?}\n  */\n  function (newSuffix) {\n    configuration.suffix = newSuffix;\n    return this;\n  };\n  /**\n   * Add element transformers for certain routes.\n   */\n\n\n  configuration.transformers = configuration.transformers || {};\n\n  object.addElementTransformer =\n  /**\n  * @param {?} type\n  * @param {?} secondArg\n  * @param {?} thirdArg\n  * @return {?}\n  */\n  function (type, secondArg, thirdArg) {\n    /** @type {?} */\n    var isCollection = null;\n    /** @type {?} */\n\n    var transformer = null;\n\n    if (arguments.length === 2) {\n      transformer = secondArg;\n    } else {\n      transformer = thirdArg;\n      isCollection = secondArg;\n    }\n    /** @type {?} */\n\n\n    var typeTransformers = configuration.transformers[type];\n\n    if (!typeTransformers) {\n      typeTransformers = configuration.transformers[type] = [];\n    }\n\n    typeTransformers.push(\n    /**\n    * @param {?} coll\n    * @param {?} elem\n    * @return {?}\n    */\n    function (coll, elem) {\n      if (isNull(isCollection) || coll === isCollection) {\n        return transformer(elem);\n      }\n\n      return elem;\n    });\n    return object;\n  };\n\n  object.extendCollection =\n  /**\n  * @param {?} route\n  * @param {?} fn\n  * @return {?}\n  */\n  function (route, fn) {\n    return object.addElementTransformer(route, true, fn);\n  };\n\n  object.extendModel =\n  /**\n  * @param {?} route\n  * @param {?} fn\n  * @return {?}\n  */\n  function (route, fn) {\n    return object.addElementTransformer(route, false, fn);\n  };\n\n  configuration.transformElem =\n  /**\n  * @param {?} elem\n  * @param {?} isCollection\n  * @param {?} route\n  * @param {?} Restangular\n  * @param {?} force\n  * @return {?}\n  */\n  function (elem, isCollection, route, Restangular, force) {\n    if (!force && !configuration.transformLocalElements && !elem[configuration.restangularFields.fromServer]) {\n      return elem;\n    }\n    /** @type {?} */\n\n\n    var typeTransformers = configuration.transformers[route];\n    /** @type {?} */\n\n    var changedElem = elem;\n\n    if (typeTransformers) {\n      each(typeTransformers,\n      /**\n      * @param {?} transformer\n      * @return {?}\n      */\n      function (transformer) {\n        changedElem = transformer(isCollection, changedElem);\n      });\n    }\n\n    return configuration.onElemRestangularized(changedElem, isCollection, route, Restangular);\n  };\n\n  configuration.transformLocalElements = isUndefined(configuration.transformLocalElements) ? false : configuration.transformLocalElements;\n\n  object.setTransformOnlyServerElements =\n  /**\n  * @param {?} active\n  * @return {?}\n  */\n  function (active) {\n    configuration.transformLocalElements = !active;\n  };\n\n  configuration.fullResponse = isUndefined(configuration.fullResponse) ? false : configuration.fullResponse;\n\n  object.setFullResponse =\n  /**\n  * @param {?} full\n  * @return {?}\n  */\n  function (full) {\n    configuration.fullResponse = full;\n    return this;\n  }; // Internal values and functions\n\n\n  configuration.urlCreatorFactory = {};\n  /**\n   * Base URL Creator. Base prototype for everything related to it\n   *\n   * @type {?}\n   */\n\n  var BaseCreator =\n  /**\n  * @return {?}\n  */\n  function BaseCreator() {};\n\n  BaseCreator.prototype.setConfig =\n  /**\n  * @param {?} config\n  * @return {?}\n  */\n  function (config) {\n    this.config = config;\n    return this;\n  };\n\n  BaseCreator.prototype.parentsArray =\n  /**\n  * @param {?} current\n  * @return {?}\n  */\n  function (current) {\n    /** @type {?} */\n    var parents = [];\n\n    while (current) {\n      parents.push(current);\n      current = current[this.config.restangularFields.parentResource];\n    }\n\n    return parents.reverse();\n  };\n  /**\n   * @param {?} config\n   * @param {?} $http\n   * @param {?} url\n   * @param {?} configurer\n   * @return {?}\n   */\n\n\n  function RestangularResource(config, $http, url, configurer) {\n    /** @type {?} */\n    var resource = {};\n    each(keys(configurer),\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    function (key) {\n      /** @type {?} */\n      var value = configurer[key]; // Add default parameters\n\n      value.params = extend({}, value.params, config.defaultRequestParams[value.method.toLowerCase()]); // We don't want the ? if no params are there\n\n      if (isEmpty(value.params)) {\n        delete value.params;\n      }\n\n      if (config.isSafe(value.method)) {\n        resource[key] =\n        /**\n        * @return {?}\n        */\n        function () {\n          /** @type {?} */\n          var resultConfig = extend(value, {\n            url: url\n          });\n          return $http.createRequest(resultConfig);\n        };\n      } else {\n        resource[key] =\n        /**\n        * @param {?} data\n        * @return {?}\n        */\n        function (data) {\n          /** @type {?} */\n          var resultConfig = extend(value, {\n            url: url,\n            data: data\n          });\n          return $http.createRequest(resultConfig);\n        };\n      }\n    });\n    return resource;\n  }\n\n  BaseCreator.prototype.resource =\n  /**\n  * @param {?} current\n  * @param {?} $http\n  * @param {?} localHttpConfig\n  * @param {?} callHeaders\n  * @param {?} callParams\n  * @param {?} what\n  * @param {?} etag\n  * @param {?} operation\n  * @return {?}\n  */\n  function (current, $http, localHttpConfig, callHeaders, callParams, what, etag, operation) {\n    /** @type {?} */\n    var params = defaults(callParams || {}, this.config.defaultRequestParams.common);\n    /** @type {?} */\n\n    var headers = defaults(callHeaders || {}, this.config.defaultHeaders);\n\n    if (etag) {\n      if (!configuration.isSafe(operation)) {\n        headers['If-Match'] = etag;\n      } else {\n        headers['If-None-Match'] = etag;\n      }\n    }\n    /** @type {?} */\n\n\n    var url = this.base(current);\n\n    if (what) {\n      /** @type {?} */\n      var add = '';\n\n      if (!/\\/$/.test(url)) {\n        add += '/';\n      }\n\n      add += what;\n      url += add;\n    }\n\n    if (this.config.suffix && url.indexOf(this.config.suffix, url.length - this.config.suffix.length) === -1 && !this.config.getUrlFromElem(current)) {\n      url += this.config.suffix;\n    }\n\n    current[this.config.restangularFields.httpConfig] = undefined;\n    return RestangularResource(this.config, $http, url, {\n      getList: this.config.withHttpValues(localHttpConfig, {\n        method: 'GET',\n        params: params,\n        headers: headers\n      }),\n      get: this.config.withHttpValues(localHttpConfig, {\n        method: 'GET',\n        params: params,\n        headers: headers\n      }),\n      jsonp: this.config.withHttpValues(localHttpConfig, {\n        method: 'jsonp',\n        params: params,\n        headers: headers\n      }),\n      put: this.config.withHttpValues(localHttpConfig, {\n        method: 'PUT',\n        params: params,\n        headers: headers\n      }),\n      post: this.config.withHttpValues(localHttpConfig, {\n        method: 'POST',\n        params: params,\n        headers: headers\n      }),\n      remove: this.config.withHttpValues(localHttpConfig, {\n        method: 'DELETE',\n        params: params,\n        headers: headers\n      }),\n      head: this.config.withHttpValues(localHttpConfig, {\n        method: 'HEAD',\n        params: params,\n        headers: headers\n      }),\n      trace: this.config.withHttpValues(localHttpConfig, {\n        method: 'TRACE',\n        params: params,\n        headers: headers\n      }),\n      options: this.config.withHttpValues(localHttpConfig, {\n        method: 'OPTIONS',\n        params: params,\n        headers: headers\n      }),\n      patch: this.config.withHttpValues(localHttpConfig, {\n        method: 'PATCH',\n        params: params,\n        headers: headers\n      })\n    });\n  };\n  /**\n   * This is the Path URL creator. It uses Path to show Hierarchy in the Rest API.\n   * This means that if you have an Account that then has a set of Buildings, a URL to a building\n   * would be /accounts/123/buildings/456\n   *\n   * @type {?}\n   */\n\n\n  var Path =\n  /**\n  * @return {?}\n  */\n  function Path() {};\n\n  Path.prototype = new BaseCreator();\n\n  Path.prototype.normalizeUrl =\n  /**\n  * @param {?} url\n  * @return {?}\n  */\n  function (url) {\n    /** @type {?} */\n    var parts = /((?:http[s]?:)?\\/\\/)?(.*)?/.exec(url);\n    parts[2] = parts[2].replace(/[\\\\\\/]+/g, '/');\n    return typeof parts[1] !== 'undefined' ? parts[1] + parts[2] : parts[2];\n  };\n\n  Path.prototype.base =\n  /**\n  * @param {?} current\n  * @return {?}\n  */\n  function (current) {\n    /** @type {?} */\n    var __this = this;\n\n    return reduce(this.parentsArray(current),\n    /**\n    * @param {?} acum\n    * @param {?} elem\n    * @return {?}\n    */\n    function (acum, elem) {\n      /** @type {?} */\n      var elemUrl;\n      /** @type {?} */\n\n      var elemSelfLink = __this.config.getUrlFromElem(elem);\n\n      if (elemSelfLink) {\n        if (__this.config.isAbsoluteUrl(elemSelfLink)) {\n          return elemSelfLink;\n        } else {\n          elemUrl = elemSelfLink;\n        }\n      } else {\n        elemUrl = elem[__this.config.restangularFields.route];\n\n        if (elem[__this.config.restangularFields.restangularCollection]) {\n          /** @type {?} */\n          var ids = elem[__this.config.restangularFields.ids];\n\n          if (ids) {\n            elemUrl += '/' + ids.join(',');\n          }\n        } else {\n          /** @type {?} */\n          var elemId;\n\n          if (__this.config.useCannonicalId) {\n            elemId = __this.config.getCannonicalIdFromElem(elem);\n          } else {\n            elemId = __this.config.getIdFromElem(elem);\n          }\n\n          if (configuration.isValidId(elemId) && !elem.singleOne) {\n            elemUrl += '/' + (__this.config.encodeIds ? encodeURIComponent(elemId) : elemId);\n          }\n        }\n      }\n\n      acum = acum.replace(/\\/$/, '') + '/' + elemUrl;\n      return __this.normalizeUrl(acum);\n    }, this.config.baseUrl);\n  };\n\n  Path.prototype.fetchUrl =\n  /**\n  * @param {?} current\n  * @param {?} what\n  * @return {?}\n  */\n  function (current, what) {\n    /** @type {?} */\n    var baseUrl = this.base(current);\n\n    if (what) {\n      baseUrl += '/' + what;\n    }\n\n    return baseUrl;\n  };\n\n  Path.prototype.fetchRequestedUrl =\n  /**\n  * @param {?} current\n  * @param {?} what\n  * @return {?}\n  */\n  function (current, what) {\n    /** @type {?} */\n    var url = this.fetchUrl(current, what);\n    /** @type {?} */\n\n    var params = current[configuration.restangularFields.reqParams]; // From here on and until the end of fetchRequestedUrl,\n    // the code has been kindly borrowed from angular.js\n    // The reason for such code bloating is coherence:\n    //   If the user were to use this for cache management, the\n    //   serialization of parameters would need to be identical\n    //   to the one done by angular for cache keys to match.\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n\n    function sortedKeys(obj) {\n      /** @type {?} */\n      var resultKeys = [];\n\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          resultKeys.push(key);\n        }\n      }\n\n      return resultKeys.sort();\n    }\n    /**\n     * @param {?} obj\n     * @param {?=} iterator\n     * @param {?=} context\n     * @return {?}\n     */\n\n\n    function forEachSorted(obj, iterator, context) {\n      /** @type {?} */\n      var sortedKeysArray = sortedKeys(obj);\n\n      for (var i = 0; i < sortedKeysArray.length; i++) {\n        iterator.call(context, obj[sortedKeysArray[i]], sortedKeysArray[i]);\n      }\n\n      return sortedKeysArray;\n    }\n    /**\n     * @param {?} val\n     * @param {?=} pctEncodeSpaces\n     * @return {?}\n     */\n\n\n    function encodeUriQuery(val, pctEncodeSpaces) {\n      return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');\n    }\n\n    if (!params) {\n      return url + (this.config.suffix || '');\n    }\n    /** @type {?} */\n\n\n    var parts = [];\n    forEachSorted(params,\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    function (value, key) {\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      if (!isArray(value)) {\n        value = [value];\n      }\n\n      forEach(value,\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {\n        if (isObject(v)) {\n          v = JSON.stringify(v);\n        }\n\n        parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));\n      });\n    });\n    return url + (this.config.suffix || '') + (url.indexOf('?') === -1 ? '?' : '&') + parts.join('&');\n  };\n\n  configuration.urlCreatorFactory.path = Path;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar Restangular = /*#__PURE__*/function () {\n  /**\n   * @param {?} configObj\n   * @param {?} injector\n   * @param {?} http\n   */\n  function Restangular(configObj, injector, http) {\n    _classCallCheck(this, Restangular);\n\n    this.configObj = configObj;\n    this.injector = injector;\n    this.http = http;\n    this.provider = new providerConfig(http);\n    /** @type {?} */\n\n    var element = this.provider.$get();\n    assign(this, element);\n    this.setDefaultConfig();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Restangular, [{\n    key: \"setDefaultConfig\",\n    value: function setDefaultConfig() {\n      var _this2 = this,\n          _this$configObj;\n\n      if (!this.configObj || !isFunction(this.configObj.fn)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var arrDI = map$1(this.configObj.arrServices,\n      /**\n      * @param {?} services\n      * @return {?}\n      */\n      function (services) {\n        return _this2.injector.get(services);\n      });\n\n      (_this$configObj = this.configObj).fn.apply(_this$configObj, [this.provider].concat(_toConsumableArray(arrDI)));\n    }\n  }]);\n\n  return Restangular;\n}();\n\nRestangular.ɵfac = function Restangular_Factory(t) {\n  return new (t || Restangular)(ɵngcc0.ɵɵinject(RESTANGULAR, 8), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(RestangularHttp));\n};\n\nRestangular.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Restangular,\n  factory: Restangular.ɵfac\n});\n/** @nocollapse */\n\nRestangular.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RESTANGULAR]\n    }]\n  }, {\n    type: Injector\n  }, {\n    type: RestangularHttp\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Restangular, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RESTANGULAR]\n      }]\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: RestangularHttp\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  Restangular.prototype.provider;\n  /** @type {?} */\n\n  Restangular.prototype.addElementTransformer;\n  /** @type {?} */\n\n  Restangular.prototype.extendCollection;\n  /** @type {?} */\n\n  Restangular.prototype.extendModel;\n  /** @type {?} */\n\n  Restangular.prototype.copy;\n  /** @type {?} */\n\n  Restangular.prototype.configuration;\n  /** @type {?} */\n\n  Restangular.prototype.service;\n  /** @type {?} */\n\n  Restangular.prototype.id;\n  /** @type {?} */\n\n  Restangular.prototype.route;\n  /** @type {?} */\n\n  Restangular.prototype.parentResource;\n  /** @type {?} */\n\n  Restangular.prototype.restangularCollection;\n  /** @type {?} */\n\n  Restangular.prototype.cannonicalId;\n  /** @type {?} */\n\n  Restangular.prototype.etag;\n  /** @type {?} */\n\n  Restangular.prototype.selfLink;\n  /** @type {?} */\n\n  Restangular.prototype.get;\n  /** @type {?} */\n\n  Restangular.prototype.getList;\n  /** @type {?} */\n\n  Restangular.prototype.put;\n  /** @type {?} */\n\n  Restangular.prototype.post;\n  /** @type {?} */\n\n  Restangular.prototype.remove;\n  /** @type {?} */\n\n  Restangular.prototype.head;\n  /** @type {?} */\n\n  Restangular.prototype.trace;\n  /** @type {?} */\n\n  Restangular.prototype.options;\n  /** @type {?} */\n\n  Restangular.prototype.patch;\n  /** @type {?} */\n\n  Restangular.prototype.getRestangularUrl;\n  /** @type {?} */\n\n  Restangular.prototype.getRequestedUrl;\n  /** @type {?} */\n\n  Restangular.prototype.putElement;\n  /** @type {?} */\n\n  Restangular.prototype.addRestangularMethod;\n  /** @type {?} */\n\n  Restangular.prototype.getParentList;\n  /** @type {?} */\n\n  Restangular.prototype.clone;\n  /** @type {?} */\n\n  Restangular.prototype.ids;\n  /** @type {?} */\n\n  Restangular.prototype.httpConfig;\n  /** @type {?} */\n\n  Restangular.prototype.reqParams;\n  /** @type {?} */\n\n  Restangular.prototype.one;\n  /** @type {?} */\n\n  Restangular.prototype.all;\n  /** @type {?} */\n\n  Restangular.prototype.several;\n  /** @type {?} */\n\n  Restangular.prototype.oneUrl;\n  /** @type {?} */\n\n  Restangular.prototype.allUrl;\n  /** @type {?} */\n\n  Restangular.prototype.customPUT;\n  /** @type {?} */\n\n  Restangular.prototype.customPATCH;\n  /** @type {?} */\n\n  Restangular.prototype.customPOST;\n  /** @type {?} */\n\n  Restangular.prototype.customDELETE;\n  /** @type {?} */\n\n  Restangular.prototype.customGET;\n  /** @type {?} */\n\n  Restangular.prototype.customGETLIST;\n  /** @type {?} */\n\n  Restangular.prototype.customOperation;\n  /** @type {?} */\n\n  Restangular.prototype.doPUT;\n  /** @type {?} */\n\n  Restangular.prototype.doPATCH;\n  /** @type {?} */\n\n  Restangular.prototype.doPOST;\n  /** @type {?} */\n\n  Restangular.prototype.doDELETE;\n  /** @type {?} */\n\n  Restangular.prototype.doGET;\n  /** @type {?} */\n\n  Restangular.prototype.doGETLIST;\n  /** @type {?} */\n\n  Restangular.prototype.fromServer;\n  /** @type {?} */\n\n  Restangular.prototype.withConfig;\n  /** @type {?} */\n\n  Restangular.prototype.withHttpConfig;\n  /** @type {?} */\n\n  Restangular.prototype.singleOne;\n  /** @type {?} */\n\n  Restangular.prototype.plain;\n  /** @type {?} */\n\n  Restangular.prototype.save;\n  /** @type {?} */\n\n  Restangular.prototype.restangularized;\n  /** @type {?} */\n\n  Restangular.prototype.restangularizeElement;\n  /** @type {?} */\n\n  Restangular.prototype.restangularizeCollection;\n  /** @type {?} */\n\n  Restangular.prototype.configObj;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Restangular.prototype.injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Restangular.prototype.http;\n}\n/**\n * @param {?} $http\n * @return {?}\n */\n\n\nfunction providerConfig($http) {\n  /** @type {?} */\n  var globalConfiguration = {};\n  RestangularConfigurer(this, globalConfiguration);\n  this.$get = $get;\n  /**\n   * @return {?}\n   */\n\n  function $get() {\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    function createServiceForConfiguration(config) {\n      /** @type {?} */\n      var service = {};\n      /** @type {?} */\n\n      var urlHandler = new config.urlCreatorFactory[config.urlCreator]();\n      urlHandler.setConfig(config);\n      /**\n       * @param {?} parent\n       * @param {?} elem\n       * @param {?} route\n       * @param {?} reqParams\n       * @param {?} fromServer\n       * @return {?}\n       */\n\n      function restangularizeBase(parent, elem, route, reqParams, fromServer) {\n        elem[config.restangularFields.route] = route;\n        elem[config.restangularFields.getRestangularUrl] = bind(urlHandler.fetchUrl, urlHandler, elem);\n        elem[config.restangularFields.getRequestedUrl] = bind(urlHandler.fetchRequestedUrl, urlHandler, elem);\n        elem[config.restangularFields.addRestangularMethod] = bind(addRestangularMethodFunction, elem);\n        elem[config.restangularFields.clone] = bind(copyRestangularizedElement, elem);\n        elem[config.restangularFields.reqParams] = isEmpty(reqParams) ? null : reqParams;\n        elem[config.restangularFields.withHttpConfig] = bind(withHttpConfig, elem);\n        elem[config.restangularFields.plain] = bind(stripRestangular, elem, elem); // Tag element as restangularized\n\n        elem[config.restangularFields.restangularized] = true; // RequestLess connection\n\n        elem[config.restangularFields.one] = bind(one, elem, elem);\n        elem[config.restangularFields.all] = bind(all, elem, elem);\n        elem[config.restangularFields.several] = bind(several, elem, elem);\n        elem[config.restangularFields.oneUrl] = bind(oneUrl, elem, elem);\n        elem[config.restangularFields.allUrl] = bind(allUrl, elem, elem);\n        elem[config.restangularFields.fromServer] = !!fromServer;\n\n        if (parent && config.shouldSaveParent(route)) {\n          /** @type {?} */\n          var parentId = config.getIdFromElem(parent);\n          /** @type {?} */\n\n          var parentUrl = config.getUrlFromElem(parent);\n          /** @type {?} */\n\n          var restangularFieldsForParent = union(values(pick(config.restangularFields, ['route', 'singleOne', 'parentResource'])), config.extraFields);\n          /** @type {?} */\n\n          var parentResource = pick(parent, restangularFieldsForParent);\n\n          if (config.isValidId(parentId)) {\n            config.setIdToElem(parentResource, parentId, route);\n          }\n\n          if (config.isValidId(parentUrl)) {\n            config.setUrlToElem(parentResource, parentUrl, route);\n          }\n\n          elem[config.restangularFields.parentResource] = parentResource;\n        } else {\n          elem[config.restangularFields.parentResource] = null;\n        }\n\n        return elem;\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @param {?} id\n       * @param {?} singleOne\n       * @return {?}\n       */\n\n\n      function one(parent, route, id, singleOne) {\n        /** @type {?} */\n        var error;\n\n        if (isNumber(route) || isNumber(parent)) {\n          error = 'You\\'re creating a Restangular entity with the number ';\n          error += 'instead of the route or the parent. For example, you can\\'t call .one(12).';\n          throw new Error(error);\n        }\n\n        if (isUndefined(route)) {\n          error = 'You\\'re creating a Restangular entity either without the path. ';\n          error += 'For example you can\\'t call .one(). Please check if your arguments are valid.';\n          throw new Error(error);\n        }\n        /** @type {?} */\n\n\n        var elem = {};\n        config.setIdToElem(elem, id, route);\n        config.setFieldToElem(config.restangularFields.singleOne, elem, singleOne);\n        return restangularizeElem(parent, elem, route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @return {?}\n       */\n\n\n      function all(parent, route) {\n        return restangularizeCollection(parent, [], route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @return {?}\n       */\n\n\n      function several(parent, route\n      /*, ids */\n      ) {\n        /** @type {?} */\n        var collection = [];\n        collection[config.restangularFields.ids] = Array.prototype.splice.call(arguments, 2);\n        return restangularizeCollection(parent, collection, route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @param {?} url\n       * @return {?}\n       */\n\n\n      function oneUrl(parent, route, url) {\n        if (!route) {\n          throw new Error('Route is mandatory when creating new Restangular objects.');\n        }\n        /** @type {?} */\n\n\n        var elem = {};\n        config.setUrlToElem(elem, url, route);\n        return restangularizeElem(parent, elem, route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @param {?} url\n       * @return {?}\n       */\n\n\n      function allUrl(parent, route, url) {\n        if (!route) {\n          throw new Error('Route is mandatory when creating new Restangular objects.');\n        }\n        /** @type {?} */\n\n\n        var elem = {};\n        config.setUrlToElem(elem, url, route);\n        return restangularizeCollection(parent, elem, route, false);\n      } // Promises\n\n      /**\n       * @param {?} subject\n       * @param {?} isCollection\n       * @param {?} valueToFill\n       * @return {?}\n       */\n\n\n      function restangularizeResponse(subject, isCollection, valueToFill) {\n        return subject.pipe(filter(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function (res) {\n          return !!res;\n        }));\n      }\n      /**\n       * @param {?} subject\n       * @param {?} response\n       * @param {?} data\n       * @param {?} filledValue\n       * @return {?}\n       */\n\n\n      function resolvePromise(subject, response, data, filledValue) {\n        extend(filledValue, data); // Trigger the full response interceptor.\n\n        if (config.fullResponse) {\n          subject.next(extend(response, {\n            data: data\n          }));\n        } else {\n          subject.next(data);\n        }\n\n        subject.complete();\n      } // Elements\n\n      /**\n       * @param {?} elem\n       * @return {?}\n       */\n\n\n      function stripRestangular(elem) {\n        if (isArray(elem)) {\n          /** @type {?} */\n          var array = [];\n          each(elem,\n          /**\n          * @param {?} value\n          * @return {?}\n          */\n          function (value) {\n            array.push(config.isRestangularized(value) ? stripRestangular(value) : value);\n          });\n          return array;\n        } else {\n          return omit(elem, values(omit(config.restangularFields, 'id')));\n        }\n      }\n      /**\n       * @param {?} elem\n       * @return {?}\n       */\n\n\n      function addCustomOperation(elem) {\n        elem[config.restangularFields.customOperation] = bind(customFunction, elem);\n        /** @type {?} */\n\n        var requestMethods = {\n          get: customFunction,\n          delete: customFunction\n        };\n        each(['put', 'patch', 'post'],\n        /**\n        * @param {?} name\n        * @return {?}\n        */\n        function (name) {\n          requestMethods[name] =\n          /**\n          * @param {?} operation\n          * @param {?} element\n          * @param {?} path\n          * @param {?} params\n          * @param {?} headers\n          * @return {?}\n          */\n          function (operation, element, path, params, headers) {\n            return bind(customFunction, this)(operation, path, params, headers, element);\n          };\n        });\n        each(requestMethods,\n        /**\n        * @param {?} requestFunc\n        * @param {?} name\n        * @return {?}\n        */\n        function (requestFunc, name) {\n          /** @type {?} */\n          var callOperation = name === 'delete' ? 'remove' : name;\n          each(['do', 'custom'],\n          /**\n          * @param {?} alias\n          * @return {?}\n          */\n          function (alias) {\n            elem[alias + name.toUpperCase()] = bind(requestFunc, elem, callOperation);\n          });\n        });\n        elem[config.restangularFields.customGETLIST] = bind(fetchFunction, elem);\n        elem[config.restangularFields.doGETLIST] = elem[config.restangularFields.customGETLIST];\n      }\n      /**\n       * @param {?} fromElement\n       * @param {?=} toElement\n       * @return {?}\n       */\n\n\n      function copyRestangularizedElement(fromElement) {\n        var toElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        /** @type {?} */\n        var copiedElement = assign(toElement, fromElement);\n        return restangularizeElem(copiedElement[config.restangularFields.parentResource], copiedElement, copiedElement[config.restangularFields.route], true);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} element\n       * @param {?} route\n       * @param {?=} fromServer\n       * @param {?=} collection\n       * @param {?=} reqParams\n       * @return {?}\n       */\n\n\n      function restangularizeElem(parent, element, route, fromServer, collection, reqParams) {\n        /** @type {?} */\n        var elem = config.onBeforeElemRestangularized(element, false, route);\n        /** @type {?} */\n\n        var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n\n        if (config.useCannonicalId) {\n          localElem[config.restangularFields.cannonicalId] = config.getIdFromElem(localElem);\n        }\n\n        if (collection) {\n          localElem[config.restangularFields.getParentList] =\n          /**\n          * @return {?}\n          */\n          function () {\n            return collection;\n          };\n        }\n\n        localElem[config.restangularFields.restangularCollection] = false;\n        localElem[config.restangularFields.get] = bind(getFunction, localElem);\n        localElem[config.restangularFields.getList] = bind(fetchFunction, localElem);\n        localElem[config.restangularFields.put] = bind(putFunction, localElem);\n        localElem[config.restangularFields.post] = bind(postFunction, localElem);\n        localElem[config.restangularFields.remove] = bind(deleteFunction, localElem);\n        localElem[config.restangularFields.head] = bind(headFunction, localElem);\n        localElem[config.restangularFields.trace] = bind(traceFunction, localElem);\n        localElem[config.restangularFields.options] = bind(optionsFunction, localElem);\n        localElem[config.restangularFields.patch] = bind(patchFunction, localElem);\n        localElem[config.restangularFields.save] = bind(save, localElem);\n        addCustomOperation(localElem);\n        return config.transformElem(localElem, false, route, service, true);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} element\n       * @param {?} route\n       * @param {?=} fromServer\n       * @param {?=} reqParams\n       * @return {?}\n       */\n\n\n      function restangularizeCollection(parent, element, route, fromServer, reqParams) {\n        /** @type {?} */\n        var elem = config.onBeforeElemRestangularized(element, true, route);\n        /** @type {?} */\n\n        var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n        localElem[config.restangularFields.restangularCollection] = true;\n        localElem[config.restangularFields.post] = bind(postFunction, localElem, null);\n        localElem[config.restangularFields.remove] = bind(deleteFunction, localElem);\n        localElem[config.restangularFields.head] = bind(headFunction, localElem);\n        localElem[config.restangularFields.trace] = bind(traceFunction, localElem);\n        localElem[config.restangularFields.putElement] = bind(putElementFunction, localElem);\n        localElem[config.restangularFields.options] = bind(optionsFunction, localElem);\n        localElem[config.restangularFields.patch] = bind(patchFunction, localElem);\n        localElem[config.restangularFields.get] = bind(getById, localElem);\n        localElem[config.restangularFields.getList] = bind(fetchFunction, localElem, null);\n        addCustomOperation(localElem);\n        return config.transformElem(localElem, true, route, service, true);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} element\n       * @param {?} route\n       * @return {?}\n       */\n\n\n      function restangularizeCollectionAndElements(parent, element, route) {\n        /** @type {?} */\n        var collection = restangularizeCollection(parent, element, route, false);\n        each(collection,\n        /**\n        * @param {?} elem\n        * @return {?}\n        */\n        function (elem) {\n          if (elem) {\n            restangularizeElem(parent, elem, route, false);\n          }\n        });\n        return collection;\n      }\n      /**\n       * @param {?} id\n       * @param {?} reqParams\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function getById(id, reqParams, headers) {\n        return this.customGET(id.toString(), reqParams, headers);\n      }\n      /**\n       * @param {?} idx\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function putElementFunction(idx, params, headers) {\n        /** @type {?} */\n        var __this = this;\n        /** @type {?} */\n\n\n        var elemToPut = this[idx];\n        /** @type {?} */\n\n        var subject = new BehaviorSubject(null);\n        /** @type {?} */\n\n        var filledArray = [];\n        filledArray = config.transformElem(filledArray, true, elemToPut[config.restangularFields.route], service);\n        elemToPut.put(params, headers).subscribe(\n        /**\n        * @param {?} serverElem\n        * @return {?}\n        */\n        function (serverElem) {\n          /** @type {?} */\n          var newArray = copyRestangularizedElement(__this);\n          newArray[idx] = serverElem;\n          filledArray = newArray;\n          subject.next(newArray);\n        },\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function (response) {\n          subject.error(response);\n        },\n        /**\n        * @return {?}\n        */\n        function () {\n          subject.complete();\n        });\n        return restangularizeResponse(subject, true, filledArray);\n      }\n      /**\n       * @param {?} resData\n       * @param {?} operation\n       * @param {?} route\n       * @param {?} fetchUrl\n       * @param {?} response\n       * @param {?} subject\n       * @return {?}\n       */\n\n\n      function parseResponse(resData, operation, route, fetchUrl, response, subject) {\n        /** @type {?} */\n        var data = config.responseExtractor(resData, operation, route, fetchUrl, response, subject);\n        /** @type {?} */\n\n        var etag = response.headers.get('ETag');\n\n        if (data && etag) {\n          data[config.restangularFields.etag] = etag;\n        }\n\n        return data;\n      }\n      /**\n       * @param {?} what\n       * @param {?} reqParams\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function fetchFunction(what, reqParams, headers) {\n        /** @type {?} */\n        var __this = this;\n        /** @type {?} */\n\n\n        var subject = new BehaviorSubject(null);\n        /** @type {?} */\n\n        var operation = 'getList';\n        /** @type {?} */\n\n        var url = urlHandler.fetchUrl(this, what);\n        /** @type {?} */\n\n        var whatFetched = what || __this[config.restangularFields.route];\n        /** @type {?} */\n\n        var request = config.fullRequestInterceptor(null, operation, whatFetched, url, headers || {}, reqParams || {}, this[config.restangularFields.httpConfig] || {});\n        /** @type {?} */\n\n        var filledArray = [];\n        filledArray = config.transformElem(filledArray, true, whatFetched, service);\n        /** @type {?} */\n\n        var method = 'getList';\n\n        if (config.jsonp) {\n          method = 'jsonp';\n        }\n        /** @type {?} */\n\n\n        var okCallback =\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function okCallback(response) {\n          /** @type {?} */\n          var resData = response.body;\n          /** @type {?} */\n\n          var fullParams = response.config.params;\n          /** @type {?} */\n\n          var data = parseResponse(resData, operation, whatFetched, url, response, subject); // support empty response for getList() calls (some APIs respond with 204 and empty body)\n\n          if (isUndefined(data) || '' === data) {\n            data = [];\n          }\n\n          if (!isArray(data)) {\n            throw new Error('Response for getList SHOULD be an array and not an object or something else');\n          }\n\n          if (true === config.plainByDefault) {\n            return resolvePromise(subject, response, data, filledArray);\n          }\n          /** @type {?} */\n\n\n          var processedData = map$1(data,\n          /**\n          * @param {?} elem\n          * @return {?}\n          */\n          function (elem) {\n            if (!__this[config.restangularFields.restangularCollection]) {\n              return restangularizeElem(__this, elem, what, true, data);\n            } else {\n              return restangularizeElem(__this[config.restangularFields.parentResource], elem, __this[config.restangularFields.route], true, data);\n            }\n          });\n          processedData = extend(data, processedData);\n\n          if (!__this[config.restangularFields.restangularCollection]) {\n            resolvePromise(subject, response, restangularizeCollection(__this, processedData, what, true, fullParams), filledArray);\n          } else {\n            resolvePromise(subject, response, restangularizeCollection(__this[config.restangularFields.parentResource], processedData, __this[config.restangularFields.route], true, fullParams), filledArray);\n          }\n        };\n\n        urlHandler.resource(this, $http, request.httpConfig, request.headers, request.params, what, this[config.restangularFields.etag], operation)[method]().subscribe(okCallback,\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function error(response) {\n          if (response.status === 304 && __this[config.restangularFields.restangularCollection]) {\n            resolvePromise(subject, response, __this, filledArray);\n          } else if (every(config.errorInterceptors,\n          /**\n          * @param {?} cb\n          * @return {?}\n          */\n          function (cb) {\n            return cb(response, subject, okCallback) !== false;\n          })) {\n            // triggered if no callback returns false\n            subject.error(response);\n          }\n        });\n        return restangularizeResponse(subject, true, filledArray);\n      }\n      /**\n       * @param {?} httpConfig\n       * @return {?}\n       */\n\n\n      function withHttpConfig(httpConfig) {\n        this[config.restangularFields.httpConfig] = httpConfig;\n        return this;\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function save(params, headers) {\n        if (this[config.restangularFields.fromServer]) {\n          return this[config.restangularFields.put](params, headers);\n        } else {\n          return bind(elemFunction, this)('post', undefined, params, undefined, headers);\n        }\n      }\n      /**\n       * @param {?} operation\n       * @param {?} what\n       * @param {?} params\n       * @param {?} obj\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function elemFunction(operation, what, params, obj, headers) {\n        /** @type {?} */\n        var __this = this;\n        /** @type {?} */\n\n\n        var subject = new BehaviorSubject(null);\n        /** @type {?} */\n\n        var resParams = params || {};\n        /** @type {?} */\n\n        var route = what || this[config.restangularFields.route];\n        /** @type {?} */\n\n        var fetchUrl = urlHandler.fetchUrl(this, what);\n        /** @type {?} */\n\n        var callObj = obj || this; // fallback to etag on restangular object (since for custom methods we probably don't explicitly specify the etag field)\n\n        /** @type {?} */\n\n        var etag = callObj[config.restangularFields.etag] || (operation !== 'post' ? this[config.restangularFields.etag] : null);\n\n        if (isObject(callObj) && config.isRestangularized(callObj)) {\n          callObj = stripRestangular(callObj);\n        }\n        /** @type {?} */\n\n\n        var request = config.fullRequestInterceptor(callObj, operation, route, fetchUrl, headers || {}, resParams || {}, this[config.restangularFields.httpConfig] || {});\n        /** @type {?} */\n\n        var filledObject = {};\n        filledObject = config.transformElem(filledObject, false, route, service);\n        /** @type {?} */\n\n        var okCallback =\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function okCallback(response) {\n          /** @type {?} */\n          var resData = get(response, 'body');\n          /** @type {?} */\n\n          var fullParams = get(response, 'config.params');\n          /** @type {?} */\n\n          var elem = parseResponse(resData, operation, route, fetchUrl, response, subject);\n\n          if (elem) {\n            /** @type {?} */\n            var data;\n\n            if (true === config.plainByDefault) {\n              return resolvePromise(subject, response, elem, filledObject);\n            }\n\n            if (operation === 'post' && !__this[config.restangularFields.restangularCollection]) {\n              data = restangularizeElem(__this[config.restangularFields.parentResource], elem, route, true, null, fullParams);\n              resolvePromise(subject, response, data, filledObject);\n            } else {\n              data = restangularizeElem(__this[config.restangularFields.parentResource], elem, __this[config.restangularFields.route], true, null, fullParams);\n              data[config.restangularFields.singleOne] = __this[config.restangularFields.singleOne];\n              resolvePromise(subject, response, data, filledObject);\n            }\n          } else {\n            resolvePromise(subject, response, undefined, filledObject);\n          }\n        };\n        /** @type {?} */\n\n\n        var errorCallback =\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function errorCallback(response) {\n          if (response.status === 304 && config.isSafe(operation)) {\n            resolvePromise(subject, response, __this, filledObject);\n          } else if (every(config.errorInterceptors,\n          /**\n          * @param {?} cb\n          * @return {?}\n          */\n          function (cb) {\n            return cb(response, subject, okCallback) !== false;\n          })) {\n            // triggered if no callback returns false\n            subject.error(response);\n          }\n        }; // Overriding HTTP Method\n\n        /** @type {?} */\n\n\n        var callOperation = operation;\n        /** @type {?} */\n\n        var callHeaders = extend({}, request.headers);\n        /** @type {?} */\n\n        var isOverrideOperation = config.isOverridenMethod(operation);\n\n        if (isOverrideOperation) {\n          callOperation = 'post';\n          callHeaders = extend(callHeaders, {\n            'X-HTTP-Method-Override': operation === 'remove' ? 'DELETE' : operation.toUpperCase()\n          });\n        } else if (config.jsonp && callOperation === 'get') {\n          callOperation = 'jsonp';\n        }\n\n        if (config.isSafe(operation)) {\n          if (isOverrideOperation) {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation]({}).subscribe(okCallback, errorCallback);\n          } else {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation]().subscribe(okCallback, errorCallback);\n          }\n        } else {\n          urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation](request.element).subscribe(okCallback, errorCallback);\n        }\n\n        return restangularizeResponse(subject, false, filledObject);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function getFunction(params, headers) {\n        return bind(elemFunction, this)('get', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function deleteFunction(params, headers) {\n        return bind(elemFunction, this)('remove', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function putFunction(params, headers) {\n        return bind(elemFunction, this)('put', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} what\n       * @param {?} elem\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function postFunction(what, elem, params, headers) {\n        return bind(elemFunction, this)('post', what, params, elem, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function headFunction(params, headers) {\n        return bind(elemFunction, this)('head', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function traceFunction(params, headers) {\n        return bind(elemFunction, this)('trace', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function optionsFunction(params, headers) {\n        return bind(elemFunction, this)('options', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} elem\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function patchFunction(elem, params, headers) {\n        return bind(elemFunction, this)('patch', undefined, params, elem, headers);\n      }\n      /**\n       * @param {?} operation\n       * @param {?} path\n       * @param {?} params\n       * @param {?} headers\n       * @param {?} elem\n       * @return {?}\n       */\n\n\n      function customFunction(operation, path, params, headers, elem) {\n        return bind(elemFunction, this)(operation, path, params, elem, headers);\n      }\n      /**\n       * @param {?} name\n       * @param {?} operation\n       * @param {?} path\n       * @param {?} defaultParams\n       * @param {?} defaultHeaders\n       * @param {?} defaultElem\n       * @return {?}\n       */\n\n\n      function addRestangularMethodFunction(name, operation, path, defaultParams, defaultHeaders, defaultElem) {\n        /** @type {?} */\n        var bindedFunction;\n\n        if (operation === 'getList') {\n          bindedFunction = bind(fetchFunction, this, path);\n        } else {\n          bindedFunction = bind(customFunction, this, operation, path);\n        }\n        /** @type {?} */\n\n\n        var createdFunction =\n        /**\n        * @param {?} params\n        * @param {?} headers\n        * @param {?} elem\n        * @return {?}\n        */\n        function createdFunction(params, headers, elem) {\n          /** @type {?} */\n          var callParams = defaults({\n            params: params,\n            headers: headers,\n            elem: elem\n          }, {\n            params: defaultParams,\n            headers: defaultHeaders,\n            elem: defaultElem\n          });\n          return bindedFunction(callParams.params, callParams.headers, callParams.elem);\n        };\n\n        if (config.isSafe(operation)) {\n          this[name] = createdFunction;\n        } else {\n          this[name] =\n          /**\n          * @param {?} elem\n          * @param {?} params\n          * @param {?} headers\n          * @return {?}\n          */\n          function (elem, params, headers) {\n            return createdFunction(params, headers, elem);\n          };\n        }\n      }\n      /**\n       * @param {?} configurer\n       * @return {?}\n       */\n\n\n      function withConfigurationFunction(configurer) {\n        /** @type {?} */\n        var newConfig = clone(omit(config, 'configuration'));\n        RestangularConfigurer(newConfig, newConfig);\n        configurer(newConfig);\n        return createServiceForConfiguration(newConfig);\n      }\n      /**\n       * @param {?} route\n       * @param {?} parent\n       * @return {?}\n       */\n\n\n      function toService(route, parent) {\n        /** @type {?} */\n        var knownCollectionMethods = values(config.restangularFields);\n        /** @type {?} */\n\n        var serv = {};\n        /** @type {?} */\n\n        var collection = (parent || service).all(route);\n        serv.one = bind(one, parent || service, parent, route);\n        serv.all = bind(collection.all, collection);\n        serv.post = bind(collection.post, collection);\n        serv.getList = bind(collection.getList, collection);\n        serv.withHttpConfig = bind(collection.withHttpConfig, collection);\n        serv.get = bind(collection.get, collection);\n\n        for (var prop in collection) {\n          if (collection.hasOwnProperty(prop) && isFunction(collection[prop]) && !includes(knownCollectionMethods, prop)) {\n            serv[prop] = bind(collection[prop], collection);\n          }\n        }\n\n        return serv;\n      }\n\n      RestangularConfigurer(service, config);\n      service.copy = bind(copyRestangularizedElement, service);\n      service.service = bind(toService, service);\n      service.withConfig = bind(withConfigurationFunction, service);\n      service.one = bind(one, service, null);\n      service.all = bind(all, service, null);\n      service.several = bind(several, service, null);\n      service.oneUrl = bind(oneUrl, service, null);\n      service.allUrl = bind(allUrl, service, null);\n      service.stripRestangular = bind(stripRestangular, service);\n      service.restangularizeElement = bind(restangularizeElem, service);\n      service.restangularizeCollection = bind(restangularizeCollectionAndElements, service);\n      return service;\n    }\n\n    return createServiceForConfiguration(globalConfiguration);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar CONFIG_OBJ = new InjectionToken('configObj');\n\nvar RestangularModule = /*#__PURE__*/function () {\n  /**\n   * @param {?} parentModule\n   */\n  function RestangularModule(parentModule) {\n    _classCallCheck(this, RestangularModule);\n\n    if (parentModule) {\n      throw new Error('RestangularModule is already loaded. Import it in the AppModule only');\n    }\n  }\n  /**\n   * @param {?=} config1\n   * @param {?=} config2\n   * @return {?}\n   */\n\n\n  _createClass(RestangularModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(config1, config2) {\n      return {\n        ngModule: RestangularModule,\n        providers: [{\n          provide: CONFIG_OBJ,\n          useValue: [config1, config2]\n        }, {\n          provide: RESTANGULAR,\n          useFactory: RestangularFactory,\n          deps: [CONFIG_OBJ]\n        }]\n      };\n    }\n  }]);\n\n  return RestangularModule;\n}();\n\nRestangularModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RestangularModule\n});\nRestangularModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RestangularModule_Factory(t) {\n    return new (t || RestangularModule)(ɵngcc0.ɵɵinject(RestangularModule, 12));\n  },\n  providers: [RestangularHttp, Restangular],\n  imports: [[HttpClientModule]]\n});\n/** @nocollapse */\n\nRestangularModule.ctorParameters = function () {\n  return [{\n    type: RestangularModule,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RestangularModule, {\n    imports: function imports() {\n      return [HttpClientModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RestangularModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule],\n      providers: [RestangularHttp, Restangular]\n    }]\n  }], function () {\n    return [{\n      type: RestangularModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-restangular.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { Restangular, RestangularHttp, RestangularModule, CONFIG_OBJ as ɵa, RESTANGULAR as ɵb, RestangularFactory as ɵc };","map":null,"metadata":{},"sourceType":"module"}