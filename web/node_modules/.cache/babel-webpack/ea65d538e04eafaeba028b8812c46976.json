{"ast":null,"code":"import _createForOfIteratorHelper from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _createClass from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, EventEmitter, Inject, InjectionToken, ChangeDetectorRef, Directive, ElementRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, concat, merge, Observable } from 'rxjs';\nimport { map, share, switchMap, take, toArray } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar TranslateLoader = function TranslateLoader() {\n  _classCallCheck(this, TranslateLoader);\n};\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n\n\nvar TranslateFakeLoader = /*#__PURE__*/function (_TranslateLoader) {\n  _inherits(TranslateFakeLoader, _TranslateLoader);\n\n  var _super = _createSuper(TranslateFakeLoader);\n\n  function TranslateFakeLoader() {\n    _classCallCheck(this, TranslateFakeLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TranslateFakeLoader, [{\n    key: \"getTranslation\",\n\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    value: function getTranslation(lang) {\n      return of({});\n    }\n  }]);\n\n  return TranslateFakeLoader;\n}(TranslateLoader);\n\nTranslateFakeLoader.ɵfac = function TranslateFakeLoader_Factory(t) {\n  return ɵTranslateFakeLoader_BaseFactory(t || TranslateFakeLoader);\n};\n\nTranslateFakeLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeLoader,\n  factory: TranslateFakeLoader.ɵfac\n});\nvar ɵTranslateFakeLoader_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar MissingTranslationHandler = function MissingTranslationHandler() {\n  _classCallCheck(this, MissingTranslationHandler);\n};\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n\n\nvar FakeMissingTranslationHandler = /*#__PURE__*/function () {\n  function FakeMissingTranslationHandler() {\n    _classCallCheck(this, FakeMissingTranslationHandler);\n  }\n\n  _createClass(FakeMissingTranslationHandler, [{\n    key: \"handle\",\n\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    value: function handle(params) {\n      return params.key;\n    }\n  }]);\n\n  return FakeMissingTranslationHandler;\n}();\n\nFakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n  return new (t || FakeMissingTranslationHandler)();\n};\n\nFakeMissingTranslationHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FakeMissingTranslationHandler,\n  factory: FakeMissingTranslationHandler.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar TranslateCompiler = function TranslateCompiler() {\n  _classCallCheck(this, TranslateCompiler);\n};\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n\n\nvar TranslateFakeCompiler = /*#__PURE__*/function (_TranslateCompiler) {\n  _inherits(TranslateFakeCompiler, _TranslateCompiler);\n\n  var _super2 = _createSuper(TranslateFakeCompiler);\n\n  function TranslateFakeCompiler() {\n    _classCallCheck(this, TranslateFakeCompiler);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(TranslateFakeCompiler, [{\n    key: \"compile\",\n\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    value: function compile(value, lang) {\n      return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"compileTranslations\",\n    value: function compileTranslations(translations, lang) {\n      return translations;\n    }\n  }]);\n\n  return TranslateFakeCompiler;\n}(TranslateCompiler);\n\nTranslateFakeCompiler.ɵfac = function TranslateFakeCompiler_Factory(t) {\n  return ɵTranslateFakeCompiler_BaseFactory(t || TranslateFakeCompiler);\n};\n\nTranslateFakeCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeCompiler,\n  factory: TranslateFakeCompiler.ɵfac\n});\nvar ɵTranslateFakeCompiler_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\n\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n\n  var\n  /** @type {?} */\n  t1 = typeof o1,\n\n  /** @type {?} */\n  t2 = typeof o2,\n\n  /** @type {?} */\n  length,\n\n  /** @type {?} */\n  key,\n\n  /** @type {?} */\n  keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\n\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\n\n\nfunction mergeDeep(target, source) {\n  var\n  /** @type {?} */\n  output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(function (key) {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, _defineProperty({}, key, source[key]));\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n\n  return output;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar TranslateParser = function TranslateParser() {\n  _classCallCheck(this, TranslateParser);\n};\n\nvar TranslateDefaultParser = /*#__PURE__*/function (_TranslateParser) {\n  _inherits(TranslateDefaultParser, _TranslateParser);\n\n  var _super3 = _createSuper(TranslateDefaultParser);\n\n  function TranslateDefaultParser() {\n    var _this;\n\n    _classCallCheck(this, TranslateDefaultParser);\n\n    _this = _super3.apply(this, arguments);\n    _this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    return _this;\n  }\n  /**\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  _createClass(TranslateDefaultParser, [{\n    key: \"interpolate\",\n    value: function interpolate(expr, params) {\n      var\n      /** @type {?} */\n      result;\n\n      if (typeof expr === 'string') {\n        result = this.interpolateString(expr, params);\n      } else if (typeof expr === 'function') {\n        result = this.interpolateFunction(expr, params);\n      } else {\n        // this should not happen, but an unrelated TranslateService test depends on it\n        result =\n        /** @type {?} */\n        expr;\n      }\n\n      return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue(target, key) {\n      var\n      /** @type {?} */\n      keys = key.split('.');\n      key = '';\n\n      do {\n        key += keys.shift();\n\n        if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n          target = target[key];\n          key = '';\n        } else if (!keys.length) {\n          target = undefined;\n        } else {\n          key += '.';\n        }\n      } while (keys.length);\n\n      return target;\n    }\n    /**\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"interpolateFunction\",\n    value: function interpolateFunction(fn, params) {\n      return fn(params);\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"interpolateString\",\n    value: function interpolateString(expr, params) {\n      var _this2 = this;\n\n      if (!params) {\n        return expr;\n      }\n\n      return expr.replace(this.templateMatcher, function (substring, b) {\n        var\n        /** @type {?} */\n        r = _this2.getValue(params, b);\n\n        return isDefined(r) ? r : substring;\n      });\n    }\n  }]);\n\n  return TranslateDefaultParser;\n}(TranslateParser);\n\nTranslateDefaultParser.ɵfac = function TranslateDefaultParser_Factory(t) {\n  return ɵTranslateDefaultParser_BaseFactory(t || TranslateDefaultParser);\n};\n\nTranslateDefaultParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateDefaultParser,\n  factory: TranslateDefaultParser.ɵfac\n});\nvar ɵTranslateDefaultParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateDefaultParser, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslateStore = function TranslateStore() {\n  _classCallCheck(this, TranslateStore);\n\n  /**\n   * The lang currently used\n   */\n  this.currentLang = this.defaultLang;\n  /**\n   * a list of translations per lang\n   */\n\n  this.translations = {};\n  /**\n   * an array of langs\n   */\n\n  this.langs = [];\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onTranslationChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onLangChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onDefaultLangChange = new EventEmitter();\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nUSE_STORE = new InjectionToken('USE_STORE');\nvar\n/** @type {?} */\nUSE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n\nvar TranslateService = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {?} store an instance of the store (that is supposed to be unique)\n   * @param {?} currentLoader An instance of the loader currently used\n   * @param {?} compiler An instance of the compiler currently used\n   * @param {?} parser An instance of the parser currently used\n   * @param {?} missingTranslationHandler A handler for missing translations.\n   * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param {?=} isolate whether this service should use the store or not\n   */\n  function TranslateService(store, currentLoader, compiler, parser, missingTranslationHandler) {\n    var useDefaultLang = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    var isolate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n    _classCallCheck(this, TranslateService);\n\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n  }\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n\n\n  _createClass(TranslateService, [{\n    key: \"setDefaultLang\",\n\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n    value: function setDefaultLang(lang) {\n      var _this3 = this;\n\n      if (lang === this.defaultLang) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the defaultLang immediately\n        if (!this.defaultLang) {\n          this.defaultLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(function (res) {\n          _this3.changeDefaultLang(lang);\n        });\n      } else {\n        // we already have this language\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDefaultLang\",\n    value: function getDefaultLang() {\n      return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(lang) {\n      var _this4 = this;\n\n      // don't change the language if the language given is already selected\n      if (lang === this.currentLang) {\n        return of(this.translations[lang]);\n      }\n\n      var\n      /** @type {?} */\n      pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n          this.currentLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(function (res) {\n          _this4.changeLang(lang);\n        });\n        return pending;\n      } else {\n        // we have this language, return an Observable\n        this.changeLang(lang);\n        return of(this.translations[lang]);\n      }\n    }\n    /**\n     * Retrieves the given translations\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveTranslations\",\n    value: function retrieveTranslations(lang) {\n      var\n      /** @type {?} */\n      pending; // if this language is unavailable, ask for it\n\n      if (typeof this.translations[lang] === \"undefined\") {\n        this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n        pending = this._translationRequests[lang];\n      }\n\n      return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation(lang) {\n      var _this5 = this;\n\n      this.pending = true;\n      this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n      this.loadingTranslations.pipe(take(1)).subscribe(function (res) {\n        _this5.translations[lang] = _this5.compiler.compileTranslations(res, lang);\n\n        _this5.updateLangs();\n\n        _this5.pending = false;\n      }, function (err) {\n        _this5.pending = false;\n      });\n      return this.loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n\n  }, {\n    key: \"setTranslation\",\n    value: function setTranslation(lang, translations) {\n      var shouldMerge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      translations = this.compiler.compileTranslations(translations, lang);\n\n      if (shouldMerge && this.translations[lang]) {\n        this.translations[lang] = mergeDeep(this.translations[lang], translations);\n      } else {\n        this.translations[lang] = translations;\n      }\n\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLangs\",\n    value: function getLangs() {\n      return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"addLangs\",\n    value: function addLangs(langs) {\n      var _this6 = this;\n\n      langs.forEach(function (lang) {\n        if (_this6.langs.indexOf(lang) === -1) {\n          _this6.langs.push(lang);\n        }\n      });\n    }\n    /**\n     * Update the list of available langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateLangs\",\n    value: function updateLangs() {\n      this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"getParsedResult\",\n    value: function getParsedResult(translations, key, interpolateParams) {\n      var\n      /** @type {?} */\n      res;\n\n      if (key instanceof Array) {\n        var\n        /** @type {?} */\n        result = {},\n\n        /** @type {?} */\n        observables = false;\n\n        var _iterator = _createForOfIteratorHelper(key),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _k = _step.value;\n            result[_k] = this.getParsedResult(translations, _k, interpolateParams);\n\n            if (typeof result[_k].subscribe === \"function\") {\n              observables = true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (observables) {\n          var\n          /** @type {?} */\n          mergedObs;\n\n          var _iterator2 = _createForOfIteratorHelper(key),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var k = _step2.value;\n              var\n              /** @type {?} */\n              obs = typeof result[k].subscribe === \"function\" ? result[k] : of(\n              /** @type {?} */\n              result[k]);\n\n              if (typeof mergedObs === \"undefined\") {\n                mergedObs = obs;\n              } else {\n                mergedObs = merge(mergedObs, obs);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          return mergedObs.pipe(toArray(), map(function (arr) {\n            var\n            /** @type {?} */\n            obj = {};\n            arr.forEach(function (value, index) {\n              obj[key[index]] = value;\n            });\n            return obj;\n          }));\n        }\n\n        return result;\n      }\n\n      if (translations) {\n        res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n        res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\") {\n        var\n        /** @type {?} */\n        params = {\n          key: key,\n          translateService: this\n        };\n\n        if (typeof interpolateParams !== 'undefined') {\n          params.interpolateParams = interpolateParams;\n        }\n\n        res = this.missingTranslationHandler.handle(params);\n      }\n\n      return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key, interpolateParams) {\n      var _this7 = this;\n\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      } // check if we are loading a new translation to use\n\n\n      if (this.pending) {\n        return Observable.create(function (observer) {\n          var\n          /** @type {?} */\n          onComplete = function onComplete(res) {\n            observer.next(res);\n            observer.complete();\n          };\n\n          var\n          /** @type {?} */\n          onError = function onError(err) {\n            observer.error(err);\n          };\n\n          _this7.loadingTranslations.subscribe(function (res) {\n            res = _this7.getParsedResult(_this7.compiler.compileTranslations(res, _this7.currentLang), key, interpolateParams);\n\n            if (typeof res.subscribe === \"function\") {\n              res.subscribe(onComplete, onError);\n            } else {\n              onComplete(res);\n            }\n          }, onError);\n        });\n      } else {\n        var\n        /** @type {?} */\n        res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n        if (typeof res.subscribe === \"function\") {\n          return res;\n        } else {\n          return of(res);\n        }\n      }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream(key, interpolateParams) {\n      var _this8 = this;\n\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      }\n\n      return concat(this.get(key, interpolateParams), this.onLangChange.pipe(switchMap(function (event) {\n        var\n        /** @type {?} */\n        res = _this8.getParsedResult(event.translations, key, interpolateParams);\n\n        if (typeof res.subscribe === \"function\") {\n          return res;\n        } else {\n          return of(res);\n        }\n      })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"instant\",\n    value: function instant(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      }\n\n      var\n      /** @type {?} */\n      res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n      if (typeof res.subscribe !== \"undefined\") {\n        if (key instanceof Array) {\n          var\n          /** @type {?} */\n          obj = {};\n          key.forEach(function (value, index) {\n            obj[key[index]] = key[index];\n          });\n          return obj;\n        }\n\n        return key;\n      } else {\n        return res;\n      }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.currentLang;\n      this.translations[lang][key] = this.compiler.compile(value, lang);\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Changes the current lang\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeLang\",\n    value: function changeLang(lang) {\n      this.currentLang = lang;\n      this.onLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      }); // if there is no default lang, use the one that we just set\n\n      if (!this.defaultLang) {\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Changes the default lang\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeDefaultLang\",\n    value: function changeDefaultLang(lang) {\n      this.defaultLang = lang;\n      this.onDefaultLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"reloadLang\",\n    value: function reloadLang(lang) {\n      this.resetLang(lang);\n      return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"resetLang\",\n    value: function resetLang(lang) {\n      this._translationRequests[lang] = undefined;\n      this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBrowserLang\",\n    value: function getBrowserLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n\n      var\n      /** @type {?} */\n      browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n      if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n      }\n\n      if (browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n      }\n\n      return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBrowserCultureLang\",\n    value: function getBrowserCultureLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n\n      var\n      /** @type {?} */\n      browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n      return browserCultureLang;\n    }\n  }, {\n    key: \"onTranslationChange\",\n    get: function get() {\n      return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n  }, {\n    key: \"onLangChange\",\n    get: function get() {\n      return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDefaultLangChange\",\n    get: function get() {\n      return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"defaultLang\",\n    get: function get() {\n      return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n    ,\n    set: function set(defaultLang) {\n      if (this.isolate) {\n        this._defaultLang = defaultLang;\n      } else {\n        this.store.defaultLang = defaultLang;\n      }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n\n  }, {\n    key: \"currentLang\",\n    get: function get() {\n      return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n    ,\n    set: function set(currentLang) {\n      if (this.isolate) {\n        this._currentLang = currentLang;\n      } else {\n        this.store.currentLang = currentLang;\n      }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"langs\",\n    get: function get() {\n      return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n    ,\n    set: function set(langs) {\n      if (this.isolate) {\n        this._langs = langs;\n      } else {\n        this.store.langs = langs;\n      }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"translations\",\n    get: function get() {\n      return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n    ,\n    set: function set(translations) {\n      if (this.isolate) {\n        this._translations = translations;\n      } else {\n        this.store.translations = translations;\n      }\n    }\n  }]);\n\n  return TranslateService;\n}();\n\nTranslateService.ɵfac = function TranslateService_Factory(t) {\n  return new (t || TranslateService)(ɵngcc0.ɵɵinject(TranslateStore), ɵngcc0.ɵɵinject(TranslateLoader), ɵngcc0.ɵɵinject(TranslateCompiler), ɵngcc0.ɵɵinject(TranslateParser), ɵngcc0.ɵɵinject(MissingTranslationHandler), ɵngcc0.ɵɵinject(USE_DEFAULT_LANG), ɵngcc0.ɵɵinject(USE_STORE));\n};\n\nTranslateService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateService,\n  factory: TranslateService.ɵfac\n});\n/** @nocollapse */\n\nTranslateService.ctorParameters = function () {\n  return [{\n    type: TranslateStore\n  }, {\n    type: TranslateLoader\n  }, {\n    type: TranslateCompiler\n  }, {\n    type: TranslateParser\n  }, {\n    type: MissingTranslationHandler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_DEFAULT_LANG]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_STORE]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TranslateStore\n    }, {\n      type: TranslateLoader\n    }, {\n      type: TranslateCompiler\n    }, {\n      type: TranslateParser\n    }, {\n      type: MissingTranslationHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_DEFAULT_LANG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_STORE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslateDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} translateService\n   * @param {?} element\n   * @param {?} _ref\n   */\n  function TranslateDirective(translateService, element, _ref) {\n    var _this9 = this;\n\n    _classCallCheck(this, TranslateDirective);\n\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(function (event) {\n        if (event.lang === _this9.translateService.currentLang) {\n          _this9.checkNodes(true, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(function (event) {\n        _this9.checkNodes(true, event.translations);\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(function (event) {\n        _this9.checkNodes(true);\n      });\n    }\n  }\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  _createClass(TranslateDirective, [{\n    key: \"ngAfterViewChecked\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterViewChecked() {\n      this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n\n  }, {\n    key: \"checkNodes\",\n    value: function checkNodes() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var translations = arguments.length > 1 ? arguments[1] : undefined;\n      var\n      /** @type {?} */\n      nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n      if (!nodes.length) {\n        // we add the key as content\n        this.setContent(this.element.nativeElement, this.key);\n        nodes = this.element.nativeElement.childNodes;\n      }\n\n      for (var\n      /** @type {?} */\n      i = 0; i < nodes.length; ++i) {\n        var\n        /** @type {?} */\n        node = nodes[i];\n\n        if (node.nodeType === 3) {\n          // node type 3 is a text node\n          var\n          /** @type {?} */\n          key = void 0;\n\n          if (this.key) {\n            key = this.key;\n\n            if (forceUpdate) {\n              node.lastKey = null;\n            }\n          } else {\n            var\n            /** @type {?} */\n            content = this.getContent(node);\n            var\n            /** @type {?} */\n            trimmedContent = content.trim();\n\n            if (trimmedContent.length) {\n              // we want to use the content as a key, not the translation value\n              if (content !== node.currentValue) {\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = this.getContent(node);\n              } else if (node.originalContent && forceUpdate) {\n                // the content seems ok, but the lang has changed\n                node.lastKey = null; // the current content is the translation, not the key, use the last real content as key\n\n                key = node.originalContent.trim();\n              }\n            }\n          }\n\n          this.updateValue(key, node, translations);\n        }\n      }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(key, node, translations) {\n      var _this10 = this;\n\n      if (key) {\n        if (node.lastKey === key && this.lastParams === this.currentParams) {\n          return;\n        }\n\n        this.lastParams = this.currentParams;\n\n        var\n        /** @type {?} */\n        onTranslation = function onTranslation(res) {\n          if (res !== key) {\n            node.lastKey = key;\n          }\n\n          if (!node.originalContent) {\n            node.originalContent = _this10.getContent(node);\n          }\n\n          node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n          _this10.setContent(node, _this10.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n          _this10._ref.markForCheck();\n        };\n\n        if (isDefined(translations)) {\n          var\n          /** @type {?} */\n          res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onTranslation);\n          } else {\n            onTranslation(res);\n          }\n        } else {\n          this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n        }\n      }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent(node) {\n      return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(node, content) {\n      if (isDefined(node.textContent)) {\n        node.textContent = content;\n      } else {\n        node.data = content;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.onLangChangeSub) {\n        this.onLangChangeSub.unsubscribe();\n      }\n\n      if (this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub.unsubscribe();\n      }\n\n      if (this.onTranslationChangeSub) {\n        this.onTranslationChangeSub.unsubscribe();\n      }\n    }\n  }, {\n    key: \"translate\",\n    set: function set(key) {\n      if (key) {\n        this.key = key;\n        this.checkNodes();\n      }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"translateParams\",\n    set: function set(params) {\n      if (!equals(this.currentParams, params)) {\n        this.currentParams = params;\n        this.checkNodes(true);\n      }\n    }\n  }]);\n\n  return TranslateDirective;\n}();\n\nTranslateDirective.ɵfac = function TranslateDirective_Factory(t) {\n  return new (t || TranslateDirective)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTranslateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TranslateDirective,\n  selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n  inputs: {\n    translate: \"translate\",\n    translateParams: \"translateParams\"\n  }\n});\n/** @nocollapse */\n\nTranslateDirective.ctorParameters = function () {\n  return [{\n    type: TranslateService\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTranslateDirective.propDecorators = {\n  \"translate\": [{\n    type: Input\n  }],\n  \"translateParams\": [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[translate],[ngx-translate]'\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslatePipe = /*#__PURE__*/function () {\n  /**\n   * @param {?} translate\n   * @param {?} _ref\n   */\n  function TranslatePipe(translate, _ref) {\n    _classCallCheck(this, TranslatePipe);\n\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n  }\n  /**\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @param {?=} translations\n   * @return {?}\n   */\n\n\n  _createClass(TranslatePipe, [{\n    key: \"updateValue\",\n    value: function updateValue(key, interpolateParams, translations) {\n      var _this11 = this;\n\n      var\n      /** @type {?} */\n      onTranslation = function onTranslation(res) {\n        _this11.value = res !== undefined ? res : key;\n        _this11.lastKey = key;\n\n        _this11._ref.markForCheck();\n      };\n\n      if (translations) {\n        var\n        /** @type {?} */\n        res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n        if (typeof res.subscribe === 'function') {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      }\n\n      this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n\n  }, {\n    key: \"transform\",\n    value: function transform(query) {\n      var _this12 = this;\n\n      if (!query || query.length === 0) {\n        return query;\n      } // if we ask another time for the same key, return the last value\n\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n        return this.value;\n      }\n\n      var\n      /** @type {?} */\n      interpolateParams;\n\n      if (isDefined(args[0]) && args.length) {\n        if (typeof args[0] === 'string' && args[0].length) {\n          // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n          // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n          var\n          /** @type {?} */\n          validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n          try {\n            interpolateParams = JSON.parse(validArgs);\n          } catch (\n          /** @type {?} */\n          e) {\n            throw new SyntaxError(\"Wrong parameter in TranslatePipe. Expected a valid Object, received: \".concat(args[0]));\n          }\n        } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n          interpolateParams = args[0];\n        }\n      } // store the query, in case it changes\n\n\n      this.lastKey = query; // store the params, in case they change\n\n      this.lastParams = args; // set the value\n\n      this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n      this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n      if (!this.onTranslationChange) {\n        this.onTranslationChange = this.translate.onTranslationChange.subscribe(function (event) {\n          if (_this12.lastKey && event.lang === _this12.translate.currentLang) {\n            _this12.lastKey = null;\n\n            _this12.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onLangChange event, in case the language changes\n\n\n      if (!this.onLangChange) {\n        this.onLangChange = this.translate.onLangChange.subscribe(function (event) {\n          if (_this12.lastKey) {\n            _this12.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            _this12.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n      if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(function () {\n          if (_this12.lastKey) {\n            _this12.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            _this12.updateValue(query, interpolateParams);\n          }\n        });\n      }\n\n      return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n      }\n\n      if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n      }\n\n      if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._dispose();\n    }\n  }]);\n\n  return TranslatePipe;\n}();\n\nTranslatePipe.ɵfac = function TranslatePipe_Factory(t) {\n  return new (t || TranslatePipe)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵinjectPipeChangeDetectorRef());\n};\n\nTranslatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: TranslatePipe,\n  pure: false\n});\nTranslatePipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslatePipe,\n  factory: TranslatePipe.ɵfac\n});\n/** @nocollapse */\n\nTranslatePipe.ctorParameters = function () {\n  return [{\n    type: TranslateService\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslatePipe, [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      pure: false // required to update the value when the promise is resolved\n\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslateModule = /*#__PURE__*/function () {\n  function TranslateModule() {\n    _classCallCheck(this, TranslateModule);\n  }\n\n  _createClass(TranslateModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    value: function forRoot() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, TranslateStore, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, TranslateService]\n      };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, TranslateService]\n      };\n    }\n  }]);\n\n  return TranslateModule;\n}();\n\nTranslateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TranslateModule\n});\nTranslateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TranslateModule_Factory(t) {\n    return new (t || TranslateModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TranslateModule, {\n    declarations: [TranslatePipe, TranslateDirective],\n    exports: [TranslatePipe, TranslateDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { TranslateModule, TranslateLoader, TranslateFakeLoader, USE_STORE, USE_DEFAULT_LANG, TranslateService, MissingTranslationHandler, FakeMissingTranslationHandler, TranslateParser, TranslateDefaultParser, TranslateCompiler, TranslateFakeCompiler, TranslateDirective, TranslatePipe, TranslateStore };","map":null,"metadata":{},"sourceType":"module"}