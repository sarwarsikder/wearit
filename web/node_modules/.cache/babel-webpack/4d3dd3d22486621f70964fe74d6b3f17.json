{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/wearit/web/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { filter, first, map, switchMap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Component, Input, ViewChild, EventEmitter, Output, Directive, Optional, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe-instance.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as Éµngcc0 from '@angular/core';\nvar _c0 = [\"stripeElementRef\"];\n\nvar StripeInstance = /*#__PURE__*/function () {\n  /**\n   * @param {?} loader\n   * @param {?} window\n   * @param {?} key\n   * @param {?=} options\n   */\n  function StripeInstance(loader, window, key, options) {\n    var _this = this;\n\n    _classCallCheck(this, StripeInstance);\n\n    this.loader = loader;\n    this.window = window;\n    this.key = key;\n    this.options = options;\n    this.stripe$ = new BehaviorSubject(undefined);\n    this.stripe = this.stripe$.asObservable().pipe(filter(\n    /**\n    * @param {?} stripe\n    * @return {?}\n    */\n    function (stripe) {\n      return Boolean(stripe);\n    }));\n    this.loader.asStream().pipe(filter(\n    /**\n    * @param {?} status\n    * @return {?}\n    */\n    function (status) {\n      return status.loaded === true;\n    }), first(), map(\n    /**\n    * @return {?}\n    */\n    function () {\n      return (\n        /** @type {?} */\n        _this.window.getNativeWindow().Stripe\n      );\n    })).subscribe(\n    /**\n    * @param {?} stripeInstance\n    * @return {?}\n    */\n    function (stripeInstance) {\n      /** @type {?} */\n      var stripe = _this.options ?\n      /** @type {?} */\n      stripeInstance(_this.key, _this.options) :\n      /** @type {?} */\n      stripeInstance(_this.key);\n\n      _this.stripe$.next(stripe);\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(StripeInstance, [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      return this.stripe$.getValue();\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"elements\",\n    value: function elements(options) {\n      return this.stripe$.asObservable().pipe(filter(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return Boolean(stripe);\n      }), map(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return stripe.elements(options);\n      }), first());\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"redirectToCheckout\",\n    value: function redirectToCheckout(options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.redirectToCheckout(options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitPayment\",\n    value: function confirmAuBecsDebitPayment(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmAuBecsDebitPayment(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmBancontactPayment\",\n    value: function confirmBancontactPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmBancontactPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardPayment\",\n    value: function confirmCardPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmCardPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmEpsPayment\",\n    value: function confirmEpsPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmEpsPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmFpxPayment\",\n    value: function confirmFpxPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmFpxPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmGiropayPayment\",\n    value: function confirmGiropayPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmGiropayPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmIdealPayment\",\n    value: function confirmIdealPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmIdealPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmP24Payment\",\n    value: function confirmP24Payment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmP24Payment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitPayment\",\n    value: function confirmSepaDebitPayment(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmSepaDebitPayment(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardAction\",\n    value: function handleCardAction(clientSecret) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.handleCardAction(clientSecret));\n      }), first());\n    }\n    /**\n     * @param {?} paymentMethodData\n     * @return {?}\n     */\n\n  }, {\n    key: \"createPaymentMethod\",\n    value: function createPaymentMethod(paymentMethodData) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.createPaymentMethod(paymentMethodData));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrievePaymentIntent\",\n    value: function retrievePaymentIntent(clientSecret) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.retrievePaymentIntent(clientSecret));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitSetup\",\n    value: function confirmAuBecsDebitSetup(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmAuBecsDebitSetup(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardSetup\",\n    value: function confirmCardSetup(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmCardSetup(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitSetup\",\n    value: function confirmSepaDebitSetup(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmSepaDebitSetup(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSetupIntent\",\n    value: function retrieveSetupIntent(clientSecret) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmSepaDebitSetup(clientSecret));\n      }), first());\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"paymentRequest\",\n    value: function paymentRequest(options) {\n      /** @type {?} */\n      var stripe = this.getInstance();\n      return stripe ? stripe.paymentRequest(options) : undefined;\n    }\n    /**\n     * @param {?} tokenType\n     * @param {?} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"createToken\",\n    value: function createToken(tokenType, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.createToken(tokenType, data));\n      }), first());\n    }\n    /**\n     * @param {?} a\n     * @param {?=} b\n     * @return {?}\n     */\n\n  }, {\n    key: \"createSource\",\n    value: function createSource(a, b) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.createSource(a, b));\n      }), first());\n    }\n    /**\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSource\",\n    value: function retrieveSource(source) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.retrieveSource(source));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardPayment\",\n    value: function handleCardPayment(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.handleCardPayment(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmPaymentIntent\",\n    value: function confirmPaymentIntent(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.confirmPaymentIntent(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardSetup\",\n    value: function handleCardSetup(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.handleCardSetup(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSetupIntent\",\n    value: function confirmSetupIntent(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.confirmSetupIntent(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleFpxPayment\",\n    value: function handleFpxPayment(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.handleFpxPayment(clientSecret, element, data));\n      }), first());\n    }\n  }]);\n\n  return StripeInstance;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/interfaces/ngx-stripe.interface.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');\n/** @type {?} */\n\nvar STRIPE_OPTIONS = new InjectionToken('Stripe Options');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/window-ref.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar WindowRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} platformId\n   */\n  function WindowRef(platformId) {\n    _classCallCheck(this, WindowRef);\n\n    this.platformId = platformId;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(WindowRef, [{\n    key: \"getNativeWindow\",\n    value: function getNativeWindow() {\n      if (isPlatformBrowser(this.platformId)) {\n        return window;\n      }\n\n      return (\n        /** @type {?} */\n        {}\n      );\n    }\n  }]);\n\n  return WindowRef;\n}();\n\nWindowRef.Éµfac = function WindowRef_Factory(t) {\n  return new (t || WindowRef)(Éµngcc0.ÉµÉµinject(PLATFORM_ID));\n};\n\nWindowRef.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: WindowRef,\n  factory: WindowRef.Éµfac\n});\n\nWindowRef.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(WindowRef, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/document-ref.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar DocumentRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} platformId\n   */\n  function DocumentRef(platformId) {\n    _classCallCheck(this, DocumentRef);\n\n    this.platformId = platformId;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(DocumentRef, [{\n    key: \"getNativeDocument\",\n    value: function getNativeDocument() {\n      if (isPlatformBrowser(this.platformId)) {\n        return document;\n      }\n\n      return (\n        /** @type {?} */\n        {}\n      );\n    }\n  }]);\n\n  return DocumentRef;\n}();\n\nDocumentRef.Éµfac = function DocumentRef_Factory(t) {\n  return new (t || DocumentRef)(Éµngcc0.ÉµÉµinject(PLATFORM_ID));\n};\n\nDocumentRef.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: DocumentRef,\n  factory: DocumentRef.Éµfac\n});\n\nDocumentRef.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(DocumentRef, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/api-loader.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar LazyStripeAPILoader = /*#__PURE__*/function () {\n  /**\n   * @param {?} platformId\n   * @param {?} window\n   * @param {?} document\n   */\n  function LazyStripeAPILoader(platformId, window, document) {\n    _classCallCheck(this, LazyStripeAPILoader);\n\n    this.platformId = platformId;\n    this.window = window;\n    this.document = document;\n    this.status = new BehaviorSubject({\n      error: false,\n      loaded: false,\n      loading: false\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(LazyStripeAPILoader, [{\n    key: \"asStream\",\n    value: function asStream() {\n      this.load();\n      return this.status.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      return this.status.getValue().loaded;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this2 = this;\n\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var status = this.status.getValue();\n\n      if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      } else if (!status.loaded && !status.loading) {\n        this.status.next(Object.assign({}, status, {\n          loading: true\n        }));\n        /** @type {?} */\n\n        var script = this.document.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = 'https://js.stripe.com/v3/';\n\n        script.onload =\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2.status.next({\n            error: false,\n            loaded: true,\n            loading: false\n          });\n        };\n\n        script.onerror =\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2.status.next({\n            error: true,\n            loaded: false,\n            loading: false\n          });\n        };\n\n        this.document.getNativeDocument().body.appendChild(script);\n      }\n    }\n  }]);\n\n  return LazyStripeAPILoader;\n}();\n\nLazyStripeAPILoader.Éµfac = function LazyStripeAPILoader_Factory(t) {\n  return new (t || LazyStripeAPILoader)(Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(WindowRef), Éµngcc0.ÉµÉµinject(DocumentRef));\n};\n\nLazyStripeAPILoader.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: LazyStripeAPILoader,\n  factory: LazyStripeAPILoader.Éµfac\n});\n\nLazyStripeAPILoader.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: WindowRef\n  }, {\n    type: DocumentRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(LazyStripeAPILoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: WindowRef\n    }, {\n      type: DocumentRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeService = /*#__PURE__*/function () {\n  /**\n   * @param {?} key\n   * @param {?} options\n   * @param {?} loader\n   * @param {?} window\n   */\n  function StripeService(key, options, loader, window) {\n    _classCallCheck(this, StripeService);\n\n    this.key = key;\n    this.options = options;\n    this.loader = loader;\n    this.window = window;\n\n    if (key) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(StripeService, [{\n    key: \"getStripeReference\",\n    value: function getStripeReference() {\n      var _this3 = this;\n\n      return this.loader.asStream().pipe(filter(\n      /**\n      * @param {?} status\n      * @return {?}\n      */\n      function (status) {\n        return status.loaded === true;\n      }), map(\n      /**\n      * @return {?}\n      */\n      function () {\n        return (\n          /** @type {?} */\n          _this3.window.getNativeWindow().Stripe\n        );\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getInstance\",\n    value: function getInstance() {\n      return this.stripe.getInstance();\n    }\n    /**\n     * @param {?} key\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"setKey\",\n    value: function setKey(key, options) {\n      return this.changeKey(key, options);\n    }\n    /**\n     * @param {?} key\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeKey\",\n    value: function changeKey(key, options) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n      return this.stripe;\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"elements\",\n    value: function elements(options) {\n      return this.stripe.elements(options);\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"redirectToCheckout\",\n    value: function redirectToCheckout(options) {\n      return this.stripe.redirectToCheckout(options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitPayment\",\n    value: function confirmAuBecsDebitPayment(clientSecret, data) {\n      return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmBancontactPayment\",\n    value: function confirmBancontactPayment(clientSecret, data, options) {\n      return this.stripe.confirmBancontactPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardPayment\",\n    value: function confirmCardPayment(clientSecret, data, options) {\n      return this.stripe.confirmCardPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmEpsPayment\",\n    value: function confirmEpsPayment(clientSecret, data, options) {\n      return this.stripe.confirmEpsPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmFpxPayment\",\n    value: function confirmFpxPayment(clientSecret, data, options) {\n      return this.stripe.confirmFpxPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmGiropayPayment\",\n    value: function confirmGiropayPayment(clientSecret, data, options) {\n      return this.stripe.confirmGiropayPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmIdealPayment\",\n    value: function confirmIdealPayment(clientSecret, data, options) {\n      return this.stripe.confirmIdealPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmP24Payment\",\n    value: function confirmP24Payment(clientSecret, data, options) {\n      return this.stripe.confirmP24Payment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitPayment\",\n    value: function confirmSepaDebitPayment(clientSecret, data) {\n      return this.stripe.confirmSepaDebitPayment(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardAction\",\n    value: function handleCardAction(clientSecret) {\n      return this.stripe.handleCardAction(clientSecret);\n    }\n    /**\n     * @param {?} paymentMethodData\n     * @return {?}\n     */\n\n  }, {\n    key: \"createPaymentMethod\",\n    value: function createPaymentMethod(paymentMethodData) {\n      return this.stripe.createPaymentMethod(paymentMethodData);\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrievePaymentIntent\",\n    value: function retrievePaymentIntent(clientSecret) {\n      return this.stripe.retrievePaymentIntent(clientSecret);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitSetup\",\n    value: function confirmAuBecsDebitSetup(clientSecret, data) {\n      return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardSetup\",\n    value: function confirmCardSetup(clientSecret, data, options) {\n      return this.stripe.confirmCardSetup(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitSetup\",\n    value: function confirmSepaDebitSetup(clientSecret, data) {\n      return this.stripe.confirmSepaDebitSetup(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSetupIntent\",\n    value: function retrieveSetupIntent(clientSecret) {\n      return this.stripe.retrieveSetupIntent(clientSecret);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"paymentRequest\",\n    value: function paymentRequest(options) {\n      return this.stripe.paymentRequest(options);\n    }\n    /**\n     * @param {?} tokenType\n     * @param {?} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"createToken\",\n    value: function createToken(tokenType, data) {\n      return this.stripe.createToken(tokenType, data);\n    }\n    /**\n     * @param {?} a\n     * @param {?=} b\n     * @return {?}\n     */\n\n  }, {\n    key: \"createSource\",\n    value: function createSource(a, b) {\n      return this.stripe.createSource(a, b);\n    }\n    /**\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSource\",\n    value: function retrieveSource(source) {\n      return this.stripe.retrieveSource(source);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardPayment\",\n    value: function handleCardPayment(clientSecret, element, data) {\n      return this.stripe.handleCardPayment(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmPaymentIntent\",\n    value: function confirmPaymentIntent(clientSecret, element, data) {\n      return this.stripe.confirmPaymentIntent(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardSetup\",\n    value: function handleCardSetup(clientSecret, element, data) {\n      return this.stripe.handleCardSetup(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSetupIntent\",\n    value: function confirmSetupIntent(clientSecret, element, data) {\n      return this.stripe.confirmSetupIntent(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleFpxPayment\",\n    value: function handleFpxPayment(clientSecret, element, data) {\n      return this.stripe.handleFpxPayment(clientSecret, element, data);\n    }\n  }]);\n\n  return StripeService;\n}();\n\nStripeService.Éµfac = function StripeService_Factory(t) {\n  return new (t || StripeService)(Éµngcc0.ÉµÉµinject(STRIPE_PUBLISHABLE_KEY), Éµngcc0.ÉµÉµinject(STRIPE_OPTIONS), Éµngcc0.ÉµÉµinject(LazyStripeAPILoader), Éµngcc0.ÉµÉµinject(WindowRef));\n};\n\nStripeService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: StripeService,\n  factory: StripeService.Éµfac\n});\n\nStripeService.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_PUBLISHABLE_KEY]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_OPTIONS]\n    }]\n  }, {\n    type: LazyStripeAPILoader\n  }, {\n    type: WindowRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_PUBLISHABLE_KEY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_OPTIONS]\n      }]\n    }, {\n      type: LazyStripeAPILoader\n    }, {\n      type: WindowRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe-elements.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeElementsService = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeService\n   */\n  function StripeElementsService(stripeService) {\n    _classCallCheck(this, StripeElementsService);\n\n    this.stripeService = stripeService;\n  }\n  /**\n   * @param {?} stripe\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(StripeElementsService, [{\n    key: \"elements\",\n    value: function elements(stripe) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (stripe) {\n        if (Object.keys(options).length > 0) {\n          return stripe.elements(options);\n        }\n\n        return stripe.elements();\n      } else {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n\n        return this.stripeService.elements();\n      }\n    }\n    /**\n     * @param {?} stripe\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"paymentRequest\",\n    value: function paymentRequest(stripe, options) {\n      return stripe ? stripe.paymentRequest(options) : this.stripeService.paymentRequest(options);\n    }\n    /**\n     * @param {?} options\n     * @param {?} containerClass\n     * @return {?}\n     */\n\n  }, {\n    key: \"mergeOptions\",\n    value: function mergeOptions(options, containerClass) {\n      if (!containerClass || options && options.classes) {\n        return options || {};\n      }\n\n      if (!options || !options.classes) {\n        return Object.assign({}, options || {}, {\n          classes: {\n            base: containerClass,\n            complete: \"\".concat(containerClass, \"--complete\"),\n            empty: \"\".concat(containerClass, \"--empty\"),\n            focus: \"\".concat(containerClass, \"--focus\"),\n            invalid: \"\".concat(containerClass, \"--invalid\"),\n            webkitAutoFill: \"\".concat(containerClass, \"--webkit-autoFill\")\n          }\n        });\n      }\n\n      return options || {};\n    }\n  }]);\n\n  return StripeElementsService;\n}();\n\nStripeElementsService.Éµfac = function StripeElementsService_Factory(t) {\n  return new (t || StripeElementsService)(Éµngcc0.ÉµÉµinject(StripeService));\n};\n\nStripeElementsService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: StripeElementsService,\n  factory: StripeElementsService.Éµfac\n});\n\nStripeElementsService.ctorParameters = function () {\n  return [{\n    type: StripeService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeElementsService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StripeService\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeCardComponent(stripeElementsService) {\n    _classCallCheck(this, StripeCardComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context2.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context2.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCard\",\n    value: function getCard() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this4 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('card', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this4.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeCardComponent;\n}();\n\nStripeCardComponent.Éµfac = function StripeCardComponent_Factory(t) {\n  return new (t || StripeCardComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeCardComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardComponent,\n  selectors: [[\"ngx-stripe-card\"]],\n  viewQuery: function StripeCardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeCardComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/card-group.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardGroupDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeCardGroupDirective(stripeElementsService) {\n    _classCallCheck(this, StripeCardGroupDirective);\n\n    this.stripeElementsService = stripeElementsService;\n    this.elements = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardGroupDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var elementsOptions, stripe;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                elementsOptions = this.elementsOptions;\n                /** @type {?} */\n\n                stripe = this.stripe;\n\n                if (!(changes.elementsOptions || changes.stripe || !this._elements)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.stripeElementsService.elements(stripe, elementsOptions).toPromise();\n\n              case 6:\n                this._elements = _context3.sent;\n                this.elements.emit(this._elements);\n\n              case 8:\n                this.state = 'ready';\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context4.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this._elements = _context4.sent;\n                this.elements.emit(this._elements);\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return StripeCardGroupDirective;\n}();\n\nStripeCardGroupDirective.Éµfac = function StripeCardGroupDirective_Factory(t) {\n  return new (t || StripeCardGroupDirective)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeCardGroupDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: StripeCardGroupDirective,\n  selectors: [[\"ngx-stripe-card-group\"], [\"\", \"ngxStripeCardGroup\", \"\"]],\n  inputs: {\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    elements: \"elements\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n\nStripeCardGroupDirective.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeCardGroupDirective.propDecorators = {\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  elements: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardGroupDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    elements: [{\n      type: Output\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card-number.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardNumberComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   * @param {?} cardGroup\n   */\n  function StripeCardNumberComponent(stripeElementsService, cardGroup) {\n    _classCallCheck(this, StripeCardNumberComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.cardGroup = cardGroup;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardNumberComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (changes.options || changes.containerClass) {\n                  this.setupElement('options');\n                }\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this5 = this;\n\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        /**\n        * @param {?} elements\n        * @return {?}\n        */\n        function (elements) {\n          _this5.elements = elements;\n\n          _this5.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardNumberComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCardNumber\",\n    value: function getCardNumber() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupElement\",\n    value: function setupElement(source) {\n      var _this6 = this;\n\n      /** @type {?} */\n      var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardNumber', options);\n        this.element.on('change',\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        function (ev) {\n          return _this6.change.emit(ev);\n        });\n        this.element.on('blur',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.blur.emit();\n        });\n        this.element.on('focus',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.focus.emit();\n        });\n        this.element.on('ready',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.ready.emit();\n        });\n        this.element.on('escape',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.escape.emit();\n        });\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }]);\n\n  return StripeCardNumberComponent;\n}();\n\nStripeCardNumberComponent.Éµfac = function StripeCardNumberComponent_Factory(t) {\n  return new (t || StripeCardNumberComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService), Éµngcc0.ÉµÉµdirectiveInject(StripeCardGroupDirective, 8));\n};\n\nStripeCardNumberComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardNumberComponent,\n  selectors: [[\"ngx-stripe-card-number\"]],\n  viewQuery: function StripeCardNumberComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardNumberComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardNumberComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }, {\n    type: StripeCardGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nStripeCardNumberComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardNumberComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card-number',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }, {\n      type: StripeCardGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card-expiry.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardExpiryComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   * @param {?} cardGroup\n   */\n  function StripeCardExpiryComponent(stripeElementsService, cardGroup) {\n    _classCallCheck(this, StripeCardExpiryComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.cardGroup = cardGroup;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardExpiryComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (changes.options || changes.containerClass) {\n                  this.setupElement('options');\n                }\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        /**\n        * @param {?} elements\n        * @return {?}\n        */\n        function (elements) {\n          _this7.elements = elements;\n\n          _this7.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCardExpiry\",\n    value: function getCardExpiry() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupElement\",\n    value: function setupElement(source) {\n      var _this8 = this;\n\n      /** @type {?} */\n      var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardExpiry', options);\n        this.element.on('change',\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        function (ev) {\n          return _this8.change.emit(ev);\n        });\n        this.element.on('blur',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.blur.emit();\n        });\n        this.element.on('focus',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.focus.emit();\n        });\n        this.element.on('ready',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.ready.emit();\n        });\n        this.element.on('escape',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.escape.emit();\n        });\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }]);\n\n  return StripeCardExpiryComponent;\n}();\n\nStripeCardExpiryComponent.Éµfac = function StripeCardExpiryComponent_Factory(t) {\n  return new (t || StripeCardExpiryComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService), Éµngcc0.ÉµÉµdirectiveInject(StripeCardGroupDirective, 8));\n};\n\nStripeCardExpiryComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardExpiryComponent,\n  selectors: [[\"ngx-stripe-card-expiry\"]],\n  viewQuery: function StripeCardExpiryComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardExpiryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardExpiryComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }, {\n    type: StripeCardGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nStripeCardExpiryComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardExpiryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card-expiry',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }, {\n      type: StripeCardGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card-cvc.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardCvcComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   * @param {?} cardGroup\n   */\n  function StripeCardCvcComponent(stripeElementsService, cardGroup) {\n    _classCallCheck(this, StripeCardCvcComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.cardGroup = cardGroup;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardCvcComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (changes.options || changes.containerClass) {\n                  this.setupElement('options');\n                }\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this9 = this;\n\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        /**\n        * @param {?} elements\n        * @return {?}\n        */\n        function (elements) {\n          _this9.elements = elements;\n\n          _this9.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardCvcComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCardCvc\",\n    value: function getCardCvc() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupElement\",\n    value: function setupElement(source) {\n      var _this10 = this;\n\n      /** @type {?} */\n      var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardCvc', options);\n        this.element.on('change',\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        function (ev) {\n          return _this10.change.emit(ev);\n        });\n        this.element.on('blur',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.blur.emit();\n        });\n        this.element.on('focus',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.focus.emit();\n        });\n        this.element.on('ready',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.ready.emit();\n        });\n        this.element.on('escape',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.escape.emit();\n        });\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }]);\n\n  return StripeCardCvcComponent;\n}();\n\nStripeCardCvcComponent.Éµfac = function StripeCardCvcComponent_Factory(t) {\n  return new (t || StripeCardCvcComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService), Éµngcc0.ÉµÉµdirectiveInject(StripeCardGroupDirective, 8));\n};\n\nStripeCardCvcComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardCvcComponent,\n  selectors: [[\"ngx-stripe-card-cvc\"]],\n  viewQuery: function StripeCardCvcComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardCvcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardCvcComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }, {\n    type: StripeCardGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nStripeCardCvcComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardCvcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card-cvc',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }, {\n      type: StripeCardGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/fpx-bank.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeFpxBankComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeFpxBankComponent(stripeElementsService) {\n    _classCallCheck(this, StripeFpxBankComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeFpxBankComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context8.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context9.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context9.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context9.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFpxBank\",\n    value: function getFpxBank() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this11 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        accountHolderType: 'individual'\n      };\n      this.element = this.elements.create('fpxBank', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this11.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeFpxBankComponent;\n}();\n\nStripeFpxBankComponent.Éµfac = function StripeFpxBankComponent_Factory(t) {\n  return new (t || StripeFpxBankComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeFpxBankComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeFpxBankComponent,\n  selectors: [[\"ngx-stripe-fpx-bank\"]],\n  viewQuery: function StripeFpxBankComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeFpxBankComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeFpxBankComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeFpxBankComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeFpxBankComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-fpx-bank',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/ideal-bank.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeIdealBankComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeIdealBankComponent(stripeElementsService) {\n    _classCallCheck(this, StripeIdealBankComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeIdealBankComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context10.next = 8;\n                  break;\n                }\n\n                _context10.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context10.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context11.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context11.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context11.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getIdealBank\",\n    value: function getIdealBank() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this12 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('idealBank', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this12.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeIdealBankComponent;\n}();\n\nStripeIdealBankComponent.Éµfac = function StripeIdealBankComponent_Factory(t) {\n  return new (t || StripeIdealBankComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeIdealBankComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeIdealBankComponent,\n  selectors: [[\"ngx-stripe-ideal-bank\"]],\n  viewQuery: function StripeIdealBankComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeIdealBankComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeIdealBankComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeIdealBankComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeIdealBankComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-ideal-bank',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/iban.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeIbanComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeIbanComponent(stripeElementsService) {\n    _classCallCheck(this, StripeIbanComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeIbanComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context12.next = 8;\n                  break;\n                }\n\n                _context12.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context12.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context13.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context13.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context13.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getIban\",\n    value: function getIban() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this13 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('iban', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this13.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeIbanComponent;\n}();\n\nStripeIbanComponent.Éµfac = function StripeIbanComponent_Factory(t) {\n  return new (t || StripeIbanComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeIbanComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeIbanComponent,\n  selectors: [[\"ngx-stripe-iban\"]],\n  viewQuery: function StripeIbanComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeIbanComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeIbanComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeIbanComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeIbanComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-iban',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/au-bank-account.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeAuBankAccountComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeAuBankAccountComponent(stripeElementsService) {\n    _classCallCheck(this, StripeAuBankAccountComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeAuBankAccountComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context14.next = 8;\n                  break;\n                }\n\n                _context14.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context14.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context15.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context15.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAuBankAccount\",\n    value: function getAuBankAccount() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this14 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('auBankAccount', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this14.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeAuBankAccountComponent;\n}();\n\nStripeAuBankAccountComponent.Éµfac = function StripeAuBankAccountComponent_Factory(t) {\n  return new (t || StripeAuBankAccountComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeAuBankAccountComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeAuBankAccountComponent,\n  selectors: [[\"ngx-stripe-au-bank-account\"]],\n  viewQuery: function StripeAuBankAccountComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeAuBankAccountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeAuBankAccountComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeAuBankAccountComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeAuBankAccountComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-au-bank-account',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/payment-request-button.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripePaymentRequestButtonComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripePaymentRequestButtonComponent(stripeElementsService) {\n    _classCallCheck(this, StripePaymentRequestButtonComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.change = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.token = new EventEmitter();\n    this.paymentMethod = new EventEmitter();\n    this.source = new EventEmitter();\n    this.cancel = new EventEmitter();\n    this.shippingaddresschange = new EventEmitter();\n    this.shippingoptionchange = new EventEmitter();\n    this.notavailable = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripePaymentRequestButtonComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var _this15 = this;\n\n        var options, elementsOptions, stripe, updateElements, elements;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                /** @type {?} */\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                elementsOptions = this.elementsOptions;\n                /** @type {?} */\n\n                stripe = this.stripe;\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context16.next = 10;\n                  break;\n                }\n\n                _context16.next = 7;\n                return this.stripeElementsService.elements(stripe, elementsOptions).toPromise();\n\n              case 7:\n                elements = _context16.sent;\n                this.elements = elements;\n                updateElements = true;\n\n              case 10:\n                if (changes.paymentOptions && this.paymentRequest) {\n                  this.updateRequest(this.paymentOptions);\n                }\n\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);\n                    this.paymentRequest.on('token',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.token.emit(ev);\n                    });\n                    this.paymentRequest.on('paymentmethod',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.paymentMethod.emit(ev);\n                    });\n                    this.paymentRequest.on('source',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.source.emit(ev);\n                    });\n                    this.paymentRequest.on('cancel',\n                    /**\n                    * @return {?}\n                    */\n                    function () {\n                      return _this15.cancel.emit();\n                    });\n                    this.paymentRequest.on('shippingaddresschange',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.shippingaddresschange.emit(ev);\n                    });\n                    this.paymentRequest.on('shippingoptionchange',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.shippingoptionchange.emit(ev);\n                    });\n                    this.element = this.elements.create('paymentRequestButton', Object.assign({\n                      paymentRequest: this.paymentRequest\n                    }, options));\n                    this.canMakePayment().subscribe(\n                    /**\n                    * @param {?} result\n                    * @return {?}\n                    */\n                    function (result) {\n                      if (result) {\n                        _this15.element.on('click',\n                        /**\n                        * @param {?} ev\n                        * @return {?}\n                        */\n                        function (ev) {\n                          return _this15.change.emit(ev);\n                        });\n\n                        _this15.element.on('blur',\n                        /**\n                        * @return {?}\n                        */\n                        function () {\n                          return _this15.blur.emit();\n                        });\n\n                        _this15.element.on('focus',\n                        /**\n                        * @return {?}\n                        */\n                        function () {\n                          return _this15.focus.emit();\n                        });\n\n                        _this15.element.on('ready',\n                        /**\n                        * @return {?}\n                        */\n                        function () {\n                          return _this15.ready.emit();\n                        });\n\n                        _this15.element.mount(_this15.stripeElementRef.nativeElement);\n\n                        _this15.load.emit({\n                          paymentRequestButton: _this15.element,\n                          paymentRequest: _this15.paymentRequest\n                        });\n                      } else {\n                        _this15.notavailable.emit();\n                      }\n                    });\n                  }\n                }\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"canMakePayment\",\n    value: function canMakePayment() {\n      return from(this.paymentRequest.canMakePayment());\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateRequest\",\n    value: function updateRequest(options) {\n      this.paymentRequest.update(options);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.paymentRequest.show();\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getButton\",\n    value: function getButton() {\n      return this.element;\n    }\n  }]);\n\n  return StripePaymentRequestButtonComponent;\n}();\n\nStripePaymentRequestButtonComponent.Éµfac = function StripePaymentRequestButtonComponent_Factory(t) {\n  return new (t || StripePaymentRequestButtonComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripePaymentRequestButtonComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripePaymentRequestButtonComponent,\n  selectors: [[\"ngx-stripe-payment-request-button\"]],\n  viewQuery: function StripePaymentRequestButtonComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    paymentOptions: \"paymentOptions\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    change: \"change\",\n    blur: \"blur\",\n    focus: \"focus\",\n    ready: \"ready\",\n    token: \"token\",\n    paymentMethod: \"paymentMethod\",\n    source: \"source\",\n    cancel: \"cancel\",\n    shippingaddresschange: \"shippingaddresschange\",\n    shippingoptionchange: \"shippingoptionchange\",\n    notavailable: \"notavailable\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripePaymentRequestButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripePaymentRequestButtonComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripePaymentRequestButtonComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  paymentOptions: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  token: [{\n    type: Output\n  }],\n  paymentMethod: [{\n    type: Output\n  }],\n  source: [{\n    type: Output\n  }],\n  cancel: [{\n    type: Output\n  }],\n  shippingaddresschange: [{\n    type: Output\n  }],\n  shippingoptionchange: [{\n    type: Output\n  }],\n  notavailable: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripePaymentRequestButtonComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-payment-request-button',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    token: [{\n      type: Output\n    }],\n    paymentMethod: [{\n      type: Output\n    }],\n    source: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    shippingaddresschange: [{\n      type: Output\n    }],\n    shippingoptionchange: [{\n      type: Output\n    }],\n    notavailable: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    paymentOptions: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe-factory.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeFactoryService = /*#__PURE__*/function () {\n  /**\n   * @param {?} baseKey\n   * @param {?} baseOptions\n   * @param {?} loader\n   * @param {?} window\n   */\n  function StripeFactoryService(baseKey, baseOptions, loader, window) {\n    _classCallCheck(this, StripeFactoryService);\n\n    this.baseKey = baseKey;\n    this.baseOptions = baseOptions;\n    this.loader = loader;\n    this.window = window;\n  }\n  /**\n   * @param {?=} key\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(StripeFactoryService, [{\n    key: \"create\",\n    value: function create(key, options) {\n      if (!key && !this.baseKey) {\n        return null;\n      }\n\n      return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);\n    }\n  }]);\n\n  return StripeFactoryService;\n}();\n\nStripeFactoryService.Éµfac = function StripeFactoryService_Factory(t) {\n  return new (t || StripeFactoryService)(Éµngcc0.ÉµÉµinject(STRIPE_PUBLISHABLE_KEY), Éµngcc0.ÉµÉµinject(STRIPE_OPTIONS), Éµngcc0.ÉµÉµinject(LazyStripeAPILoader), Éµngcc0.ÉµÉµinject(WindowRef));\n};\n\nStripeFactoryService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: StripeFactoryService,\n  factory: StripeFactoryService.Éµfac\n});\n\nStripeFactoryService.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_PUBLISHABLE_KEY]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_OPTIONS]\n    }]\n  }, {\n    type: LazyStripeAPILoader\n  }, {\n    type: WindowRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeFactoryService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_PUBLISHABLE_KEY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_OPTIONS]\n      }]\n    }, {\n      type: LazyStripeAPILoader\n    }, {\n      type: WindowRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-stripe.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar components = [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent];\n/** @type {?} */\n\nvar directives = [StripeCardGroupDirective];\n\nvar NgxStripeModule = /*#__PURE__*/function () {\n  function NgxStripeModule() {\n    _classCallCheck(this, NgxStripeModule);\n  }\n\n  _createClass(NgxStripeModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * @param {?=} publishableKey\n     * @param {?=} options\n     * @return {?}\n     */\n    value: function forRoot(publishableKey, options) {\n      return {\n        ngModule: NgxStripeModule,\n        providers: [LazyStripeAPILoader, StripeService, StripeFactoryService, StripeElementsService, WindowRef, DocumentRef, {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        }, {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }]\n      };\n    }\n    /**\n     * @param {?=} publishableKey\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"forChild\",\n    value: function forChild(publishableKey, options) {\n      return {\n        ngModule: NgxStripeModule,\n        providers: [LazyStripeAPILoader, StripeService, StripeFactoryService, StripeElementsService, WindowRef, DocumentRef, {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        }, {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }]\n      };\n    }\n  }]);\n\n  return NgxStripeModule;\n}();\n\nNgxStripeModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: NgxStripeModule\n});\nNgxStripeModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function NgxStripeModule_Factory(t) {\n    return new (t || NgxStripeModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxStripeModule, {\n    declarations: [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective],\n    exports: [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(NgxStripeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [].concat(components, directives),\n      exports: [].concat(components, directives)\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-stripe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgxStripeModule, StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIbanComponent, StripeIdealBankComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective, StripeService, StripeFactoryService, StripeInstance, LazyStripeAPILoader, WindowRef, DocumentRef, StripeElementsService, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS };","map":null,"metadata":{},"sourceType":"module"}