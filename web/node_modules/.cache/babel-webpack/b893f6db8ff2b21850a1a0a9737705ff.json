{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/wearit/web/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { filter, first, map, switchMap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Component, Input, ViewChild, EventEmitter, Output, Directive, Optional, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe-instance.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as Éµngcc0 from '@angular/core';\nvar _c0 = [\"stripeElementRef\"];\n\nvar StripeInstance = /*#__PURE__*/function () {\n  /**\n   * @param {?} loader\n   * @param {?} window\n   * @param {?} key\n   * @param {?=} options\n   */\n  function StripeInstance(loader, window, key, options) {\n    var _this = this;\n\n    _classCallCheck(this, StripeInstance);\n\n    this.loader = loader;\n    this.window = window;\n    this.key = key;\n    this.options = options;\n    this.stripe$ = new BehaviorSubject(undefined);\n    this.stripe = this.stripe$.asObservable().pipe(filter(\n    /**\n    * @param {?} stripe\n    * @return {?}\n    */\n    function (stripe) {\n      return Boolean(stripe);\n    }));\n    this.loader.asStream().pipe(filter(\n    /**\n    * @param {?} status\n    * @return {?}\n    */\n    function (status) {\n      return status.loaded === true;\n    }), first(), map(\n    /**\n    * @return {?}\n    */\n    function () {\n      return (\n        /** @type {?} */\n        _this.window.getNativeWindow().Stripe\n      );\n    })).subscribe(\n    /**\n    * @param {?} stripeInstance\n    * @return {?}\n    */\n    function (stripeInstance) {\n      /** @type {?} */\n      var stripe = _this.options ?\n      /** @type {?} */\n      stripeInstance(_this.key, _this.options) :\n      /** @type {?} */\n      stripeInstance(_this.key);\n\n      _this.stripe$.next(stripe);\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(StripeInstance, [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      return this.stripe$.getValue();\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"elements\",\n    value: function elements(options) {\n      return this.stripe$.asObservable().pipe(filter(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return Boolean(stripe);\n      }), map(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return stripe.elements(options);\n      }), first());\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"redirectToCheckout\",\n    value: function redirectToCheckout(options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.redirectToCheckout(options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitPayment\",\n    value: function confirmAuBecsDebitPayment(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmAuBecsDebitPayment(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmBancontactPayment\",\n    value: function confirmBancontactPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmBancontactPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardPayment\",\n    value: function confirmCardPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmCardPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmEpsPayment\",\n    value: function confirmEpsPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmEpsPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmFpxPayment\",\n    value: function confirmFpxPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmFpxPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmGiropayPayment\",\n    value: function confirmGiropayPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmGiropayPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmIdealPayment\",\n    value: function confirmIdealPayment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmIdealPayment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmP24Payment\",\n    value: function confirmP24Payment(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmP24Payment(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitPayment\",\n    value: function confirmSepaDebitPayment(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmSepaDebitPayment(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardAction\",\n    value: function handleCardAction(clientSecret) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.handleCardAction(clientSecret));\n      }), first());\n    }\n    /**\n     * @param {?} paymentMethodData\n     * @return {?}\n     */\n\n  }, {\n    key: \"createPaymentMethod\",\n    value: function createPaymentMethod(paymentMethodData) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.createPaymentMethod(paymentMethodData));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrievePaymentIntent\",\n    value: function retrievePaymentIntent(clientSecret) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.retrievePaymentIntent(clientSecret));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitSetup\",\n    value: function confirmAuBecsDebitSetup(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmAuBecsDebitSetup(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardSetup\",\n    value: function confirmCardSetup(clientSecret, data, options) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmCardSetup(clientSecret, data, options));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitSetup\",\n    value: function confirmSepaDebitSetup(clientSecret, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmSepaDebitSetup(clientSecret, data));\n      }), first());\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSetupIntent\",\n    value: function retrieveSetupIntent(clientSecret) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.confirmSepaDebitSetup(clientSecret));\n      }), first());\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"paymentRequest\",\n    value: function paymentRequest(options) {\n      /** @type {?} */\n      var stripe = this.getInstance();\n      return stripe ? stripe.paymentRequest(options) : undefined;\n    }\n    /**\n     * @param {?} tokenType\n     * @param {?} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"createToken\",\n    value: function createToken(tokenType, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.createToken(tokenType, data));\n      }), first());\n    }\n    /**\n     * @param {?} a\n     * @param {?=} b\n     * @return {?}\n     */\n\n  }, {\n    key: \"createSource\",\n    value: function createSource(a, b) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.createSource(a, b));\n      }), first());\n    }\n    /**\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSource\",\n    value: function retrieveSource(source) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(stripe.retrieveSource(source));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardPayment\",\n    value: function handleCardPayment(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.handleCardPayment(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmPaymentIntent\",\n    value: function confirmPaymentIntent(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.confirmPaymentIntent(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardSetup\",\n    value: function handleCardSetup(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.handleCardSetup(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSetupIntent\",\n    value: function confirmSetupIntent(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.confirmSetupIntent(clientSecret, element, data));\n      }), first());\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleFpxPayment\",\n    value: function handleFpxPayment(clientSecret, element, data) {\n      return this.stripe.pipe(switchMap(\n      /**\n      * @param {?} stripe\n      * @return {?}\n      */\n      function (stripe) {\n        return from(\n        /** @type {?} */\n        stripe.handleFpxPayment(clientSecret, element, data));\n      }), first());\n    }\n  }]);\n\n  return StripeInstance;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/interfaces/ngx-stripe.interface.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');\n/** @type {?} */\n\nvar STRIPE_OPTIONS = new InjectionToken('Stripe Options');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/window-ref.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar WindowRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} platformId\n   */\n  function WindowRef(platformId) {\n    _classCallCheck(this, WindowRef);\n\n    this.platformId = platformId;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(WindowRef, [{\n    key: \"getNativeWindow\",\n    value: function getNativeWindow() {\n      if (isPlatformBrowser(this.platformId)) {\n        return window;\n      }\n\n      return (\n        /** @type {?} */\n        {}\n      );\n    }\n  }]);\n\n  return WindowRef;\n}();\n\nWindowRef.Éµfac = function WindowRef_Factory(t) {\n  return new (t || WindowRef)(Éµngcc0.ÉµÉµinject(PLATFORM_ID));\n};\n\nWindowRef.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: WindowRef,\n  factory: WindowRef.Éµfac\n});\n\nWindowRef.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(WindowRef, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/document-ref.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar DocumentRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} platformId\n   */\n  function DocumentRef(platformId) {\n    _classCallCheck(this, DocumentRef);\n\n    this.platformId = platformId;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(DocumentRef, [{\n    key: \"getNativeDocument\",\n    value: function getNativeDocument() {\n      if (isPlatformBrowser(this.platformId)) {\n        return document;\n      }\n\n      return (\n        /** @type {?} */\n        {}\n      );\n    }\n  }]);\n\n  return DocumentRef;\n}();\n\nDocumentRef.Éµfac = function DocumentRef_Factory(t) {\n  return new (t || DocumentRef)(Éµngcc0.ÉµÉµinject(PLATFORM_ID));\n};\n\nDocumentRef.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: DocumentRef,\n  factory: DocumentRef.Éµfac\n});\n\nDocumentRef.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(DocumentRef, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/api-loader.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar LazyStripeAPILoader = /*#__PURE__*/function () {\n  /**\n   * @param {?} platformId\n   * @param {?} window\n   * @param {?} document\n   */\n  function LazyStripeAPILoader(platformId, window, document) {\n    _classCallCheck(this, LazyStripeAPILoader);\n\n    this.platformId = platformId;\n    this.window = window;\n    this.document = document;\n    this.status = new BehaviorSubject({\n      error: false,\n      loaded: false,\n      loading: false\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(LazyStripeAPILoader, [{\n    key: \"asStream\",\n    value: function asStream() {\n      this.load();\n      return this.status.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      return this.status.getValue().loaded;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this2 = this;\n\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var status = this.status.getValue();\n\n      if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      } else if (!status.loaded && !status.loading) {\n        this.status.next(Object.assign({}, status, {\n          loading: true\n        }));\n        /** @type {?} */\n\n        var script = this.document.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = 'https://js.stripe.com/v3/';\n\n        script.onload =\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2.status.next({\n            error: false,\n            loaded: true,\n            loading: false\n          });\n        };\n\n        script.onerror =\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2.status.next({\n            error: true,\n            loaded: false,\n            loading: false\n          });\n        };\n\n        this.document.getNativeDocument().body.appendChild(script);\n      }\n    }\n  }]);\n\n  return LazyStripeAPILoader;\n}();\n\nLazyStripeAPILoader.Éµfac = function LazyStripeAPILoader_Factory(t) {\n  return new (t || LazyStripeAPILoader)(Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(WindowRef), Éµngcc0.ÉµÉµinject(DocumentRef));\n};\n\nLazyStripeAPILoader.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: LazyStripeAPILoader,\n  factory: LazyStripeAPILoader.Éµfac\n});\n\nLazyStripeAPILoader.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: WindowRef\n  }, {\n    type: DocumentRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(LazyStripeAPILoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: WindowRef\n    }, {\n      type: DocumentRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeService = /*#__PURE__*/function () {\n  /**\n   * @param {?} key\n   * @param {?} options\n   * @param {?} loader\n   * @param {?} window\n   */\n  function StripeService(key, options, loader, window) {\n    _classCallCheck(this, StripeService);\n\n    this.key = key;\n    this.options = options;\n    this.loader = loader;\n    this.window = window;\n\n    if (key) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(StripeService, [{\n    key: \"getStripeReference\",\n    value: function getStripeReference() {\n      var _this3 = this;\n\n      return this.loader.asStream().pipe(filter(\n      /**\n      * @param {?} status\n      * @return {?}\n      */\n      function (status) {\n        return status.loaded === true;\n      }), map(\n      /**\n      * @return {?}\n      */\n      function () {\n        return (\n          /** @type {?} */\n          _this3.window.getNativeWindow().Stripe\n        );\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getInstance\",\n    value: function getInstance() {\n      return this.stripe.getInstance();\n    }\n    /**\n     * @param {?} key\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"setKey\",\n    value: function setKey(key, options) {\n      return this.changeKey(key, options);\n    }\n    /**\n     * @param {?} key\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeKey\",\n    value: function changeKey(key, options) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n      return this.stripe;\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"elements\",\n    value: function elements(options) {\n      return this.stripe.elements(options);\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"redirectToCheckout\",\n    value: function redirectToCheckout(options) {\n      return this.stripe.redirectToCheckout(options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitPayment\",\n    value: function confirmAuBecsDebitPayment(clientSecret, data) {\n      return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmBancontactPayment\",\n    value: function confirmBancontactPayment(clientSecret, data, options) {\n      return this.stripe.confirmBancontactPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardPayment\",\n    value: function confirmCardPayment(clientSecret, data, options) {\n      return this.stripe.confirmCardPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmEpsPayment\",\n    value: function confirmEpsPayment(clientSecret, data, options) {\n      return this.stripe.confirmEpsPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmFpxPayment\",\n    value: function confirmFpxPayment(clientSecret, data, options) {\n      return this.stripe.confirmFpxPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmGiropayPayment\",\n    value: function confirmGiropayPayment(clientSecret, data, options) {\n      return this.stripe.confirmGiropayPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmIdealPayment\",\n    value: function confirmIdealPayment(clientSecret, data, options) {\n      return this.stripe.confirmIdealPayment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmP24Payment\",\n    value: function confirmP24Payment(clientSecret, data, options) {\n      return this.stripe.confirmP24Payment(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitPayment\",\n    value: function confirmSepaDebitPayment(clientSecret, data) {\n      return this.stripe.confirmSepaDebitPayment(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardAction\",\n    value: function handleCardAction(clientSecret) {\n      return this.stripe.handleCardAction(clientSecret);\n    }\n    /**\n     * @param {?} paymentMethodData\n     * @return {?}\n     */\n\n  }, {\n    key: \"createPaymentMethod\",\n    value: function createPaymentMethod(paymentMethodData) {\n      return this.stripe.createPaymentMethod(paymentMethodData);\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrievePaymentIntent\",\n    value: function retrievePaymentIntent(clientSecret) {\n      return this.stripe.retrievePaymentIntent(clientSecret);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmAuBecsDebitSetup\",\n    value: function confirmAuBecsDebitSetup(clientSecret, data) {\n      return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmCardSetup\",\n    value: function confirmCardSetup(clientSecret, data, options) {\n      return this.stripe.confirmCardSetup(clientSecret, data, options);\n    }\n    /**\n     * @param {?} clientSecret\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSepaDebitSetup\",\n    value: function confirmSepaDebitSetup(clientSecret, data) {\n      return this.stripe.confirmSepaDebitSetup(clientSecret, data);\n    }\n    /**\n     * @param {?} clientSecret\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSetupIntent\",\n    value: function retrieveSetupIntent(clientSecret) {\n      return this.stripe.retrieveSetupIntent(clientSecret);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"paymentRequest\",\n    value: function paymentRequest(options) {\n      return this.stripe.paymentRequest(options);\n    }\n    /**\n     * @param {?} tokenType\n     * @param {?} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"createToken\",\n    value: function createToken(tokenType, data) {\n      return this.stripe.createToken(tokenType, data);\n    }\n    /**\n     * @param {?} a\n     * @param {?=} b\n     * @return {?}\n     */\n\n  }, {\n    key: \"createSource\",\n    value: function createSource(a, b) {\n      return this.stripe.createSource(a, b);\n    }\n    /**\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveSource\",\n    value: function retrieveSource(source) {\n      return this.stripe.retrieveSource(source);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardPayment\",\n    value: function handleCardPayment(clientSecret, element, data) {\n      return this.stripe.handleCardPayment(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmPaymentIntent\",\n    value: function confirmPaymentIntent(clientSecret, element, data) {\n      return this.stripe.confirmPaymentIntent(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleCardSetup\",\n    value: function handleCardSetup(clientSecret, element, data) {\n      return this.stripe.handleCardSetup(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"confirmSetupIntent\",\n    value: function confirmSetupIntent(clientSecret, element, data) {\n      return this.stripe.confirmSetupIntent(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     * @param {?} clientSecret\n     * @param {?=} element\n     * @param {?=} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleFpxPayment\",\n    value: function handleFpxPayment(clientSecret, element, data) {\n      return this.stripe.handleFpxPayment(clientSecret, element, data);\n    }\n  }]);\n\n  return StripeService;\n}();\n\nStripeService.Éµfac = function StripeService_Factory(t) {\n  return new (t || StripeService)(Éµngcc0.ÉµÉµinject(STRIPE_PUBLISHABLE_KEY), Éµngcc0.ÉµÉµinject(STRIPE_OPTIONS), Éµngcc0.ÉµÉµinject(LazyStripeAPILoader), Éµngcc0.ÉµÉµinject(WindowRef));\n};\n\nStripeService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: StripeService,\n  factory: StripeService.Éµfac\n});\n\nStripeService.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_PUBLISHABLE_KEY]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_OPTIONS]\n    }]\n  }, {\n    type: LazyStripeAPILoader\n  }, {\n    type: WindowRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_PUBLISHABLE_KEY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_OPTIONS]\n      }]\n    }, {\n      type: LazyStripeAPILoader\n    }, {\n      type: WindowRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe-elements.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeElementsService = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeService\n   */\n  function StripeElementsService(stripeService) {\n    _classCallCheck(this, StripeElementsService);\n\n    this.stripeService = stripeService;\n  }\n  /**\n   * @param {?} stripe\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(StripeElementsService, [{\n    key: \"elements\",\n    value: function elements(stripe) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (stripe) {\n        if (Object.keys(options).length > 0) {\n          return stripe.elements(options);\n        }\n\n        return stripe.elements();\n      } else {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n\n        return this.stripeService.elements();\n      }\n    }\n    /**\n     * @param {?} stripe\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"paymentRequest\",\n    value: function paymentRequest(stripe, options) {\n      return stripe ? stripe.paymentRequest(options) : this.stripeService.paymentRequest(options);\n    }\n    /**\n     * @param {?} options\n     * @param {?} containerClass\n     * @return {?}\n     */\n\n  }, {\n    key: \"mergeOptions\",\n    value: function mergeOptions(options, containerClass) {\n      if (!containerClass || options && options.classes) {\n        return options || {};\n      }\n\n      if (!options || !options.classes) {\n        return Object.assign({}, options || {}, {\n          classes: {\n            base: containerClass,\n            complete: \"\".concat(containerClass, \"--complete\"),\n            empty: \"\".concat(containerClass, \"--empty\"),\n            focus: \"\".concat(containerClass, \"--focus\"),\n            invalid: \"\".concat(containerClass, \"--invalid\"),\n            webkitAutoFill: \"\".concat(containerClass, \"--webkit-autoFill\")\n          }\n        });\n      }\n\n      return options || {};\n    }\n  }]);\n\n  return StripeElementsService;\n}();\n\nStripeElementsService.Éµfac = function StripeElementsService_Factory(t) {\n  return new (t || StripeElementsService)(Éµngcc0.ÉµÉµinject(StripeService));\n};\n\nStripeElementsService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: StripeElementsService,\n  factory: StripeElementsService.Éµfac\n});\n\nStripeElementsService.ctorParameters = function () {\n  return [{\n    type: StripeService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeElementsService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StripeService\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeCardComponent(stripeElementsService) {\n    _classCallCheck(this, StripeCardComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context2.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context2.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCard\",\n    value: function getCard() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this4 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('card', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this4.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeCardComponent;\n}();\n\nStripeCardComponent.Éµfac = function StripeCardComponent_Factory(t) {\n  return new (t || StripeCardComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeCardComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardComponent,\n  selectors: [[\"ngx-stripe-card\"]],\n  viewQuery: function StripeCardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeCardComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/directives/card-group.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardGroupDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeCardGroupDirective(stripeElementsService) {\n    _classCallCheck(this, StripeCardGroupDirective);\n\n    this.stripeElementsService = stripeElementsService;\n    this.elements = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardGroupDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var elementsOptions, stripe;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                elementsOptions = this.elementsOptions;\n                /** @type {?} */\n\n                stripe = this.stripe;\n\n                if (!(changes.elementsOptions || changes.stripe || !this._elements)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.stripeElementsService.elements(stripe, elementsOptions).toPromise();\n\n              case 6:\n                this._elements = _context3.sent;\n                this.elements.emit(this._elements);\n\n              case 8:\n                this.state = 'ready';\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context4.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this._elements = _context4.sent;\n                this.elements.emit(this._elements);\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return StripeCardGroupDirective;\n}();\n\nStripeCardGroupDirective.Éµfac = function StripeCardGroupDirective_Factory(t) {\n  return new (t || StripeCardGroupDirective)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeCardGroupDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: StripeCardGroupDirective,\n  selectors: [[\"ngx-stripe-card-group\"], [\"\", \"ngxStripeCardGroup\", \"\"]],\n  inputs: {\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    elements: \"elements\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n\nStripeCardGroupDirective.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeCardGroupDirective.propDecorators = {\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  elements: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardGroupDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    elements: [{\n      type: Output\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card-number.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardNumberComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   * @param {?} cardGroup\n   */\n  function StripeCardNumberComponent(stripeElementsService, cardGroup) {\n    _classCallCheck(this, StripeCardNumberComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.cardGroup = cardGroup;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardNumberComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (changes.options || changes.containerClass) {\n                  this.setupElement('options');\n                }\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this5 = this;\n\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        /**\n        * @param {?} elements\n        * @return {?}\n        */\n        function (elements) {\n          _this5.elements = elements;\n\n          _this5.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardNumberComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCardNumber\",\n    value: function getCardNumber() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupElement\",\n    value: function setupElement(source) {\n      var _this6 = this;\n\n      /** @type {?} */\n      var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardNumber', options);\n        this.element.on('change',\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        function (ev) {\n          return _this6.change.emit(ev);\n        });\n        this.element.on('blur',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.blur.emit();\n        });\n        this.element.on('focus',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.focus.emit();\n        });\n        this.element.on('ready',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.ready.emit();\n        });\n        this.element.on('escape',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this6.escape.emit();\n        });\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }]);\n\n  return StripeCardNumberComponent;\n}();\n\nStripeCardNumberComponent.Éµfac = function StripeCardNumberComponent_Factory(t) {\n  return new (t || StripeCardNumberComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService), Éµngcc0.ÉµÉµdirectiveInject(StripeCardGroupDirective, 8));\n};\n\nStripeCardNumberComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardNumberComponent,\n  selectors: [[\"ngx-stripe-card-number\"]],\n  viewQuery: function StripeCardNumberComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardNumberComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardNumberComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }, {\n    type: StripeCardGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nStripeCardNumberComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardNumberComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card-number',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }, {\n      type: StripeCardGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card-expiry.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardExpiryComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   * @param {?} cardGroup\n   */\n  function StripeCardExpiryComponent(stripeElementsService, cardGroup) {\n    _classCallCheck(this, StripeCardExpiryComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.cardGroup = cardGroup;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardExpiryComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (changes.options || changes.containerClass) {\n                  this.setupElement('options');\n                }\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        /**\n        * @param {?} elements\n        * @return {?}\n        */\n        function (elements) {\n          _this7.elements = elements;\n\n          _this7.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCardExpiry\",\n    value: function getCardExpiry() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupElement\",\n    value: function setupElement(source) {\n      var _this8 = this;\n\n      /** @type {?} */\n      var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardExpiry', options);\n        this.element.on('change',\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        function (ev) {\n          return _this8.change.emit(ev);\n        });\n        this.element.on('blur',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.blur.emit();\n        });\n        this.element.on('focus',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.focus.emit();\n        });\n        this.element.on('ready',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.ready.emit();\n        });\n        this.element.on('escape',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.escape.emit();\n        });\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }]);\n\n  return StripeCardExpiryComponent;\n}();\n\nStripeCardExpiryComponent.Éµfac = function StripeCardExpiryComponent_Factory(t) {\n  return new (t || StripeCardExpiryComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService), Éµngcc0.ÉµÉµdirectiveInject(StripeCardGroupDirective, 8));\n};\n\nStripeCardExpiryComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardExpiryComponent,\n  selectors: [[\"ngx-stripe-card-expiry\"]],\n  viewQuery: function StripeCardExpiryComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardExpiryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardExpiryComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }, {\n    type: StripeCardGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nStripeCardExpiryComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardExpiryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card-expiry',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }, {\n      type: StripeCardGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/card-cvc.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeCardCvcComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   * @param {?} cardGroup\n   */\n  function StripeCardCvcComponent(stripeElementsService, cardGroup) {\n    _classCallCheck(this, StripeCardCvcComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.cardGroup = cardGroup;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeCardCvcComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (changes.options || changes.containerClass) {\n                  this.setupElement('options');\n                }\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this9 = this;\n\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        /**\n        * @param {?} elements\n        * @return {?}\n        */\n        function (elements) {\n          _this9.elements = elements;\n\n          _this9.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardCvcComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCardCvc\",\n    value: function getCardCvc() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?} source\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupElement\",\n    value: function setupElement(source) {\n      var _this10 = this;\n\n      /** @type {?} */\n      var options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardCvc', options);\n        this.element.on('change',\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        function (ev) {\n          return _this10.change.emit(ev);\n        });\n        this.element.on('blur',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.blur.emit();\n        });\n        this.element.on('focus',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.focus.emit();\n        });\n        this.element.on('ready',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.ready.emit();\n        });\n        this.element.on('escape',\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10.escape.emit();\n        });\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }]);\n\n  return StripeCardCvcComponent;\n}();\n\nStripeCardCvcComponent.Éµfac = function StripeCardCvcComponent_Factory(t) {\n  return new (t || StripeCardCvcComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService), Éµngcc0.ÉµÉµdirectiveInject(StripeCardGroupDirective, 8));\n};\n\nStripeCardCvcComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeCardCvcComponent,\n  selectors: [[\"ngx-stripe-card-cvc\"]],\n  viewQuery: function StripeCardCvcComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeCardCvcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeCardCvcComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }, {\n    type: StripeCardGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nStripeCardCvcComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeCardCvcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-card-cvc',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }, {\n      type: StripeCardGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/fpx-bank.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeFpxBankComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeFpxBankComponent(stripeElementsService) {\n    _classCallCheck(this, StripeFpxBankComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeFpxBankComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context8.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context9.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context9.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context9.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFpxBank\",\n    value: function getFpxBank() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this11 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        accountHolderType: 'individual'\n      };\n      this.element = this.elements.create('fpxBank', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this11.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeFpxBankComponent;\n}();\n\nStripeFpxBankComponent.Éµfac = function StripeFpxBankComponent_Factory(t) {\n  return new (t || StripeFpxBankComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeFpxBankComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeFpxBankComponent,\n  selectors: [[\"ngx-stripe-fpx-bank\"]],\n  viewQuery: function StripeFpxBankComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeFpxBankComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeFpxBankComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeFpxBankComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeFpxBankComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-fpx-bank',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/ideal-bank.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeIdealBankComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeIdealBankComponent(stripeElementsService) {\n    _classCallCheck(this, StripeIdealBankComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeIdealBankComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context10.next = 8;\n                  break;\n                }\n\n                _context10.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context10.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context11.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context11.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context11.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getIdealBank\",\n    value: function getIdealBank() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this12 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('idealBank', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this12.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this12.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeIdealBankComponent;\n}();\n\nStripeIdealBankComponent.Éµfac = function StripeIdealBankComponent_Factory(t) {\n  return new (t || StripeIdealBankComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeIdealBankComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeIdealBankComponent,\n  selectors: [[\"ngx-stripe-ideal-bank\"]],\n  viewQuery: function StripeIdealBankComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeIdealBankComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeIdealBankComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeIdealBankComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeIdealBankComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-ideal-bank',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/iban.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeIbanComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeIbanComponent(stripeElementsService) {\n    _classCallCheck(this, StripeIbanComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeIbanComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context12.next = 8;\n                  break;\n                }\n\n                _context12.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context12.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context13.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context13.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context13.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getIban\",\n    value: function getIban() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this13 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('iban', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this13.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this13.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeIbanComponent;\n}();\n\nStripeIbanComponent.Éµfac = function StripeIbanComponent_Factory(t) {\n  return new (t || StripeIbanComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeIbanComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeIbanComponent,\n  selectors: [[\"ngx-stripe-iban\"]],\n  viewQuery: function StripeIbanComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeIbanComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeIbanComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeIbanComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeIbanComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-iban',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/au-bank-account.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeAuBankAccountComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripeAuBankAccountComponent(stripeElementsService) {\n    _classCallCheck(this, StripeAuBankAccountComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.escape = new EventEmitter();\n    this.state = 'notready';\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripeAuBankAccountComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var options, updateElements;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this.state = 'starting';\n                /** @type {?} */\n\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context14.next = 8;\n                  break;\n                }\n\n                _context14.next = 6;\n                return this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n\n              case 6:\n                this.elements = _context14.sent;\n                updateElements = true;\n\n              case 8:\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.createElement(options);\n                  }\n                }\n\n                this.state = 'ready';\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(this.state === 'notready')) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                this.state = 'starting';\n                _context15.next = 4;\n                return this.stripeElementsService.elements(this.stripe).toPromise();\n\n              case 4:\n                this.elements = _context15.sent;\n                this.createElement();\n                this.state = 'ready';\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAuBankAccount\",\n    value: function getAuBankAccount() {\n      return this.element;\n    }\n    /**\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var _this14 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.element = this.elements.create('auBankAccount', options);\n      this.element.on('change',\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        return _this14.change.emit(ev);\n      });\n      this.element.on('blur',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.blur.emit();\n      });\n      this.element.on('focus',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.focus.emit();\n      });\n      this.element.on('ready',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.ready.emit();\n      });\n      this.element.on('escape',\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14.escape.emit();\n      });\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }]);\n\n  return StripeAuBankAccountComponent;\n}();\n\nStripeAuBankAccountComponent.Éµfac = function StripeAuBankAccountComponent_Factory(t) {\n  return new (t || StripeAuBankAccountComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripeAuBankAccountComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripeAuBankAccountComponent,\n  selectors: [[\"ngx-stripe-au-bank-account\"]],\n  viewQuery: function StripeAuBankAccountComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\",\n    ready: \"ready\",\n    escape: \"escape\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripeAuBankAccountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripeAuBankAccountComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripeAuBankAccountComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  escape: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeAuBankAccountComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-au-bank-account',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    escape: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/components/payment-request-button.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripePaymentRequestButtonComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} stripeElementsService\n   */\n  function StripePaymentRequestButtonComponent(stripeElementsService) {\n    _classCallCheck(this, StripePaymentRequestButtonComponent);\n\n    this.stripeElementsService = stripeElementsService;\n    this.load = new EventEmitter();\n    this.change = new EventEmitter();\n    this.blur = new EventEmitter();\n    this.focus = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.token = new EventEmitter();\n    this.paymentMethod = new EventEmitter();\n    this.source = new EventEmitter();\n    this.cancel = new EventEmitter();\n    this.shippingaddresschange = new EventEmitter();\n    this.shippingoptionchange = new EventEmitter();\n    this.notavailable = new EventEmitter();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(StripePaymentRequestButtonComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var _this15 = this;\n\n        var options, elementsOptions, stripe, updateElements, elements;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                /** @type {?} */\n                options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n                /** @type {?} */\n\n                elementsOptions = this.elementsOptions;\n                /** @type {?} */\n\n                stripe = this.stripe;\n                /** @type {?} */\n\n                updateElements = false;\n\n                if (!(changes.elementsOptions || changes.stripe || !this.elements)) {\n                  _context16.next = 10;\n                  break;\n                }\n\n                _context16.next = 7;\n                return this.stripeElementsService.elements(stripe, elementsOptions).toPromise();\n\n              case 7:\n                elements = _context16.sent;\n                this.elements = elements;\n                updateElements = true;\n\n              case 10:\n                if (changes.paymentOptions && this.paymentRequest) {\n                  this.updateRequest(this.paymentOptions);\n                }\n\n                if (changes.options || changes.containerClass || !this.element || updateElements) {\n                  if (this.element && !updateElements) {\n                    this.update(options);\n                  } else if (this.elements && updateElements) {\n                    this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);\n                    this.paymentRequest.on('token',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.token.emit(ev);\n                    });\n                    this.paymentRequest.on('paymentmethod',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.paymentMethod.emit(ev);\n                    });\n                    this.paymentRequest.on('source',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.source.emit(ev);\n                    });\n                    this.paymentRequest.on('cancel',\n                    /**\n                    * @return {?}\n                    */\n                    function () {\n                      return _this15.cancel.emit();\n                    });\n                    this.paymentRequest.on('shippingaddresschange',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.shippingaddresschange.emit(ev);\n                    });\n                    this.paymentRequest.on('shippingoptionchange',\n                    /**\n                    * @param {?} ev\n                    * @return {?}\n                    */\n                    function (ev) {\n                      return _this15.shippingoptionchange.emit(ev);\n                    });\n                    this.element = this.elements.create('paymentRequestButton', Object.assign({\n                      paymentRequest: this.paymentRequest\n                    }, options));\n                    this.canMakePayment().subscribe(\n                    /**\n                    * @param {?} result\n                    * @return {?}\n                    */\n                    function (result) {\n                      if (result) {\n                        _this15.element.on('click',\n                        /**\n                        * @param {?} ev\n                        * @return {?}\n                        */\n                        function (ev) {\n                          return _this15.change.emit(ev);\n                        });\n\n                        _this15.element.on('blur',\n                        /**\n                        * @return {?}\n                        */\n                        function () {\n                          return _this15.blur.emit();\n                        });\n\n                        _this15.element.on('focus',\n                        /**\n                        * @return {?}\n                        */\n                        function () {\n                          return _this15.focus.emit();\n                        });\n\n                        _this15.element.on('ready',\n                        /**\n                        * @return {?}\n                        */\n                        function () {\n                          return _this15.ready.emit();\n                        });\n\n                        _this15.element.mount(_this15.stripeElementRef.nativeElement);\n\n                        _this15.load.emit({\n                          paymentRequestButton: _this15.element,\n                          paymentRequest: _this15.paymentRequest\n                        });\n                      } else {\n                        _this15.notavailable.emit();\n                      }\n                    });\n                  }\n                }\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"canMakePayment\",\n    value: function canMakePayment() {\n      return from(this.paymentRequest.canMakePayment());\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateRequest\",\n    value: function updateRequest(options) {\n      this.paymentRequest.update(options);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.paymentRequest.show();\n    }\n    /**\n     * @deprecated\n     * @return {?}\n     */\n\n  }, {\n    key: \"getButton\",\n    value: function getButton() {\n      return this.element;\n    }\n  }]);\n\n  return StripePaymentRequestButtonComponent;\n}();\n\nStripePaymentRequestButtonComponent.Éµfac = function StripePaymentRequestButtonComponent_Factory(t) {\n  return new (t || StripePaymentRequestButtonComponent)(Éµngcc0.ÉµÉµdirectiveInject(StripeElementsService));\n};\n\nStripePaymentRequestButtonComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: StripePaymentRequestButtonComponent,\n  selectors: [[\"ngx-stripe-payment-request-button\"]],\n  viewQuery: function StripePaymentRequestButtonComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.stripeElementRef = _t.first);\n    }\n  },\n  inputs: {\n    containerClass: \"containerClass\",\n    paymentOptions: \"paymentOptions\",\n    options: \"options\",\n    elementsOptions: \"elementsOptions\",\n    stripe: \"stripe\"\n  },\n  outputs: {\n    load: \"load\",\n    change: \"change\",\n    blur: \"blur\",\n    focus: \"focus\",\n    ready: \"ready\",\n    token: \"token\",\n    paymentMethod: \"paymentMethod\",\n    source: \"source\",\n    cancel: \"cancel\",\n    shippingaddresschange: \"shippingaddresschange\",\n    shippingoptionchange: \"shippingoptionchange\",\n    notavailable: \"notavailable\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n  template: function StripePaymentRequestButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n\nStripePaymentRequestButtonComponent.ctorParameters = function () {\n  return [{\n    type: StripeElementsService\n  }];\n};\n\nStripePaymentRequestButtonComponent.propDecorators = {\n  stripeElementRef: [{\n    type: ViewChild,\n    args: ['stripeElementRef']\n  }],\n  containerClass: [{\n    type: Input\n  }],\n  paymentOptions: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  elementsOptions: [{\n    type: Input\n  }],\n  stripe: [{\n    type: Input\n  }],\n  load: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  ready: [{\n    type: Output\n  }],\n  token: [{\n    type: Output\n  }],\n  paymentMethod: [{\n    type: Output\n  }],\n  source: [{\n    type: Output\n  }],\n  cancel: [{\n    type: Output\n  }],\n  shippingaddresschange: [{\n    type: Output\n  }],\n  shippingoptionchange: [{\n    type: Output\n  }],\n  notavailable: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripePaymentRequestButtonComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-stripe-payment-request-button',\n      template: \"<div class=\\\"field\\\" #stripeElementRef></div>\"\n    }]\n  }], function () {\n    return [{\n      type: StripeElementsService\n    }];\n  }, {\n    load: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    token: [{\n      type: Output\n    }],\n    paymentMethod: [{\n      type: Output\n    }],\n    source: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    shippingaddresschange: [{\n      type: Output\n    }],\n    shippingoptionchange: [{\n      type: Output\n    }],\n    notavailable: [{\n      type: Output\n    }],\n    stripeElementRef: [{\n      type: ViewChild,\n      args: ['stripeElementRef']\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    paymentOptions: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    elementsOptions: [{\n      type: Input\n    }],\n    stripe: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/stripe-factory.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StripeFactoryService = /*#__PURE__*/function () {\n  /**\n   * @param {?} baseKey\n   * @param {?} baseOptions\n   * @param {?} loader\n   * @param {?} window\n   */\n  function StripeFactoryService(baseKey, baseOptions, loader, window) {\n    _classCallCheck(this, StripeFactoryService);\n\n    this.baseKey = baseKey;\n    this.baseOptions = baseOptions;\n    this.loader = loader;\n    this.window = window;\n  }\n  /**\n   * @param {?=} key\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(StripeFactoryService, [{\n    key: \"create\",\n    value: function create(key, options) {\n      if (!key && !this.baseKey) {\n        return null;\n      }\n\n      return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);\n    }\n  }]);\n\n  return StripeFactoryService;\n}();\n\nStripeFactoryService.Éµfac = function StripeFactoryService_Factory(t) {\n  return new (t || StripeFactoryService)(Éµngcc0.ÉµÉµinject(STRIPE_PUBLISHABLE_KEY), Éµngcc0.ÉµÉµinject(STRIPE_OPTIONS), Éµngcc0.ÉµÉµinject(LazyStripeAPILoader), Éµngcc0.ÉµÉµinject(WindowRef));\n};\n\nStripeFactoryService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: StripeFactoryService,\n  factory: StripeFactoryService.Éµfac\n});\n\nStripeFactoryService.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_PUBLISHABLE_KEY]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [STRIPE_OPTIONS]\n    }]\n  }, {\n    type: LazyStripeAPILoader\n  }, {\n    type: WindowRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(StripeFactoryService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_PUBLISHABLE_KEY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [STRIPE_OPTIONS]\n      }]\n    }, {\n      type: LazyStripeAPILoader\n    }, {\n      type: WindowRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-stripe.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar components = [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent];\n/** @type {?} */\n\nvar directives = [StripeCardGroupDirective];\n\nvar NgxStripeModule = /*#__PURE__*/function () {\n  function NgxStripeModule() {\n    _classCallCheck(this, NgxStripeModule);\n  }\n\n  _createClass(NgxStripeModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * @param {?=} publishableKey\n     * @param {?=} options\n     * @return {?}\n     */\n    value: function forRoot(publishableKey, options) {\n      return {\n        ngModule: NgxStripeModule,\n        providers: [LazyStripeAPILoader, StripeService, StripeFactoryService, StripeElementsService, WindowRef, DocumentRef, {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        }, {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }]\n      };\n    }\n    /**\n     * @param {?=} publishableKey\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"forChild\",\n    value: function forChild(publishableKey, options) {\n      return {\n        ngModule: NgxStripeModule,\n        providers: [LazyStripeAPILoader, StripeService, StripeFactoryService, StripeElementsService, WindowRef, DocumentRef, {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        }, {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }]\n      };\n    }\n  }]);\n\n  return NgxStripeModule;\n}();\n\nNgxStripeModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: NgxStripeModule\n});\nNgxStripeModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function NgxStripeModule_Factory(t) {\n    return new (t || NgxStripeModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxStripeModule, {\n    declarations: [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective],\n    exports: [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(NgxStripeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [].concat(components, directives),\n      exports: [].concat(components, directives)\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-stripe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgxStripeModule, StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIbanComponent, StripeIdealBankComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective, StripeService, StripeFactoryService, StripeInstance, LazyStripeAPILoader, WindowRef, DocumentRef, StripeElementsService, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS };","map":{"version":3,"sources":["ngx-stripe/lib/services/stripe-instance.class.ts","ngx-stripe/lib/interfaces/ngx-stripe.interface.ts","ngx-stripe/lib/services/window-ref.service.ts","ngx-stripe/lib/services/document-ref.service.ts","ngx-stripe/lib/services/api-loader.service.ts","ngx-stripe/lib/services/stripe.service.ts","ngx-stripe/lib/services/stripe-elements.service.ts","ngx-stripe/lib/components/card.component.ts","ngx-stripe/lib/directives/card-group.directive.ts","ngx-stripe/lib/components/card-number.component.ts","ngx-stripe/lib/components/card-expiry.component.ts","ngx-stripe/lib/components/card-cvc.component.ts","ngx-stripe/lib/components/fpx-bank.component.ts","ngx-stripe/lib/components/ideal-bank.component.ts","ngx-stripe/lib/components/iban.component.ts","ngx-stripe/lib/components/au-bank-account.component.ts","ngx-stripe/lib/components/payment-request-button.component.ts","ngx-stripe/lib/services/stripe-factory.service.ts","ngx-stripe/lib/ngx-stripe.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { BehaviorSubject, from, Observable } from 'rxjs';\nimport { filter, first, map, switchMap } from 'rxjs/operators';\n\nimport {\n  ConfirmAuBecsDebitPaymentData,\n  ConfirmAuBecsDebitSetupData,\n  ConfirmBancontactPaymentData,\n  ConfirmBancontactPaymentOptions,\n  ConfirmCardPaymentData,\n  ConfirmCardPaymentOptions,\n  ConfirmEpsPaymentData,\n  ConfirmEpsPaymentOptions,\n  ConfirmFpxPaymentData,\n  ConfirmFpxPaymentOptions,\n  ConfirmGiropayPaymentData,\n  ConfirmGiropayPaymentOptions,\n  ConfirmIdealPaymentData,\n  ConfirmIdealPaymentOptions,\n  ConfirmP24PaymentData,\n  ConfirmP24PaymentOptions,\n  ConfirmCardSetupData,\n  ConfirmCardSetupOptions,\n  ConfirmSepaDebitPaymentData,\n  ConfirmSepaDebitSetupData,\n  CreatePaymentMethodData,\n  CreateSourceData,\n  CreateTokenIbanData,\n  CreateTokenCardData,\n  CreateTokenPiiData,\n  CreateTokenBankAccountData,\n  PaymentIntent,\n  PaymentMethod,\n  PaymentRequest,\n  PaymentRequestOptions,\n  RedirectToCheckoutOptions,\n  RetrieveSourceParam,\n  SetupIntent,\n  Stripe,\n  StripeCardElement,\n  StripeCardNumberElement,\n  StripeCardCvcElement,\n  StripeConstructorOptions,\n  StripeElements,\n  StripeElementsOptions,\n  StripeElement,\n  StripeError,\n  StripeIbanElement,\n  Source,\n  Token,\n  TokenCreateParams\n} from '@stripe/stripe-js';\n\nimport { StripeServiceInterface } from '../interfaces/stripe-instance.interface';\n\nimport { WindowRef } from './window-ref.service';\nimport {\n  LazyStripeAPILoader,\n  LazyStripeAPILoaderStatus\n} from './api-loader.service';\n\nexport class StripeInstance implements StripeServiceInterface {\n  private stripe$ = new BehaviorSubject<Stripe | undefined>(undefined);\n  stripe = this.stripe$\n    .asObservable()\n    .pipe(filter((stripe) => Boolean(stripe)));\n\n  constructor(\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef,\n    private key: string,\n    private options?: StripeConstructorOptions\n  ) {\n    this.loader\n      .asStream()\n      .pipe(\n        filter((status: LazyStripeAPILoaderStatus) => status.loaded === true),\n        first(),\n        map(() => (this.window.getNativeWindow() as any).Stripe)\n      )\n      .subscribe((stripeInstance: any) => {\n        const stripe = this.options\n          ? (stripeInstance(this.key, this.options) as Stripe)\n          : (stripeInstance(this.key) as Stripe);\n\n        this.stripe$.next(stripe);\n      });\n  }\n\n  getInstance(): Stripe | undefined {\n    return this.stripe$.getValue();\n  }\n\n  elements(options?: StripeElementsOptions): Observable<StripeElements> {\n    return this.stripe$.asObservable().pipe(\n      filter((stripe) => Boolean(stripe)),\n      map((stripe) => stripe.elements(options)),\n      first()\n    );\n  }\n\n  redirectToCheckout(\n    options?: RedirectToCheckoutOptions\n  ): Observable<never | { error: StripeError }> {\n    return this.stripe.pipe(\n      switchMap((stripe) => from(stripe.redirectToCheckout(options))),\n      first()\n    );\n  }\n\n  confirmAuBecsDebitPayment(\n    clientSecret: string,\n    data?: ConfirmAuBecsDebitPaymentData\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmAuBecsDebitPayment(clientSecret, data))\n      ),\n      first()\n    );\n  }\n\n  confirmBancontactPayment(\n    clientSecret: string,\n    data?: ConfirmBancontactPaymentData,\n    options?: ConfirmBancontactPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmBancontactPayment(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmCardPayment(\n    clientSecret: string,\n    data?: ConfirmCardPaymentData,\n    options?: ConfirmCardPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmCardPayment(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmEpsPayment(\n    clientSecret: string,\n    data?: ConfirmEpsPaymentData,\n    options?: ConfirmEpsPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmEpsPayment(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmFpxPayment(\n    clientSecret: string,\n    data?: ConfirmFpxPaymentData,\n    options?: ConfirmFpxPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmFpxPayment(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmGiropayPayment(\n    clientSecret: string,\n    data?: ConfirmGiropayPaymentData,\n    options?: ConfirmGiropayPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmGiropayPayment(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmIdealPayment(\n    clientSecret: string,\n    data?: ConfirmIdealPaymentData,\n    options?: ConfirmIdealPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmIdealPayment(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmP24Payment(\n    clientSecret: string,\n    data?: ConfirmP24PaymentData,\n    options?: ConfirmP24PaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmP24Payment(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmSepaDebitPayment(\n    clientSecret: string,\n    data?: ConfirmSepaDebitPaymentData\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmSepaDebitPayment(clientSecret, data))\n      ),\n      first()\n    );\n  }\n\n  handleCardAction(\n    clientSecret: string\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) => from(stripe.handleCardAction(clientSecret))),\n      first()\n    );\n  }\n\n  createPaymentMethod(\n    paymentMethodData: CreatePaymentMethodData\n  ): Observable<{\n    paymentMethod?: PaymentMethod;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.createPaymentMethod(paymentMethodData))\n      ),\n      first()\n    );\n  }\n\n  retrievePaymentIntent(\n    clientSecret: string\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) => from(stripe.retrievePaymentIntent(clientSecret))),\n      first()\n    );\n  }\n\n  confirmAuBecsDebitSetup(\n    clientSecret: string,\n    data?: ConfirmAuBecsDebitSetupData\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmAuBecsDebitSetup(clientSecret, data))\n      ),\n      first()\n    );\n  }\n\n  confirmCardSetup(\n    clientSecret: string,\n    data?: ConfirmCardSetupData,\n    options?: ConfirmCardSetupOptions\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmCardSetup(clientSecret, data, options))\n      ),\n      first()\n    );\n  }\n\n  confirmSepaDebitSetup(\n    clientSecret: string,\n    data?: ConfirmSepaDebitSetupData\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from(stripe.confirmSepaDebitSetup(clientSecret, data))\n      ),\n      first()\n    );\n  }\n\n  retrieveSetupIntent(\n    clientSecret: string\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) => from(stripe.confirmSepaDebitSetup(clientSecret))),\n      first()\n    );\n  }\n\n  paymentRequest(options: PaymentRequestOptions): PaymentRequest | undefined {\n    const stripe = this.getInstance();\n\n    return stripe ? stripe.paymentRequest(options) : undefined;\n  }\n\n  createToken(\n    tokenType: StripeIbanElement,\n    data: CreateTokenIbanData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: StripeCardElement | StripeCardNumberElement,\n    data?: CreateTokenCardData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'pii',\n    data: CreateTokenPiiData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'bank_account',\n    data: CreateTokenBankAccountData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'cvc_update',\n    element?: StripeCardCvcElement\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'account',\n    data: TokenCreateParams.Account\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'person',\n    data: TokenCreateParams.Person\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(tokenType, data) {\n    return this.stripe.pipe(\n      switchMap((stripe) => from(stripe.createToken(tokenType, data))),\n      first()\n    );\n  }\n\n  createSource(\n    element: StripeElement,\n    sourceData: CreateSourceData\n  ): Observable<{ source?: Source; error?: StripeError }>;\n  createSource(\n    sourceData: CreateSourceData\n  ): Observable<{ source?: Source; error?: StripeError }>;\n  createSource(a, b?): Observable<{ source?: Source; error?: StripeError }> {\n    return this.stripe.pipe(\n      switchMap((stripe) => from(stripe.createSource(a, b))),\n      first()\n    );\n  }\n\n  retrieveSource(\n    source: RetrieveSourceParam\n  ): Observable<{ source?: Source; error?: StripeError }> {\n    return this.stripe.pipe(\n      switchMap((stripe) => from(stripe.retrieveSource(source))),\n      first()\n    );\n  }\n\n  /**\n   * @deprecated\n   */\n  handleCardPayment(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from((stripe as any).handleCardPayment(clientSecret, element, data))\n      ),\n      first()\n    );\n  }\n\n  /**\n   * @deprecated\n   */\n  confirmPaymentIntent(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from((stripe as any).confirmPaymentIntent(clientSecret, element, data))\n      ),\n      first()\n    );\n  }\n\n  /**\n   * @deprecated\n   */\n  handleCardSetup(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from((stripe as any).handleCardSetup(clientSecret, element, data))\n      ),\n      first()\n    );\n  }\n\n  /**\n   * @deprecated\n   */\n  confirmSetupIntent(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from((stripe as any).confirmSetupIntent(clientSecret, element, data))\n      ),\n      first()\n    );\n  }\n\n  /**\n   * @deprecated\n   */\n  handleFpxPayment(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.pipe(\n      switchMap((stripe) =>\n        from((stripe as any).handleFpxPayment(clientSecret, element, data))\n      ),\n      first()\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { StripeConstructorOptions } from '@stripe/stripe-js';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>(\n  'Stripe Publishable Key'\n);\nexport const STRIPE_OPTIONS = new InjectionToken<StripeConstructorOptions>(\n  'Stripe Options'\n);\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowRef {\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {}\n\n  public getNativeWindow(): Window {\n    if (isPlatformBrowser(this.platformId)) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {}\n\n  public getNativeDocument(): Document {\n    if (isPlatformBrowser(this.platformId)) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nimport { WindowRef } from './window-ref.service';\nimport { DocumentRef } from './document-ref.service';\n\nexport interface LazyStripeAPILoaderStatus {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  public status = new BehaviorSubject<LazyStripeAPILoaderStatus>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    @Inject(PLATFORM_ID) public platformId: any,\n    public window: WindowRef,\n    public document: DocumentRef\n  ) {}\n\n  public asStream(): Observable<LazyStripeAPILoaderStatus> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    const status: LazyStripeAPILoaderStatus = this.status.getValue();\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else if (!status.loaded && !status.loading) {\n      this.status.next({\n        ...status,\n        loading: true\n      });\n\n      const script = this.document.getNativeDocument().createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.src = 'https://js.stripe.com/v3/';\n\n      script.onload = () => {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      };\n\n      script.onerror = () => {\n        this.status.next({\n          error: true,\n          loaded: false,\n          loading: false\n        });\n      };\n\n      this.document.getNativeDocument().body.appendChild(script);\n    }\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport {\n  ConfirmAuBecsDebitPaymentData,\n  ConfirmAuBecsDebitSetupData,\n  ConfirmBancontactPaymentData,\n  ConfirmBancontactPaymentOptions,\n  ConfirmCardPaymentData,\n  ConfirmCardPaymentOptions,\n  ConfirmEpsPaymentData,\n  ConfirmEpsPaymentOptions,\n  ConfirmFpxPaymentData,\n  ConfirmFpxPaymentOptions,\n  ConfirmGiropayPaymentData,\n  ConfirmGiropayPaymentOptions,\n  ConfirmIdealPaymentData,\n  ConfirmIdealPaymentOptions,\n  ConfirmP24PaymentData,\n  ConfirmP24PaymentOptions,\n  ConfirmCardSetupData,\n  ConfirmCardSetupOptions,\n  ConfirmSepaDebitPaymentData,\n  ConfirmSepaDebitSetupData,\n  CreatePaymentMethodData,\n  CreateSourceData,\n  CreateTokenIbanData,\n  CreateTokenCardData,\n  CreateTokenPiiData,\n  CreateTokenBankAccountData,\n  PaymentIntent,\n  PaymentMethod,\n  PaymentRequest,\n  PaymentRequestOptions,\n  RedirectToCheckoutOptions,\n  RetrieveSourceParam,\n  SetupIntent,\n  Stripe,\n  StripeCardElement,\n  StripeCardNumberElement,\n  StripeCardCvcElement,\n  StripeConstructorOptions,\n  StripeElements,\n  StripeElementsOptions,\n  StripeElement,\n  StripeError,\n  StripeIbanElement,\n  Source,\n  Token,\n  TokenCreateParams\n} from '@stripe/stripe-js';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS\n} from '../interfaces/ngx-stripe.interface';\nimport { StripeServiceInterface } from '../interfaces/stripe-instance.interface';\n\nimport { WindowRef } from './window-ref.service';\nimport {\n  LazyStripeAPILoader,\n  LazyStripeAPILoaderStatus\n} from './api-loader.service';\n\nimport { StripeInstance } from './stripe-instance.class';\n\n@Injectable()\nexport class StripeService implements StripeServiceInterface {\n  stripe!: StripeInstance;\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) public key: string,\n    @Inject(STRIPE_OPTIONS) public options: StripeConstructorOptions,\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef\n  ) {\n    if (key) {\n      this.stripe = new StripeInstance(this.loader, this.window, key, options);\n    }\n  }\n\n  getStripeReference(): Observable<any> {\n    return this.loader.asStream().pipe(\n      filter((status: LazyStripeAPILoaderStatus) => status.loaded === true),\n      map(() => (this.window.getNativeWindow() as any).Stripe)\n    );\n  }\n\n  getInstance(): Stripe | undefined {\n    return this.stripe.getInstance();\n  }\n\n  setKey(key: string, options?: StripeConstructorOptions) {\n    return this.changeKey(key, options);\n  }\n\n  changeKey(key: string, options?: StripeConstructorOptions) {\n    this.stripe = new StripeInstance(this.loader, this.window, key, options);\n\n    return this.stripe;\n  }\n\n  elements(options?: StripeElementsOptions): Observable<StripeElements> {\n    return this.stripe.elements(options);\n  }\n\n  redirectToCheckout(\n    options?: RedirectToCheckoutOptions\n  ): Observable<never | { error: StripeError }> {\n    return this.stripe.redirectToCheckout(options);\n  }\n\n  confirmAuBecsDebitPayment(\n    clientSecret: string,\n    data?: ConfirmAuBecsDebitPaymentData\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);\n  }\n\n  confirmBancontactPayment(\n    clientSecret: string,\n    data?: ConfirmBancontactPaymentData,\n    options?: ConfirmBancontactPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmBancontactPayment(clientSecret, data, options);\n  }\n\n  confirmCardPayment(\n    clientSecret: string,\n    data?: ConfirmCardPaymentData,\n    options?: ConfirmCardPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmCardPayment(clientSecret, data, options);\n  }\n\n  confirmEpsPayment(\n    clientSecret: string,\n    data?: ConfirmEpsPaymentData,\n    options?: ConfirmEpsPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmEpsPayment(clientSecret, data, options);\n  }\n\n  confirmFpxPayment(\n    clientSecret: string,\n    data?: ConfirmFpxPaymentData,\n    options?: ConfirmFpxPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmFpxPayment(clientSecret, data, options);\n  }\n\n  confirmGiropayPayment(\n    clientSecret: string,\n    data?: ConfirmGiropayPaymentData,\n    options?: ConfirmGiropayPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmGiropayPayment(clientSecret, data, options);\n  }\n\n  confirmIdealPayment(\n    clientSecret: string,\n    data?: ConfirmIdealPaymentData,\n    options?: ConfirmIdealPaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmIdealPayment(clientSecret, data, options);\n  }\n\n  confirmP24Payment(\n    clientSecret: string,\n    data?: ConfirmP24PaymentData,\n    options?: ConfirmP24PaymentOptions\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmP24Payment(clientSecret, data, options);\n  }\n\n  confirmSepaDebitPayment(\n    clientSecret: string,\n    data?: ConfirmSepaDebitPaymentData\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmSepaDebitPayment(clientSecret, data);\n  }\n\n  handleCardAction(\n    clientSecret: string\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.handleCardAction(clientSecret);\n  }\n\n  createPaymentMethod(\n    paymentMethodData: CreatePaymentMethodData\n  ): Observable<{\n    paymentMethod?: PaymentMethod;\n    error?: StripeError;\n  }> {\n    return this.stripe.createPaymentMethod(paymentMethodData);\n  }\n\n  retrievePaymentIntent(\n    clientSecret: string\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.retrievePaymentIntent(clientSecret);\n  }\n\n  confirmAuBecsDebitSetup(\n    clientSecret: string,\n    data?: ConfirmAuBecsDebitSetupData\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);\n  }\n\n  confirmCardSetup(\n    clientSecret: string,\n    data?: ConfirmCardSetupData,\n    options?: ConfirmCardSetupOptions\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmCardSetup(clientSecret, data, options);\n  }\n\n  confirmSepaDebitSetup(\n    clientSecret: string,\n    data?: ConfirmSepaDebitSetupData\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmSepaDebitSetup(clientSecret, data);\n  }\n\n  retrieveSetupIntent(\n    clientSecret: string\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.retrieveSetupIntent(clientSecret);\n  }\n\n  paymentRequest(options: PaymentRequestOptions): PaymentRequest | undefined {\n    return this.stripe.paymentRequest(options);\n  }\n\n  createToken(\n    tokenType: StripeIbanElement,\n    data: CreateTokenIbanData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: StripeCardElement | StripeCardNumberElement,\n    data?: CreateTokenCardData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'pii',\n    data: CreateTokenPiiData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'bank_account',\n    data: CreateTokenBankAccountData\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'cvc_update',\n    element?: StripeCardCvcElement\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'account',\n    data: TokenCreateParams.Account\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(\n    tokenType: 'person',\n    data: TokenCreateParams.Person\n  ): Observable<{ token?: Token; error?: StripeError }>;\n  createToken(tokenType, data) {\n    return this.stripe.createToken(tokenType, data);\n  }\n\n  createSource(\n    element: StripeElement,\n    sourceData: CreateSourceData\n  ): Observable<{ source?: Source; error?: StripeError }>;\n  createSource(\n    sourceData: CreateSourceData\n  ): Observable<{ source?: Source; error?: StripeError }>;\n  createSource(a, b?): Observable<{ source?: Source; error?: StripeError }> {\n    return this.stripe.createSource(a, b);\n  }\n\n  retrieveSource(\n    source: RetrieveSourceParam\n  ): Observable<{ source?: Source; error?: StripeError }> {\n    return this.stripe.retrieveSource(source);\n  }\n\n  /**\n   * @deprecated\n   */\n  handleCardPayment(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.handleCardPayment(clientSecret, element, data);\n  }\n\n  /**\n   * @deprecated\n   */\n  confirmPaymentIntent(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmPaymentIntent(clientSecret, element, data);\n  }\n\n  /**\n   * @deprecated\n   */\n  handleCardSetup(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.handleCardSetup(clientSecret, element, data);\n  }\n\n  /**\n   * @deprecated\n   */\n  confirmSetupIntent(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.confirmSetupIntent(clientSecret, element, data);\n  }\n\n  /**\n   * @deprecated\n   */\n  handleFpxPayment(\n    clientSecret: string,\n    element?,\n    data?\n  ): Observable<{\n    setupIntent?: SetupIntent;\n    error?: StripeError;\n  }> {\n    return this.stripe.handleFpxPayment(clientSecret, element, data);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport {\n  PaymentRequest,\n  PaymentRequestOptions,\n  StripeCardElementOptions,\n  StripeAuBankAccountElementOptions,\n  StripeCardNumberElementOptions,\n  StripeCardExpiryElementOptions,\n  StripeElements,\n  StripeElementsOptions,\n  StripeFpxBankElementOptions,\n  StripeIbanElementOptions,\n  StripeIdealBankElementOptions,\n  StripePaymentRequestButtonElementOptions\n} from '@stripe/stripe-js';\n\nimport { StripeService } from './stripe.service';\n\n@Injectable()\nexport class StripeElementsService {\n  constructor(private stripeService: StripeService) {}\n\n  elements(\n    stripe,\n    options: StripeElementsOptions = {}\n  ): Observable<StripeElements> {\n    if (stripe) {\n      if (Object.keys(options).length > 0) {\n        return stripe.elements(options);\n      }\n      return stripe.elements();\n    } else {\n      if (Object.keys(options).length > 0) {\n        return this.stripeService.elements(options);\n      }\n      return this.stripeService.elements();\n    }\n  }\n\n  paymentRequest(\n    stripe,\n    options: PaymentRequestOptions\n  ): PaymentRequest | undefined {\n    return stripe\n      ? stripe.paymentRequest(options)\n      : this.stripeService.paymentRequest(options);\n  }\n\n  mergeOptions(\n    options: StripeCardElementOptions,\n    containerClass: string\n  ): StripeCardElementOptions;\n  mergeOptions(\n    options: StripeCardNumberElementOptions,\n    containerClass: string\n  ): StripeCardNumberElementOptions;\n  mergeOptions(\n    options: StripeCardExpiryElementOptions,\n    containerClass: string\n  ): StripeCardExpiryElementOptions;\n  mergeOptions(\n    options: StripeFpxBankElementOptions,\n    containerClass: string\n  ): StripeFpxBankElementOptions;\n  mergeOptions(\n    options: StripeIbanElementOptions,\n    containerClass: string\n  ): StripeIbanElementOptions;\n  mergeOptions(\n    options: StripeIdealBankElementOptions,\n    containerClass: string\n  ): StripeIdealBankElementOptions;\n  mergeOptions(\n    options: StripeAuBankAccountElementOptions,\n    containerClass: string\n  ): StripeAuBankAccountElementOptions;\n  mergeOptions(\n    options: StripePaymentRequestButtonElementOptions,\n    containerClass: string\n  ): StripePaymentRequestButtonElementOptions;\n  mergeOptions(options, containerClass: string) {\n    if (!containerClass || (options && options.classes)) {\n      return options || {};\n    }\n\n    if (!options || !options.classes) {\n      return {\n        ...(options || {}),\n        classes: {\n          base: containerClass,\n          complete: `${containerClass}--complete`,\n          empty: `${containerClass}--empty`,\n          focus: `${containerClass}--focus`,\n          invalid: `${containerClass}--invalid`,\n          webkitAutoFill: `${containerClass}--webkit-autoFill`\n        }\n      };\n    }\n\n    return options || {};\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  StripeElementsOptions,\n  StripeCardElementOptions,\n  StripeCardElement,\n  StripeElements,\n  StripeCardElementChangeEvent\n} from '@stripe/stripe-js';\n\nimport { StripeInstance } from '../services/stripe-instance.class';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeCardComponent implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeCardElement;\n\n  @Input() containerClass: string;\n  @Input() options: Partial<StripeCardElementOptions>;\n  @Input() elementsOptions: Partial<StripeElementsOptions>;\n  @Input() stripe: StripeInstance;\n\n  @Output() load = new EventEmitter<StripeCardElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeCardElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  state: 'notready' | 'starting' | 'ready' = 'notready';\n\n  constructor(public stripeElementsService: StripeElementsService) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    this.state = 'starting';\n\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n    let updateElements = false;\n\n    if (changes.elementsOptions || changes.stripe || !this.elements) {\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe, this.elementsOptions)\n        .toPromise();\n      updateElements = true;\n    }\n\n    if (\n      changes.options ||\n      changes.containerClass ||\n      !this.element ||\n      updateElements\n    ) {\n      if (this.element && !updateElements) {\n        this.update(options);\n      } else if (this.elements && updateElements) {\n        this.createElement(options);\n      }\n    }\n\n    this.state = 'ready';\n  }\n\n  async ngOnInit() {\n    if (this.state === 'notready') {\n      this.state = 'starting';\n\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe)\n        .toPromise();\n      this.createElement();\n\n      this.state = 'ready';\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n  }\n\n  update(options: Partial<StripeCardElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getCard() {\n    return this.element;\n  }\n\n  private createElement(options: Partial<StripeCardElementOptions> = {}) {\n    this.element = this.elements.create('card', options);\n    this.element.on('change', (ev) => this.change.emit(ev));\n    this.element.on('blur', () => this.blur.emit());\n    this.element.on('focus', () => this.focus.emit());\n    this.element.on('ready', () => this.ready.emit());\n    this.element.on('escape', () => this.escape.emit());\n\n    this.element.mount(this.stripeElementRef.nativeElement);\n\n    this.load.emit(this.element);\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport { StripeElements, StripeElementsOptions } from '@stripe/stripe-js';\n\nimport { StripeInstance } from '../services/stripe-instance.class';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Directive({\n  selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'\n})\nexport class StripeCardGroupDirective implements OnInit, OnChanges {\n  @Input() elementsOptions: Partial<StripeElementsOptions>;\n  @Input() stripe: StripeInstance;\n\n  @Output() elements = new EventEmitter<StripeElements>();\n\n  _elements: StripeElements;\n  state: 'notready' | 'starting' | 'ready' = 'notready';\n\n  constructor(public stripeElementsService: StripeElementsService) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    this.state = 'starting';\n\n    const elementsOptions = this.elementsOptions;\n    const stripe = this.stripe;\n\n    if (changes.elementsOptions || changes.stripe || !this._elements) {\n      this._elements = await this.stripeElementsService\n        .elements(stripe, elementsOptions)\n        .toPromise();\n      this.elements.emit(this._elements);\n    }\n\n    this.state = 'ready';\n  }\n\n  async ngOnInit() {\n    if (this.state === 'notready') {\n      this.state = 'starting';\n\n      this._elements = await this.stripeElementsService\n        .elements(this.stripe)\n        .toPromise();\n      this.elements.emit(this._elements);\n\n      this.state = 'ready';\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport {\n  StripeElements,\n  StripeCardNumberElement,\n  StripeCardNumberElementOptions,\n  StripeCardNumberElementChangeEvent\n} from '@stripe/stripe-js';\n\nimport { StripeCardGroupDirective } from '../directives/card-group.directive';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-card-number',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeCardNumberComponent implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeCardNumberElement;\n\n  @Input() containerClass: string;\n  @Input() options: Partial<StripeCardNumberElementOptions>;\n\n  @Output() load = new EventEmitter<StripeCardNumberElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeCardNumberElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  cardGroupSubscription: Subscription;\n\n  constructor(\n    public stripeElementsService: StripeElementsService,\n    @Optional() private cardGroup: StripeCardGroupDirective\n  ) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    if (changes.options || changes.containerClass) {\n      this.setupElement('options');\n    }\n  }\n\n  ngOnInit() {\n    if (this.cardGroup) {\n      this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        (elements: StripeElements) => {\n          this.elements = elements;\n          this.setupElement('elements');\n        }\n      );\n    } else {\n      throw new Error(\n        'StripeCardNumberComponent must have StripeCardGroupDirective parent'\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n    if (this.cardGroupSubscription) {\n      this.cardGroupSubscription.unsubscribe();\n    }\n  }\n\n  update(options: Partial<StripeCardNumberElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getCardNumber() {\n    return this.element;\n  }\n\n  private setupElement(source: 'elements' | 'options') {\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n\n    if (this.element && source === 'options') {\n      this.update(options);\n    } else if (this.elements && source === 'elements') {\n      this.element = this.elements.create('cardNumber', options);\n      this.element.on('change', (ev) => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n\n      this.element.mount(this.stripeElementRef.nativeElement);\n\n      this.load.emit(this.element);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport {\n  StripeElements,\n  StripeCardExpiryElement,\n  StripeCardExpiryElementOptions,\n  StripeCardExpiryElementChangeEvent\n} from '@stripe/stripe-js';\n\nimport { StripeCardGroupDirective } from '../directives/card-group.directive';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-card-expiry',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeCardExpiryComponent implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeCardExpiryElement;\n\n  @Input() containerClass: string;\n  @Input() options: Partial<StripeCardExpiryElementOptions>;\n\n  @Output() load = new EventEmitter<StripeCardExpiryElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeCardExpiryElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  cardGroupSubscription: Subscription;\n\n  constructor(\n    public stripeElementsService: StripeElementsService,\n    @Optional() private cardGroup: StripeCardGroupDirective\n  ) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    if (changes.options || changes.containerClass) {\n      this.setupElement('options');\n    }\n  }\n\n  ngOnInit() {\n    if (this.cardGroup) {\n      this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        (elements: StripeElements) => {\n          this.elements = elements;\n          this.setupElement('elements');\n        }\n      );\n    } else {\n      throw new Error(\n        'StripeCardExpiryComponent must have StripeCardGroupDirective parent'\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n    if (this.cardGroupSubscription) {\n      this.cardGroupSubscription.unsubscribe();\n    }\n  }\n\n  update(options: Partial<StripeCardExpiryElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getCardExpiry() {\n    return this.element;\n  }\n\n  private setupElement(source: 'elements' | 'options') {\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n\n    if (this.element && source === 'options') {\n      this.update(options);\n    } else if (this.elements && source === 'elements') {\n      this.element = this.elements.create('cardExpiry', options);\n      this.element.on('change', (ev) => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n\n      this.element.mount(this.stripeElementRef.nativeElement);\n\n      this.load.emit(this.element);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport {\n  StripeElements,\n  StripeCardCvcElement,\n  StripeCardCvcElementChangeEvent,\n  StripeCardCvcElementOptions\n} from '@stripe/stripe-js';\n\nimport { StripeCardGroupDirective } from '../directives/card-group.directive';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-card-cvc',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeCardCvcComponent implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeCardCvcElement;\n\n  @Input() containerClass: string;\n  @Input() options: Partial<StripeCardCvcElementOptions>;\n\n  @Output() load = new EventEmitter<StripeCardCvcElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeCardCvcElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  cardGroupSubscription: Subscription;\n\n  constructor(\n    public stripeElementsService: StripeElementsService,\n    @Optional() private cardGroup: StripeCardGroupDirective\n  ) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    if (changes.options || changes.containerClass) {\n      this.setupElement('options');\n    }\n  }\n\n  ngOnInit() {\n    if (this.cardGroup) {\n      this.cardGroupSubscription = this.cardGroup.elements.subscribe(\n        (elements: StripeElements) => {\n          this.elements = elements;\n          this.setupElement('elements');\n        }\n      );\n    } else {\n      throw new Error(\n        'StripeCardCvcComponent must have StripeCardGroupDirective parent'\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n    if (this.cardGroupSubscription) {\n      this.cardGroupSubscription.unsubscribe();\n    }\n  }\n\n  update(options: Partial<StripeCardCvcElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getCardCvc() {\n    return this.element;\n  }\n\n  private setupElement(source: 'elements' | 'options') {\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n\n    if (this.element && source === 'options') {\n      this.update(options);\n    } else if (this.elements && source === 'elements') {\n      this.element = this.elements.create('cardCvc', options);\n      this.element.on('change', (ev) => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n\n      this.element.mount(this.stripeElementRef.nativeElement);\n\n      this.load.emit(this.element);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  StripeElementsOptions,\n  StripeElements,\n  StripeFpxBankElement,\n  StripeFpxBankElementChangeEvent,\n  StripeFpxBankElementOptions\n} from '@stripe/stripe-js';\n\nimport { StripeInstance } from '../services/stripe-instance.class';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-fpx-bank',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeFpxBankComponent implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeFpxBankElement;\n\n  @Input() containerClass: string;\n  @Input() options: StripeFpxBankElementOptions;\n  @Input() elementsOptions: Partial<StripeElementsOptions>;\n  @Input() stripe: StripeInstance;\n\n  @Output() load = new EventEmitter<StripeFpxBankElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeFpxBankElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  state: 'notready' | 'starting' | 'ready' = 'notready';\n\n  constructor(public stripeElementsService: StripeElementsService) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    this.state = 'starting';\n\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n    let updateElements = false;\n\n    if (changes.elementsOptions || changes.stripe || !this.elements) {\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe, this.elementsOptions)\n        .toPromise();\n      updateElements = true;\n    }\n\n    if (\n      changes.options ||\n      changes.containerClass ||\n      !this.element ||\n      updateElements\n    ) {\n      if (this.element && !updateElements) {\n        this.update(options);\n      } else if (this.elements && updateElements) {\n        this.createElement(options);\n      }\n    }\n\n    this.state = 'ready';\n  }\n\n  async ngOnInit() {\n    if (this.state === 'notready') {\n      this.state = 'starting';\n\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe)\n        .toPromise();\n      this.createElement();\n\n      this.state = 'ready';\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n  }\n\n  update(options: Partial<StripeFpxBankElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getFpxBank() {\n    return this.element;\n  }\n\n  private createElement(\n    options: StripeFpxBankElementOptions = { accountHolderType: 'individual' }\n  ) {\n    this.element = this.elements.create('fpxBank', options);\n    this.element.on('change', (ev) => this.change.emit(ev));\n    this.element.on('blur', () => this.blur.emit());\n    this.element.on('focus', () => this.focus.emit());\n    this.element.on('ready', () => this.ready.emit());\n    this.element.on('escape', () => this.escape.emit());\n\n    this.element.mount(this.stripeElementRef.nativeElement);\n\n    this.load.emit(this.element);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  StripeElementsOptions,\n  StripeElements,\n  StripeIdealBankElement,\n  StripeIdealBankElementOptions,\n  StripeIdealBankElementChangeEvent\n} from '@stripe/stripe-js';\n\nimport { StripeInstance } from '../services/stripe-instance.class';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-ideal-bank',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeIdealBankComponent implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeIdealBankElement;\n\n  @Input() containerClass: string;\n  @Input() options: Partial<StripeIdealBankElementOptions>;\n  @Input() elementsOptions: Partial<StripeElementsOptions>;\n  @Input() stripe: StripeInstance;\n\n  @Output() load = new EventEmitter<StripeIdealBankElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeIdealBankElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  state: 'notready' | 'starting' | 'ready' = 'notready';\n\n  constructor(public stripeElementsService: StripeElementsService) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    this.state = 'starting';\n\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n    let updateElements = false;\n\n    if (changes.elementsOptions || changes.stripe || !this.elements) {\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe, this.elementsOptions)\n        .toPromise();\n      updateElements = true;\n    }\n\n    if (\n      changes.options ||\n      changes.containerClass ||\n      !this.element ||\n      updateElements\n    ) {\n      if (this.element && !updateElements) {\n        this.update(options);\n      } else if (this.elements && updateElements) {\n        this.createElement(options);\n      }\n    }\n\n    this.state = 'ready';\n  }\n\n  async ngOnInit() {\n    if (this.state === 'notready') {\n      this.state = 'starting';\n\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe)\n        .toPromise();\n      this.createElement();\n\n      this.state = 'ready';\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n  }\n\n  update(options: Partial<StripeIdealBankElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getIdealBank() {\n    return this.element;\n  }\n\n  private createElement(options: Partial<StripeIdealBankElementOptions> = {}) {\n    this.element = this.elements.create('idealBank', options);\n    this.element.on('change', (ev) => this.change.emit(ev));\n    this.element.on('blur', () => this.blur.emit());\n    this.element.on('focus', () => this.focus.emit());\n    this.element.on('ready', () => this.ready.emit());\n    this.element.on('escape', () => this.escape.emit());\n\n    this.element.mount(this.stripeElementRef.nativeElement);\n\n    this.load.emit(this.element);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  StripeElementsOptions,\n  StripeElements,\n  StripeIbanElement,\n  StripeIbanElementOptions,\n  StripeIbanElementChangeEvent\n} from '@stripe/stripe-js';\n\nimport { StripeInstance } from '../services/stripe-instance.class';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-iban',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeIbanComponent implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeIbanElement;\n\n  @Input() containerClass: string;\n  @Input() options: Partial<StripeIbanElementOptions>;\n  @Input() elementsOptions: Partial<StripeElementsOptions>;\n  @Input() stripe: StripeInstance;\n\n  @Output() load = new EventEmitter<StripeIbanElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeIbanElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  state: 'notready' | 'starting' | 'ready' = 'notready';\n\n  constructor(public stripeElementsService: StripeElementsService) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    this.state = 'starting';\n\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n    let updateElements = false;\n\n    if (changes.elementsOptions || changes.stripe || !this.elements) {\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe, this.elementsOptions)\n        .toPromise();\n      updateElements = true;\n    }\n\n    if (\n      changes.options ||\n      changes.containerClass ||\n      !this.element ||\n      updateElements\n    ) {\n      if (this.element && !updateElements) {\n        this.update(options);\n      } else if (this.elements && updateElements) {\n        this.createElement(options);\n      }\n    }\n\n    this.state = 'ready';\n  }\n\n  async ngOnInit() {\n    if (this.state === 'notready') {\n      this.state = 'starting';\n\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe)\n        .toPromise();\n      this.createElement();\n\n      this.state = 'ready';\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n  }\n\n  update(options: Partial<StripeIbanElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getIban() {\n    return this.element;\n  }\n\n  private createElement(options: Partial<StripeIbanElementOptions> = {}) {\n    this.element = this.elements.create('iban', options);\n    this.element.on('change', (ev) => this.change.emit(ev));\n    this.element.on('blur', () => this.blur.emit());\n    this.element.on('focus', () => this.focus.emit());\n    this.element.on('ready', () => this.ready.emit());\n    this.element.on('escape', () => this.escape.emit());\n\n    this.element.mount(this.stripeElementRef.nativeElement);\n\n    this.load.emit(this.element);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  StripeElementsOptions,\n  StripeElements,\n  StripeAuBankAccountElement,\n  StripeAuBankAccountElementOptions,\n  StripeAuBankAccountElementChangeEvent\n} from '@stripe/stripe-js';\n\nimport { StripeInstance } from '../services/stripe-instance.class';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-au-bank-account',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripeAuBankAccountComponent\n  implements OnInit, OnChanges, OnDestroy {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripeAuBankAccountElement;\n\n  @Input() containerClass: string;\n  @Input() options: Partial<StripeAuBankAccountElementOptions>;\n  @Input() elementsOptions: Partial<StripeElementsOptions>;\n  @Input() stripe: StripeInstance;\n\n  @Output() load = new EventEmitter<StripeAuBankAccountElement>();\n\n  @Output() blur = new EventEmitter<void>();\n  @Output() change = new EventEmitter<StripeAuBankAccountElementChangeEvent>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n  @Output() escape = new EventEmitter<void>();\n\n  elements: StripeElements;\n  state: 'notready' | 'starting' | 'ready' = 'notready';\n\n  constructor(public stripeElementsService: StripeElementsService) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    this.state = 'starting';\n\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n    let updateElements = false;\n\n    if (changes.elementsOptions || changes.stripe || !this.elements) {\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe, this.elementsOptions)\n        .toPromise();\n      updateElements = true;\n    }\n\n    if (\n      changes.options ||\n      changes.containerClass ||\n      !this.element ||\n      updateElements\n    ) {\n      if (this.element && !updateElements) {\n        this.update(options);\n      } else if (this.elements && updateElements) {\n        this.createElement(options);\n      }\n    }\n\n    this.state = 'ready';\n  }\n\n  async ngOnInit() {\n    if (this.state === 'notready') {\n      this.state = 'starting';\n\n      this.elements = await this.stripeElementsService\n        .elements(this.stripe)\n        .toPromise();\n      this.createElement();\n\n      this.state = 'ready';\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.element) {\n      this.element.destroy();\n    }\n  }\n\n  update(options: Partial<StripeAuBankAccountElementOptions>) {\n    this.element.update(options);\n  }\n\n  /**\n   * @deprecated\n   */\n  getAuBankAccount() {\n    return this.element;\n  }\n\n  private createElement(\n    options: Partial<StripeAuBankAccountElementOptions> = {}\n  ) {\n    this.element = this.elements.create('auBankAccount', options);\n    this.element.on('change', (ev) => this.change.emit(ev));\n    this.element.on('blur', () => this.blur.emit());\n    this.element.on('focus', () => this.focus.emit());\n    this.element.on('ready', () => this.ready.emit());\n    this.element.on('escape', () => this.escape.emit());\n\n    this.element.mount(this.stripeElementRef.nativeElement);\n\n    this.load.emit(this.element);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { Observable, from } from 'rxjs';\n\nimport {\n  StripeElementsOptions,\n  StripeElements,\n  PaymentRequestOptions,\n  PaymentRequest,\n  CanMakePaymentResult,\n  PaymentRequestUpdateOptions,\n  StripePaymentRequestButtonElement,\n  StripePaymentRequestButtonElementOptions,\n  StripePaymentRequestButtonElementClickEvent,\n  PaymentRequestTokenEvent,\n  PaymentRequestPaymentMethodEvent,\n  PaymentRequestSourceEvent,\n  PaymentRequestShippingAddressEvent,\n  PaymentRequestShippingOptionEvent\n} from '@stripe/stripe-js';\n\nimport { StripeInstance } from '../services/stripe-instance.class';\nimport { StripeElementsService } from '../services/stripe-elements.service';\n\n@Component({\n  selector: 'ngx-stripe-payment-request-button',\n  template: `<div class=\"field\" #stripeElementRef></div>`\n})\nexport class StripePaymentRequestButtonComponent implements OnChanges {\n  @ViewChild('stripeElementRef') public stripeElementRef!: ElementRef;\n  element!: StripePaymentRequestButtonElement;\n  paymentRequest!: PaymentRequest;\n\n  @Input() containerClass: string;\n  @Input() paymentOptions: PaymentRequestOptions;\n  @Input() options: StripePaymentRequestButtonElementOptions;\n  @Input() elementsOptions: Partial<StripeElementsOptions>;\n  @Input() stripe: StripeInstance;\n\n  @Output() load = new EventEmitter<{\n    paymentRequestButton: StripePaymentRequestButtonElement;\n    paymentRequest: PaymentRequest;\n  }>();\n\n  @Output() change = new EventEmitter<\n    StripePaymentRequestButtonElementClickEvent\n  >();\n  @Output() blur = new EventEmitter<void>();\n  @Output() focus = new EventEmitter<void>();\n  @Output() ready = new EventEmitter<void>();\n\n  @Output() token = new EventEmitter<PaymentRequestTokenEvent>();\n  @Output() paymentMethod = new EventEmitter<\n    PaymentRequestPaymentMethodEvent\n  >();\n  @Output() source = new EventEmitter<PaymentRequestSourceEvent>();\n  @Output() cancel = new EventEmitter<void>();\n  @Output() shippingaddresschange = new EventEmitter<\n    PaymentRequestShippingAddressEvent\n  >();\n  @Output() shippingoptionchange = new EventEmitter<\n    PaymentRequestShippingOptionEvent\n  >();\n  @Output() notavailable = new EventEmitter<void>();\n\n  elements: StripeElements;\n\n  constructor(public stripeElementsService: StripeElementsService) {}\n\n  async ngOnChanges(changes: SimpleChanges) {\n    const options = this.stripeElementsService.mergeOptions(\n      this.options,\n      this.containerClass\n    );\n    const elementsOptions = this.elementsOptions;\n    const stripe = this.stripe;\n    let updateElements = false;\n\n    if (changes.elementsOptions || changes.stripe || !this.elements) {\n      const elements = await this.stripeElementsService\n        .elements(stripe, elementsOptions)\n        .toPromise();\n      this.elements = elements;\n      updateElements = true;\n    }\n\n    if (changes.paymentOptions && this.paymentRequest) {\n      this.updateRequest(this.paymentOptions);\n    }\n\n    if (\n      changes.options ||\n      changes.containerClass ||\n      !this.element ||\n      updateElements\n    ) {\n      if (this.element && !updateElements) {\n        this.update(options);\n      } else if (this.elements && updateElements) {\n        this.paymentRequest = this.stripeElementsService.paymentRequest(\n          stripe,\n          this.paymentOptions\n        );\n        this.paymentRequest.on('token', (ev) => this.token.emit(ev));\n        this.paymentRequest.on('paymentmethod', (ev) =>\n          this.paymentMethod.emit(ev)\n        );\n        this.paymentRequest.on('source', (ev) => this.source.emit(ev));\n        this.paymentRequest.on('cancel', () => this.cancel.emit());\n        this.paymentRequest.on('shippingaddresschange', (ev) =>\n          this.shippingaddresschange.emit(ev)\n        );\n        this.paymentRequest.on('shippingoptionchange', (ev) =>\n          this.shippingoptionchange.emit(ev)\n        );\n        this.element = this.elements.create('paymentRequestButton', {\n          paymentRequest: this.paymentRequest,\n          ...options\n        });\n\n        this.canMakePayment().subscribe((result) => {\n          if (result) {\n            this.element.on('click', (ev) => this.change.emit(ev));\n            this.element.on('blur', () => this.blur.emit());\n            this.element.on('focus', () => this.focus.emit());\n            this.element.on('ready', () => this.ready.emit());\n\n            this.element.mount(this.stripeElementRef.nativeElement);\n\n            this.load.emit({\n              paymentRequestButton: this.element,\n              paymentRequest: this.paymentRequest\n            });\n          } else {\n            this.notavailable.emit();\n          }\n        });\n      }\n    }\n  }\n\n  canMakePayment(): Observable<CanMakePaymentResult | null> {\n    return from(this.paymentRequest.canMakePayment());\n  }\n\n  update(options: Partial<StripePaymentRequestButtonElementOptions>) {\n    this.element.update(options);\n  }\n\n  updateRequest(options: PaymentRequestUpdateOptions) {\n    this.paymentRequest.update(options);\n  }\n\n  show() {\n    this.paymentRequest.show();\n  }\n\n  /**\n   * @deprecated\n   */\n  getButton() {\n    return this.element;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { StripeConstructorOptions } from '@stripe/stripe-js';\n\nimport {\n  STRIPE_OPTIONS,\n  STRIPE_PUBLISHABLE_KEY\n} from '../interfaces/ngx-stripe.interface';\n\nimport { LazyStripeAPILoader } from './api-loader.service';\nimport { WindowRef } from './window-ref.service';\n\nimport { StripeInstance } from './stripe-instance.class';\n\n@Injectable()\nexport class StripeFactoryService {\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) public baseKey: string,\n    @Inject(STRIPE_OPTIONS) public baseOptions: StripeConstructorOptions,\n    public loader: LazyStripeAPILoader,\n    public window: WindowRef\n  ) {}\n\n  public create(\n    key?: string,\n    options?: StripeConstructorOptions\n  ): StripeInstance {\n    if (!key && !this.baseKey) {\n      return null;\n    }\n\n    return new StripeInstance(\n      this.loader,\n      this.window,\n      key || this.baseKey,\n      options || this.baseOptions\n    );\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { StripeConstructorOptions } from '@stripe/stripe-js';\n\nimport { StripeCardComponent } from './components/card.component';\nimport { StripeCardNumberComponent } from './components/card-number.component';\nimport { StripeCardExpiryComponent } from './components/card-expiry.component';\nimport { StripeCardCvcComponent } from './components/card-cvc.component';\nimport { StripeFpxBankComponent } from './components/fpx-bank.component';\nimport { StripeIdealBankComponent } from './components/ideal-bank.component';\nimport { StripeIbanComponent } from './components/iban.component';\nimport { StripeAuBankAccountComponent } from './components/au-bank-account.component';\nimport { StripePaymentRequestButtonComponent } from './components/payment-request-button.component';\n\nimport { StripeCardGroupDirective } from './directives/card-group.directive';\n\nimport {\n  STRIPE_OPTIONS,\n  STRIPE_PUBLISHABLE_KEY\n} from './interfaces/ngx-stripe.interface';\n\nimport { LazyStripeAPILoader } from './services/api-loader.service';\nimport { WindowRef } from './services/window-ref.service';\nimport { DocumentRef } from './services/document-ref.service';\nimport { StripeService } from './services/stripe.service';\nimport { StripeFactoryService } from './services/stripe-factory.service';\nimport { StripeElementsService } from './services/stripe-elements.service';\n\nconst components = [\n  StripeCardComponent,\n  StripeCardNumberComponent,\n  StripeCardExpiryComponent,\n  StripeCardCvcComponent,\n  StripeFpxBankComponent,\n  StripeIdealBankComponent,\n  StripeIbanComponent,\n  StripeAuBankAccountComponent,\n  StripePaymentRequestButtonComponent\n];\n\nconst directives = [StripeCardGroupDirective];\n\n@NgModule({\n  declarations: [...components, ...directives],\n  exports: [...components, ...directives]\n})\nexport class NgxStripeModule {\n  public static forRoot(\n    publishableKey?: string,\n    options?: StripeConstructorOptions\n  ): ModuleWithProviders<NgxStripeModule> {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        StripeElementsService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n\n  public static forChild(\n    publishableKey?: string,\n    options?: StripeConstructorOptions\n  ): ModuleWithProviders<NgxStripeModule> {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        StripeElementsService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}