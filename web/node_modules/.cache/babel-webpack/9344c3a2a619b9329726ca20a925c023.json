{"ast":null,"code":"import _createForOfIteratorHelper from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Directive, ElementRef, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} node\n * @return {?}\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nfunction isElement(node) {\n  return !!(node && (node.nodeName || node.prop && node.attr && node.find));\n}\n\nvar FileLikeObject = /*#__PURE__*/function () {\n  /**\n   * @param {?} fileOrInput\n   */\n  function FileLikeObject(fileOrInput) {\n    _classCallCheck(this, FileLikeObject);\n\n    this.rawFile = fileOrInput;\n    /** @type {?} */\n\n    var isInput = isElement(fileOrInput);\n    /** @type {?} */\n\n    var fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;\n    /** @type {?} */\n\n    var postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';\n    /** @type {?} */\n\n    var method = '_createFrom' + postfix;\n\n    /** @type {?} */\n    this[method](fakePathOrObject);\n  }\n  /**\n   * @param {?} path\n   * @return {?}\n   */\n\n\n  _createClass(FileLikeObject, [{\n    key: \"_createFromFakePath\",\n    value: function _createFromFakePath(path) {\n      this.lastModifiedDate = void 0;\n      this.size = void 0;\n      this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();\n      this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\\\') + 2);\n    }\n    /**\n     * @param {?} object\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createFromObject\",\n    value: function _createFromObject(object) {\n      this.size = object.size;\n      this.type = object.type;\n      this.name = object.name;\n    }\n  }]);\n\n  return FileLikeObject;\n}();\n\nif (false) {\n  /** @type {?} */\n  FileLikeObject.prototype.lastModifiedDate;\n  /** @type {?} */\n\n  FileLikeObject.prototype.size;\n  /** @type {?} */\n\n  FileLikeObject.prototype.type;\n  /** @type {?} */\n\n  FileLikeObject.prototype.name;\n  /** @type {?} */\n\n  FileLikeObject.prototype.rawFile;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar FileItem = /*#__PURE__*/function () {\n  /**\n   * @param {?} uploader\n   * @param {?} some\n   * @param {?} options\n   */\n  function FileItem(uploader, some, options) {\n    _classCallCheck(this, FileItem);\n\n    this.url = '/';\n    this.headers = [];\n    this.withCredentials = true;\n    this.formData = [];\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = false;\n    this.isSuccess = false;\n    this.isCancel = false;\n    this.isError = false;\n    this.progress = 0;\n    this.index = void 0;\n    this.uploader = uploader;\n    this.some = some;\n    this.options = options;\n    this.file = new FileLikeObject(some);\n    this._file = some;\n\n    if (uploader.options) {\n      this.method = uploader.options.method || 'POST';\n      this.alias = uploader.options.itemAlias || 'file';\n    }\n\n    this.url = uploader.options.url;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(FileItem, [{\n    key: \"upload\",\n    value: function upload() {\n      try {\n        this.uploader.uploadItem(this);\n      } catch (e) {\n        this.uploader._onCompleteItem(this, '', 0, {});\n\n        this.uploader._onErrorItem(this, '', 0, {});\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.uploader.cancelItem(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.uploader.removeFromQueue(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"onBeforeUpload\",\n    value: function onBeforeUpload() {\n      return void 0;\n    }\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n\n  }, {\n    key: \"onBuildForm\",\n    value: function onBuildForm(form) {\n      return {\n        form: form\n      };\n    }\n    /**\n     * @param {?} progress\n     * @return {?}\n     */\n\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(progress) {\n      return {\n        progress: progress\n      };\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess(response, status, headers) {\n      return {\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(response, status, headers) {\n      return {\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onCancel\",\n    value: function onCancel(response, status, headers) {\n      return {\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onComplete\",\n    value: function onComplete(response, status, headers) {\n      return {\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBeforeUpload\",\n    value: function _onBeforeUpload() {\n      this.isReady = true;\n      this.isUploading = true;\n      this.isUploaded = false;\n      this.isSuccess = false;\n      this.isCancel = false;\n      this.isError = false;\n      this.progress = 0;\n      this.onBeforeUpload();\n    }\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBuildForm\",\n    value: function _onBuildForm(form) {\n      this.onBuildForm(form);\n    }\n    /**\n     * @param {?} progress\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onProgress\",\n    value: function _onProgress(progress) {\n      this.progress = progress;\n      this.onProgress(progress);\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSuccess\",\n    value: function _onSuccess(response, status, headers) {\n      this.isReady = false;\n      this.isUploading = false;\n      this.isUploaded = true;\n      this.isSuccess = true;\n      this.isCancel = false;\n      this.isError = false;\n      this.progress = 100;\n      this.index = void 0;\n      this.onSuccess(response, status, headers);\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onError\",\n    value: function _onError(response, status, headers) {\n      this.isReady = false;\n      this.isUploading = false;\n      this.isUploaded = true;\n      this.isSuccess = false;\n      this.isCancel = false;\n      this.isError = true;\n      this.progress = 0;\n      this.index = void 0;\n      this.onError(response, status, headers);\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onCancel\",\n    value: function _onCancel(response, status, headers) {\n      this.isReady = false;\n      this.isUploading = false;\n      this.isUploaded = false;\n      this.isSuccess = false;\n      this.isCancel = true;\n      this.isError = false;\n      this.progress = 0;\n      this.index = void 0;\n      this.onCancel(response, status, headers);\n    }\n    /**\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onComplete\",\n    value: function _onComplete(response, status, headers) {\n      this.onComplete(response, status, headers);\n\n      if (this.uploader.options.removeAfterUpload) {\n        this.remove();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_prepareToUploading\",\n    value: function _prepareToUploading() {\n      this.index = this.index || ++this.uploader._nextIndex;\n      this.isReady = true;\n    }\n  }]);\n\n  return FileItem;\n}();\n\nif (false) {\n  /** @type {?} */\n  FileItem.prototype.file;\n  /** @type {?} */\n\n  FileItem.prototype._file;\n  /** @type {?} */\n\n  FileItem.prototype.alias;\n  /** @type {?} */\n\n  FileItem.prototype.url;\n  /** @type {?} */\n\n  FileItem.prototype.method;\n  /** @type {?} */\n\n  FileItem.prototype.headers;\n  /** @type {?} */\n\n  FileItem.prototype.withCredentials;\n  /** @type {?} */\n\n  FileItem.prototype.formData;\n  /** @type {?} */\n\n  FileItem.prototype.isReady;\n  /** @type {?} */\n\n  FileItem.prototype.isUploading;\n  /** @type {?} */\n\n  FileItem.prototype.isUploaded;\n  /** @type {?} */\n\n  FileItem.prototype.isSuccess;\n  /** @type {?} */\n\n  FileItem.prototype.isCancel;\n  /** @type {?} */\n\n  FileItem.prototype.isError;\n  /** @type {?} */\n\n  FileItem.prototype.progress;\n  /** @type {?} */\n\n  FileItem.prototype.index;\n  /** @type {?} */\n\n  FileItem.prototype._xhr;\n  /** @type {?} */\n\n  FileItem.prototype._form;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileItem.prototype.uploader;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileItem.prototype.some;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileItem.prototype.options;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar FileType = /*#__PURE__*/function () {\n  function FileType() {\n    _classCallCheck(this, FileType);\n  }\n\n  _createClass(FileType, null, [{\n    key: \"getMimeClass\",\n\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    value: function getMimeClass(file) {\n      /** @type {?} */\n      var mimeClass = 'application';\n\n      if (this.mime_psd.indexOf(file.type) !== -1) {\n        mimeClass = 'image';\n      } else if (file.type.match('image.*')) {\n        mimeClass = 'image';\n      } else if (file.type.match('video.*')) {\n        mimeClass = 'video';\n      } else if (file.type.match('audio.*')) {\n        mimeClass = 'audio';\n      } else if (file.type === 'application/pdf') {\n        mimeClass = 'pdf';\n      } else if (this.mime_compress.indexOf(file.type) !== -1) {\n        mimeClass = 'compress';\n      } else if (this.mime_doc.indexOf(file.type) !== -1) {\n        mimeClass = 'doc';\n      } else if (this.mime_xsl.indexOf(file.type) !== -1) {\n        mimeClass = 'xls';\n      } else if (this.mime_ppt.indexOf(file.type) !== -1) {\n        mimeClass = 'ppt';\n      }\n\n      if (mimeClass === 'application') {\n        mimeClass = this.fileTypeDetection(file.name);\n      }\n\n      return mimeClass;\n    }\n    /**\n     * @param {?} inputFilename\n     * @return {?}\n     */\n\n  }, {\n    key: \"fileTypeDetection\",\n    value: function fileTypeDetection(inputFilename) {\n      /** @type {?} */\n      var types = {\n        'jpg': 'image',\n        'jpeg': 'image',\n        'tif': 'image',\n        'psd': 'image',\n        'bmp': 'image',\n        'png': 'image',\n        'nef': 'image',\n        'tiff': 'image',\n        'cr2': 'image',\n        'dwg': 'image',\n        'cdr': 'image',\n        'ai': 'image',\n        'indd': 'image',\n        'pin': 'image',\n        'cdp': 'image',\n        'skp': 'image',\n        'stp': 'image',\n        '3dm': 'image',\n        'mp3': 'audio',\n        'wav': 'audio',\n        'wma': 'audio',\n        'mod': 'audio',\n        'm4a': 'audio',\n        'compress': 'compress',\n        'zip': 'compress',\n        'rar': 'compress',\n        '7z': 'compress',\n        'lz': 'compress',\n        'z01': 'compress',\n        'bz2': 'compress',\n        'gz': 'compress',\n        'pdf': 'pdf',\n        'xls': 'xls',\n        'xlsx': 'xls',\n        'ods': 'xls',\n        'mp4': 'video',\n        'avi': 'video',\n        'wmv': 'video',\n        'mpg': 'video',\n        'mts': 'video',\n        'flv': 'video',\n        '3gp': 'video',\n        'vob': 'video',\n        'm4v': 'video',\n        'mpeg': 'video',\n        'm2ts': 'video',\n        'mov': 'video',\n        'doc': 'doc',\n        'docx': 'doc',\n        'eps': 'doc',\n        'txt': 'doc',\n        'odt': 'doc',\n        'rtf': 'doc',\n        'ppt': 'ppt',\n        'pptx': 'ppt',\n        'pps': 'ppt',\n        'ppsx': 'ppt',\n        'odp': 'ppt'\n      };\n      /** @type {?} */\n\n      var chunks = inputFilename.split('.');\n\n      if (chunks.length < 2) {\n        return 'application';\n      }\n      /** @type {?} */\n\n\n      var extension = chunks[chunks.length - 1].toLowerCase();\n\n      if (types[extension] === undefined) {\n        return 'application';\n      } else {\n        return types[extension];\n      }\n    }\n  }]);\n\n  return FileType;\n}();\n/*  MS office  */\n\n\nFileType.mime_doc = ['application/msword', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'application/vnd.ms-word.document.macroEnabled.12', 'application/vnd.ms-word.template.macroEnabled.12'];\nFileType.mime_xsl = ['application/vnd.ms-excel', 'application/vnd.ms-excel', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'application/vnd.ms-excel.sheet.macroEnabled.12', 'application/vnd.ms-excel.template.macroEnabled.12', 'application/vnd.ms-excel.addin.macroEnabled.12', 'application/vnd.ms-excel.sheet.binary.macroEnabled.12'];\nFileType.mime_ppt = ['application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.openxmlformats-officedocument.presentationml.template', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'application/vnd.ms-powerpoint.addin.macroEnabled.12', 'application/vnd.ms-powerpoint.presentation.macroEnabled.12', 'application/vnd.ms-powerpoint.presentation.macroEnabled.12', 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'];\n/* PSD */\n\nFileType.mime_psd = ['image/photoshop', 'image/x-photoshop', 'image/psd', 'application/photoshop', 'application/psd', 'zz-application/zz-winassoc-psd'];\n/* Compressed files */\n\nFileType.mime_compress = ['application/x-gtar', 'application/x-gcompress', 'application/compress', 'application/x-tar', 'application/x-rar-compressed', 'application/octet-stream', 'application/x-zip-compressed', 'application/zip-compressed', 'application/x-7z-compressed', 'application/gzip', 'application/x-bzip2'];\n\nif (false) {\n  /** @type {?} */\n  FileType.mime_doc;\n  /** @type {?} */\n\n  FileType.mime_xsl;\n  /** @type {?} */\n\n  FileType.mime_ppt;\n  /** @type {?} */\n\n  FileType.mime_psd;\n  /** @type {?} */\n\n  FileType.mime_compress;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction _isFile(value) {\n  return File && value instanceof File;\n}\n/**\n * @record\n */\n\n\nfunction Headers() {}\n\nif (false) {\n  /** @type {?} */\n  Headers.prototype.name;\n  /** @type {?} */\n\n  Headers.prototype.value;\n}\n/**\n * @record\n */\n\n\nfunction FileUploaderOptions() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  FileUploaderOptions.prototype.allowedMimeType;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.allowedFileType;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.autoUpload;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.isHTML5;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.filters;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.headers;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.method;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.authToken;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.maxFileSize;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.queueLimit;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.removeAfterUpload;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.url;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.disableMultipart;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.itemAlias;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.authTokenHeader;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.additionalParameter;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.parametersBeforeFiles;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.formatDataFunction;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.formatDataFunctionIsAsync;\n}\n\nvar FileUploader = /*#__PURE__*/function () {\n  /**\n   * @param {?} options\n   */\n  function FileUploader(options) {\n    _classCallCheck(this, FileUploader);\n\n    this.isUploading = false;\n    this.queue = [];\n    this.progress = 0;\n    this._nextIndex = 0;\n    this.options = {\n      autoUpload: false,\n      isHTML5: true,\n      filters: [],\n      removeAfterUpload: false,\n      disableMultipart: false,\n      formatDataFunction:\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function formatDataFunction(item) {\n        return item._file;\n      },\n      formatDataFunctionIsAsync: false\n    };\n    this.setOptions(options);\n    this.response = new EventEmitter();\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _createClass(FileUploader, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = Object.assign(this.options, options);\n      this.authToken = this.options.authToken;\n      this.authTokenHeader = this.options.authTokenHeader || 'Authorization';\n      this.autoUpload = this.options.autoUpload;\n      this.options.filters.unshift({\n        name: 'queueLimit',\n        fn: this._queueLimitFilter\n      });\n\n      if (this.options.maxFileSize) {\n        this.options.filters.unshift({\n          name: 'fileSize',\n          fn: this._fileSizeFilter\n        });\n      }\n\n      if (this.options.allowedFileType) {\n        this.options.filters.unshift({\n          name: 'fileType',\n          fn: this._fileTypeFilter\n        });\n      }\n\n      if (this.options.allowedMimeType) {\n        this.options.filters.unshift({\n          name: 'mimeType',\n          fn: this._mimeTypeFilter\n        });\n      }\n\n      for (var i = 0; i < this.queue.length; i++) {\n        this.queue[i].url = this.options.url;\n      }\n    }\n    /**\n     * @param {?} files\n     * @param {?=} options\n     * @param {?=} filters\n     * @return {?}\n     */\n\n  }, {\n    key: \"addToQueue\",\n    value: function addToQueue(files, options, filters) {\n      var _this = this;\n\n      /** @type {?} */\n      var list = [];\n\n      var _iterator = _createForOfIteratorHelper(files),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var file = _step.value;\n          list.push(file);\n        }\n        /** @type {?} */\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var arrayOfFilters = this._getFilters(filters);\n      /** @type {?} */\n\n\n      var count = this.queue.length;\n      /** @type {?} */\n\n      var addedFileItems = [];\n      list.map(\n      /**\n      * @param {?} some\n      * @return {?}\n      */\n      function (some) {\n        if (!options) {\n          options = _this.options;\n        }\n        /** @type {?} */\n\n\n        var temp = new FileLikeObject(some);\n\n        if (_this._isValidFile(temp, arrayOfFilters, options)) {\n          /** @type {?} */\n          var fileItem = new FileItem(_this, some, options);\n          addedFileItems.push(fileItem);\n\n          _this.queue.push(fileItem);\n\n          _this._onAfterAddingFile(fileItem);\n        } else {\n          /** @type {?} */\n          var filter = arrayOfFilters[_this._failFilterIndex];\n\n          _this._onWhenAddingFileFailed(temp, filter, options);\n        }\n      });\n\n      if (this.queue.length !== count) {\n        this._onAfterAddingAll(addedFileItems);\n\n        this.progress = this._getTotalProgress();\n      }\n\n      this._render();\n\n      if (this.options.autoUpload) {\n        this.uploadAll();\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeFromQueue\",\n    value: function removeFromQueue(value) {\n      /** @type {?} */\n      var index = this.getIndexOfItem(value);\n      /** @type {?} */\n\n      var item = this.queue[index];\n\n      if (item.isUploading) {\n        item.cancel();\n      }\n\n      this.queue.splice(index, 1);\n      this.progress = this._getTotalProgress();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearQueue\",\n    value: function clearQueue() {\n      while (this.queue.length) {\n        this.queue[0].remove();\n      }\n\n      this.progress = 0;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"uploadItem\",\n    value: function uploadItem(value) {\n      /** @type {?} */\n      var index = this.getIndexOfItem(value);\n      /** @type {?} */\n\n      var item = this.queue[index];\n      /** @type {?} */\n\n      var transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';\n\n      item._prepareToUploading();\n\n      if (this.isUploading) {\n        return;\n      }\n\n      this.isUploading = true;\n\n      /** @type {?} */\n      this[transport](item);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"cancelItem\",\n    value: function cancelItem(value) {\n      /** @type {?} */\n      var index = this.getIndexOfItem(value);\n      /** @type {?} */\n\n      var item = this.queue[index];\n      /** @type {?} */\n\n      var prop = this.options.isHTML5 ? item._xhr : item._form;\n\n      if (item && item.isUploading) {\n        prop.abort();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"uploadAll\",\n    value: function uploadAll() {\n      /** @type {?} */\n      var items = this.getNotUploadedItems().filter(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function (item) {\n        return !item.isUploading;\n      });\n\n      if (!items.length) {\n        return;\n      }\n\n      items.map(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function (item) {\n        return item._prepareToUploading();\n      });\n      items[0].upload();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"cancelAll\",\n    value: function cancelAll() {\n      /** @type {?} */\n      var items = this.getNotUploadedItems();\n      items.map(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function (item) {\n        return item.cancel();\n      });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"isFile\",\n    value: function isFile(value) {\n      return _isFile(value);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"isFileLikeObject\",\n    value: function isFileLikeObject(value) {\n      return value instanceof FileLikeObject;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"getIndexOfItem\",\n    value: function getIndexOfItem(value) {\n      return typeof value === 'number' ? value : this.queue.indexOf(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNotUploadedItems\",\n    value: function getNotUploadedItems() {\n      return this.queue.filter(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function (item) {\n        return !item.isUploaded;\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getReadyItems\",\n    value: function getReadyItems() {\n      return this.queue.filter(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function (item) {\n        return item.isReady && !item.isUploading;\n      }).sort(\n      /**\n      * @param {?} item1\n      * @param {?} item2\n      * @return {?}\n      */\n      function (item1, item2) {\n        return item1.index - item2.index;\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      return void 0;\n    }\n    /**\n     * @param {?} fileItems\n     * @return {?}\n     */\n\n  }, {\n    key: \"onAfterAddingAll\",\n    value: function onAfterAddingAll(fileItems) {\n      return {\n        fileItems: fileItems\n      };\n    }\n    /**\n     * @param {?} fileItem\n     * @param {?} form\n     * @return {?}\n     */\n\n  }, {\n    key: \"onBuildItemForm\",\n    value: function onBuildItemForm(fileItem, form) {\n      return {\n        fileItem: fileItem,\n        form: form\n      };\n    }\n    /**\n     * @param {?} fileItem\n     * @return {?}\n     */\n\n  }, {\n    key: \"onAfterAddingFile\",\n    value: function onAfterAddingFile(fileItem) {\n      return {\n        fileItem: fileItem\n      };\n    }\n    /**\n     * @param {?} item\n     * @param {?} filter\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"onWhenAddingFileFailed\",\n    value: function onWhenAddingFileFailed(item, filter, options) {\n      return {\n        item: item,\n        filter: filter,\n        options: options\n      };\n    }\n    /**\n     * @param {?} fileItem\n     * @return {?}\n     */\n\n  }, {\n    key: \"onBeforeUploadItem\",\n    value: function onBeforeUploadItem(fileItem) {\n      return {\n        fileItem: fileItem\n      };\n    }\n    /**\n     * @param {?} fileItem\n     * @param {?} progress\n     * @return {?}\n     */\n\n  }, {\n    key: \"onProgressItem\",\n    value: function onProgressItem(fileItem, progress) {\n      return {\n        fileItem: fileItem,\n        progress: progress\n      };\n    }\n    /**\n     * @param {?} progress\n     * @return {?}\n     */\n\n  }, {\n    key: \"onProgressAll\",\n    value: function onProgressAll(progress) {\n      return {\n        progress: progress\n      };\n    }\n    /**\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onSuccessItem\",\n    value: function onSuccessItem(item, response, status, headers) {\n      return {\n        item: item,\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onErrorItem\",\n    value: function onErrorItem(item, response, status, headers) {\n      return {\n        item: item,\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onCancelItem\",\n    value: function onCancelItem(item, response, status, headers) {\n      return {\n        item: item,\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"onCompleteItem\",\n    value: function onCompleteItem(item, response, status, headers) {\n      return {\n        item: item,\n        response: response,\n        status: status,\n        headers: headers\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"onCompleteAll\",\n    value: function onCompleteAll() {\n      return void 0;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"_mimeTypeFilter\",\n    value: function _mimeTypeFilter(item) {\n      return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"_fileSizeFilter\",\n    value: function _fileSizeFilter(item) {\n      return !(this.options.maxFileSize && item.size > this.options.maxFileSize);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"_fileTypeFilter\",\n    value: function _fileTypeFilter(item) {\n      return !(this.options.allowedFileType && this.options.allowedFileType.indexOf(FileType.getMimeClass(item)) === -1);\n    }\n    /**\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onErrorItem\",\n    value: function _onErrorItem(item, response, status, headers) {\n      item._onError(response, status, headers);\n\n      this.onErrorItem(item, response, status, headers);\n    }\n    /**\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onCompleteItem\",\n    value: function _onCompleteItem(item, response, status, headers) {\n      item._onComplete(response, status, headers);\n\n      this.onCompleteItem(item, response, status, headers);\n      /** @type {?} */\n\n      var nextItem = this.getReadyItems()[0];\n      this.isUploading = false;\n\n      if (nextItem) {\n        nextItem.upload();\n        return;\n      }\n\n      this.onCompleteAll();\n      this.progress = this._getTotalProgress();\n\n      this._render();\n    }\n    /**\n     * @protected\n     * @param {?} parsedHeaders\n     * @return {?}\n     */\n\n  }, {\n    key: \"_headersGetter\",\n    value: function _headersGetter(parsedHeaders) {\n      return (\n        /**\n        * @param {?} name\n        * @return {?}\n        */\n        function (name) {\n          if (name) {\n            return parsedHeaders[name.toLowerCase()] || void 0;\n          }\n\n          return parsedHeaders;\n        }\n      );\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"_xhrTransport\",\n    value: function _xhrTransport(item) {\n      var _this2 = this;\n\n      /** @type {?} */\n      var that = this;\n      /** @type {?} */\n\n      var xhr = item._xhr = new XMLHttpRequest();\n      /** @type {?} */\n\n      var sendable;\n\n      this._onBeforeUploadItem(item);\n\n      if (typeof item._file.size !== 'number') {\n        throw new TypeError('The file specified is no longer valid');\n      }\n\n      if (!this.options.disableMultipart) {\n        sendable = new FormData();\n\n        this._onBuildItemForm(item, sendable);\n        /** @type {?} */\n\n\n        var appendFile =\n        /**\n        * @return {?}\n        */\n        function appendFile() {\n          return sendable.append(item.alias, item._file, item.file.name);\n        };\n\n        if (!this.options.parametersBeforeFiles) {\n          appendFile();\n        } // For AWS, Additional Parameters must come BEFORE Files\n\n\n        if (this.options.additionalParameter !== undefined) {\n          Object.keys(this.options.additionalParameter).forEach(\n          /**\n          * @param {?} key\n          * @return {?}\n          */\n          function (key) {\n            /** @type {?} */\n            var paramVal = _this2.options.additionalParameter[key]; // Allow an additional parameter to include the filename\n\n            if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {\n              paramVal = paramVal.replace('{{file_name}}', item.file.name);\n            }\n\n            sendable.append(key, paramVal);\n          });\n        }\n\n        if (this.options.parametersBeforeFiles) {\n          appendFile();\n        }\n      } else {\n        sendable = this.options.formatDataFunction(item);\n      }\n\n      xhr.upload.onprogress =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        /** @type {?} */\n        var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);\n\n        _this2._onProgressItem(item, progress);\n      };\n\n      xhr.onload =\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        var headers = _this2._parseHeaders(xhr.getAllResponseHeaders());\n        /** @type {?} */\n\n\n        var response = _this2._transformResponse(xhr.response, headers);\n        /** @type {?} */\n\n\n        var gist = _this2._isSuccessCode(xhr.status) ? 'Success' : 'Error';\n        /** @type {?} */\n\n        var method = '_on' + gist + 'Item';\n\n        /** @type {?} */\n        _this2[method](item, response, xhr.status, headers);\n\n        _this2._onCompleteItem(item, response, xhr.status, headers);\n      };\n\n      xhr.onerror =\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        var headers = _this2._parseHeaders(xhr.getAllResponseHeaders());\n        /** @type {?} */\n\n\n        var response = _this2._transformResponse(xhr.response, headers);\n\n        _this2._onErrorItem(item, response, xhr.status, headers);\n\n        _this2._onCompleteItem(item, response, xhr.status, headers);\n      };\n\n      xhr.onabort =\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        var headers = _this2._parseHeaders(xhr.getAllResponseHeaders());\n        /** @type {?} */\n\n\n        var response = _this2._transformResponse(xhr.response, headers);\n\n        _this2._onCancelItem(item, response, xhr.status, headers);\n\n        _this2._onCompleteItem(item, response, xhr.status, headers);\n      };\n\n      xhr.open(item.method, item.url, true);\n      xhr.withCredentials = item.withCredentials;\n\n      if (this.options.headers) {\n        var _iterator2 = _createForOfIteratorHelper(this.options.headers),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var header = _step2.value;\n            xhr.setRequestHeader(header.name, header.value);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (item.headers.length) {\n        var _iterator3 = _createForOfIteratorHelper(item.headers),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _header = _step3.value;\n            xhr.setRequestHeader(_header.name, _header.value);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      if (this.authToken) {\n        xhr.setRequestHeader(this.authTokenHeader, this.authToken);\n      }\n\n      xhr.onreadystatechange =\n      /**\n      * @return {?}\n      */\n      function () {\n        if (xhr.readyState == XMLHttpRequest.DONE) {\n          that.response.emit(xhr.responseText);\n        }\n      };\n\n      if (this.options.formatDataFunctionIsAsync) {\n        sendable.then(\n        /**\n        * @param {?} result\n        * @return {?}\n        */\n        function (result) {\n          return xhr.send(JSON.stringify(result));\n        });\n      } else {\n        xhr.send(sendable);\n      }\n\n      this._render();\n    }\n    /**\n     * @protected\n     * @param {?=} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTotalProgress\",\n    value: function _getTotalProgress() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.options.removeAfterUpload) {\n        return value;\n      }\n      /** @type {?} */\n\n\n      var notUploaded = this.getNotUploadedItems().length;\n      /** @type {?} */\n\n      var uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;\n      /** @type {?} */\n\n      var ratio = 100 / this.queue.length;\n      /** @type {?} */\n\n      var current = value * ratio / 100;\n      return Math.round(uploaded * ratio + current);\n    }\n    /**\n     * @protected\n     * @param {?} filters\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getFilters\",\n    value: function _getFilters(filters) {\n      if (!filters) {\n        return this.options.filters;\n      }\n\n      if (Array.isArray(filters)) {\n        return filters;\n      }\n\n      if (typeof filters === 'string') {\n        /** @type {?} */\n        var names = filters.match(/[^\\s,]+/g);\n        return this.options.filters.filter(\n        /**\n        * @param {?} filter\n        * @return {?}\n        */\n        function (filter) {\n          return names.indexOf(filter.name) !== -1;\n        });\n      }\n\n      return this.options.filters;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      return void 0;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_queueLimitFilter\",\n    value: function _queueLimitFilter() {\n      return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;\n    }\n    /**\n     * @protected\n     * @param {?} file\n     * @param {?} filters\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isValidFile\",\n    value: function _isValidFile(file, filters, options) {\n      var _this3 = this;\n\n      this._failFilterIndex = -1;\n      return !filters.length ? true : filters.every(\n      /**\n      * @param {?} filter\n      * @return {?}\n      */\n      function (filter) {\n        _this3._failFilterIndex++;\n        return filter.fn.call(_this3, file, options);\n      });\n    }\n    /**\n     * @protected\n     * @param {?} status\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSuccessCode\",\n    value: function _isSuccessCode(status) {\n      return status >= 200 && status < 300 || status === 304;\n    }\n    /**\n     * @protected\n     * @param {?} response\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_transformResponse\",\n    value: function _transformResponse(response, headers) {\n      return response;\n    }\n    /**\n     * @protected\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseHeaders\",\n    value: function _parseHeaders(headers) {\n      /** @type {?} */\n      var parsed = {};\n      /** @type {?} */\n\n      var key;\n      /** @type {?} */\n\n      var val;\n      /** @type {?} */\n\n      var i;\n\n      if (!headers) {\n        return parsed;\n      }\n\n      headers.split('\\n').map(\n      /**\n      * @param {?} line\n      * @return {?}\n      */\n      function (line) {\n        i = line.indexOf(':');\n        key = line.slice(0, i).trim().toLowerCase();\n        val = line.slice(i + 1).trim();\n\n        if (key) {\n          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n        }\n      });\n      return parsed;\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @param {?} filter\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onWhenAddingFileFailed\",\n    value: function _onWhenAddingFileFailed(item, filter, options) {\n      this.onWhenAddingFileFailed(item, filter, options);\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAfterAddingFile\",\n    value: function _onAfterAddingFile(item) {\n      this.onAfterAddingFile(item);\n    }\n    /**\n     * @protected\n     * @param {?} items\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAfterAddingAll\",\n    value: function _onAfterAddingAll(items) {\n      this.onAfterAddingAll(items);\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBeforeUploadItem\",\n    value: function _onBeforeUploadItem(item) {\n      item._onBeforeUpload();\n\n      this.onBeforeUploadItem(item);\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @param {?} form\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBuildItemForm\",\n    value: function _onBuildItemForm(item, form) {\n      item._onBuildForm(form);\n\n      this.onBuildItemForm(item, form);\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @param {?} progress\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onProgressItem\",\n    value: function _onProgressItem(item, progress) {\n      /** @type {?} */\n      var total = this._getTotalProgress(progress);\n\n      this.progress = total;\n\n      item._onProgress(progress);\n\n      this.onProgressItem(item, progress);\n      this.onProgressAll(total);\n\n      this._render();\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSuccessItem\",\n    value: function _onSuccessItem(item, response, status, headers) {\n      item._onSuccess(response, status, headers);\n\n      this.onSuccessItem(item, response, status, headers);\n    }\n    /**\n     * @protected\n     * @param {?} item\n     * @param {?} response\n     * @param {?} status\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onCancelItem\",\n    value: function _onCancelItem(item, response, status, headers) {\n      item._onCancel(response, status, headers);\n\n      this.onCancelItem(item, response, status, headers);\n    }\n  }]);\n\n  return FileUploader;\n}();\n\nif (false) {\n  /** @type {?} */\n  FileUploader.prototype.authToken;\n  /** @type {?} */\n\n  FileUploader.prototype.isUploading;\n  /** @type {?} */\n\n  FileUploader.prototype.queue;\n  /** @type {?} */\n\n  FileUploader.prototype.progress;\n  /** @type {?} */\n\n  FileUploader.prototype._nextIndex;\n  /** @type {?} */\n\n  FileUploader.prototype.autoUpload;\n  /** @type {?} */\n\n  FileUploader.prototype.authTokenHeader;\n  /** @type {?} */\n\n  FileUploader.prototype.response;\n  /** @type {?} */\n\n  FileUploader.prototype.options;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileUploader.prototype._failFilterIndex;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar FileSelectDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   */\n  function FileSelectDirective(element) {\n    _classCallCheck(this, FileSelectDirective);\n\n    this.onFileSelected = new EventEmitter();\n    this.element = element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(FileSelectDirective, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this.uploader.options;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFilters\",\n    value: function getFilters() {\n      return {};\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isEmptyAfterSelection\",\n    value: function isEmptyAfterSelection() {\n      return !!this.element.nativeElement.attributes.multiple;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange() {\n      /** @type {?} */\n      var files = this.element.nativeElement.files;\n      /** @type {?} */\n\n      var options = this.getOptions();\n      /** @type {?} */\n\n      var filters = this.getFilters();\n      this.uploader.addToQueue(files, options, filters);\n      this.onFileSelected.emit(files);\n\n      if (this.isEmptyAfterSelection()) {\n        this.element.nativeElement.value = '';\n      }\n    }\n  }]);\n\n  return FileSelectDirective;\n}();\n\nFileSelectDirective.Éµfac = function FileSelectDirective_Factory(t) {\n  return new (t || FileSelectDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef));\n};\n\nFileSelectDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: FileSelectDirective,\n  selectors: [[\"\", \"ng2FileSelect\", \"\"]],\n  hostBindings: function FileSelectDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµlistener(\"change\", function FileSelectDirective_change_HostBindingHandler() {\n        return ctx.onChange();\n      });\n    }\n  },\n  inputs: {\n    uploader: \"uploader\"\n  },\n  outputs: {\n    onFileSelected: \"onFileSelected\"\n  }\n});\n/** @nocollapse */\n\nFileSelectDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nFileSelectDirective.propDecorators = {\n  uploader: [{\n    type: Input\n  }],\n  onFileSelected: [{\n    type: Output\n  }],\n  onChange: [{\n    type: HostListener,\n    args: ['change']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(FileSelectDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ng2FileSelect]'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ElementRef\n    }];\n  }, {\n    onFileSelected: [{\n      type: Output\n    }],\n\n    /**\n     * @return {?}\n     */\n    onChange: [{\n      type: HostListener,\n      args: ['change']\n    }],\n    uploader: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  FileSelectDirective.prototype.uploader;\n  /** @type {?} */\n\n  FileSelectDirective.prototype.onFileSelected;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileSelectDirective.prototype.element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar FileDropDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   */\n  function FileDropDirective(element) {\n    _classCallCheck(this, FileDropDirective);\n\n    this.fileOver = new EventEmitter();\n    this.onFileDrop = new EventEmitter();\n    this.element = element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(FileDropDirective, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this.uploader.options;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFilters\",\n    value: function getFilters() {\n      return {};\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(event) {\n      /** @type {?} */\n      var transfer = this._getTransfer(event);\n\n      if (!transfer) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var options = this.getOptions();\n      /** @type {?} */\n\n      var filters = this.getFilters();\n\n      this._preventAndStop(event);\n\n      this.uploader.addToQueue(transfer.files, options, filters);\n      this.fileOver.emit(false);\n      this.onFileDrop.emit(transfer.files);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDragOver\",\n    value: function onDragOver(event) {\n      /** @type {?} */\n      var transfer = this._getTransfer(event);\n\n      if (!this._haveFiles(transfer.types)) {\n        return;\n      }\n\n      transfer.dropEffect = 'copy';\n\n      this._preventAndStop(event);\n\n      this.fileOver.emit(true);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDragLeave\",\n    value: function onDragLeave(event) {\n      if (\n      /** @type {?} */\n      this.element) {\n        if (event.currentTarget ===\n        /** @type {?} */\n        this.element[0]) {\n          return;\n        }\n      }\n\n      this._preventAndStop(event);\n\n      this.fileOver.emit(false);\n    }\n    /**\n     * @protected\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTransfer\",\n    value: function _getTransfer(event) {\n      return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer; // jQuery fix;\n    }\n    /**\n     * @protected\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_preventAndStop\",\n    value: function _preventAndStop(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    /**\n     * @protected\n     * @param {?} types\n     * @return {?}\n     */\n\n  }, {\n    key: \"_haveFiles\",\n    value: function _haveFiles(types) {\n      if (!types) {\n        return false;\n      }\n\n      if (types.indexOf) {\n        return types.indexOf('Files') !== -1;\n      } else if (types.contains) {\n        return types.contains('Files');\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return FileDropDirective;\n}();\n\nFileDropDirective.Éµfac = function FileDropDirective_Factory(t) {\n  return new (t || FileDropDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef));\n};\n\nFileDropDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: FileDropDirective,\n  selectors: [[\"\", \"ng2FileDrop\", \"\"]],\n  hostBindings: function FileDropDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµlistener(\"drop\", function FileDropDirective_drop_HostBindingHandler($event) {\n        return ctx.onDrop($event);\n      })(\"dragover\", function FileDropDirective_dragover_HostBindingHandler($event) {\n        return ctx.onDragOver($event);\n      })(\"dragleave\", function FileDropDirective_dragleave_HostBindingHandler($event) {\n        return ctx.onDragLeave($event);\n      });\n    }\n  },\n  inputs: {\n    uploader: \"uploader\"\n  },\n  outputs: {\n    fileOver: \"fileOver\",\n    onFileDrop: \"onFileDrop\"\n  }\n});\n/** @nocollapse */\n\nFileDropDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nFileDropDirective.propDecorators = {\n  uploader: [{\n    type: Input\n  }],\n  fileOver: [{\n    type: Output\n  }],\n  onFileDrop: [{\n    type: Output\n  }],\n  onDrop: [{\n    type: HostListener,\n    args: ['drop', ['$event']]\n  }],\n  onDragOver: [{\n    type: HostListener,\n    args: ['dragover', ['$event']]\n  }],\n  onDragLeave: [{\n    type: HostListener,\n    args: ['dragleave', ['$event']]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(FileDropDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ng2FileDrop]'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ElementRef\n    }];\n  }, {\n    fileOver: [{\n      type: Output\n    }],\n    onFileDrop: [{\n      type: Output\n    }],\n\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }],\n\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onDragOver: [{\n      type: HostListener,\n      args: ['dragover', ['$event']]\n    }],\n\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onDragLeave: [{\n      type: HostListener,\n      args: ['dragleave', ['$event']]\n    }],\n    uploader: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  FileDropDirective.prototype.uploader;\n  /** @type {?} */\n\n  FileDropDirective.prototype.fileOver;\n  /** @type {?} */\n\n  FileDropDirective.prototype.onFileDrop;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileDropDirective.prototype.element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar FileUploadModule = function FileUploadModule() {\n  _classCallCheck(this, FileUploadModule);\n};\n\nFileUploadModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: FileUploadModule\n});\nFileUploadModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function FileUploadModule_Factory(t) {\n    return new (t || FileUploadModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(FileUploadModule, {\n    declarations: function declarations() {\n      return [FileDropDirective, FileSelectDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [FileDropDirective, FileSelectDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(FileUploadModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [FileDropDirective, FileSelectDirective],\n      exports: [FileDropDirective, FileSelectDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FileDropDirective, FileItem, FileLikeObject, FileSelectDirective, FileUploadModule, FileUploader };","map":null,"metadata":{},"sourceType":"module"}