{"ast":null,"code":"import _inherits from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport * as Éµngcc0 from '@angular/core';\n\nvar BaseLoginProvider = /*#__PURE__*/function () {\n  function BaseLoginProvider() {\n    _classCallCheck(this, BaseLoginProvider);\n  }\n\n  _createClass(BaseLoginProvider, [{\n    key: \"loadScript\",\n    value: function loadScript(id, src, onload) {\n      var parentElement = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n      // get document if platform is only browser\n      if (typeof document !== 'undefined' && !document.getElementById(id)) {\n        var signInJS = document.createElement('script');\n        signInJS.async = true;\n        signInJS.src = src;\n        signInJS.onload = onload;\n\n        if (!parentElement) {\n          parentElement = document.head;\n        }\n\n        parentElement.appendChild(signInJS);\n      }\n    }\n  }]);\n\n  return BaseLoginProvider;\n}();\n\nvar SocialUser = function SocialUser() {\n  _classCallCheck(this, SocialUser);\n};\n\nvar GoogleLoginProvider = /*#__PURE__*/function (_BaseLoginProvider) {\n  _inherits(GoogleLoginProvider, _BaseLoginProvider);\n\n  var _super = _createSuper(GoogleLoginProvider);\n\n  function GoogleLoginProvider(clientId) {\n    var _this;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scope: 'email'\n    };\n\n    _classCallCheck(this, GoogleLoginProvider);\n\n    _this = _super.call(this);\n    _this.clientId = clientId;\n    _this.initOptions = initOptions;\n    return _this;\n  }\n\n  _createClass(GoogleLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this2.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', function () {\n            gapi.load('auth2', function () {\n              _this2.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, _this2.initOptions), {\n                client_id: _this2.clientId\n              }));\n\n              _this2.auth2.then(function () {\n                resolve();\n              }).catch(function (err) {\n                reject(err);\n              });\n            });\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus(loginStatusOptions) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this3.auth2.isSignedIn.get()) {\n          var user = new SocialUser();\n\n          var profile = _this3.auth2.currentUser.get().getBasicProfile();\n\n          user.id = profile.getId();\n          user.name = profile.getName();\n          user.email = profile.getEmail();\n          user.photoUrl = profile.getImageUrl();\n          user.firstName = profile.getGivenName();\n          user.lastName = profile.getFamilyName();\n          user.response = profile;\n\n          if (loginStatusOptions && loginStatusOptions.refreshToken) {\n            _this3.auth2.currentUser.get().reloadAuthResponse().then(function (authResponse) {\n              user.authToken = authResponse.access_token;\n              user.idToken = authResponse.id_token;\n              resolve(user);\n            });\n          } else {\n            var authResponse = _this3.auth2.currentUser.get().getAuthResponse(true);\n\n            user.authToken = authResponse.access_token;\n            user.idToken = authResponse.id_token;\n            resolve(user);\n          }\n        } else {\n          reject(\"No user is currently logged in with \".concat(GoogleLoginProvider.PROVIDER_ID));\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(signInOptions) {\n      var _this4 = this;\n\n      var options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise(function (resolve, reject) {\n        var offlineAccess = options && options.offline_access;\n        var promise = !offlineAccess ? _this4.auth2.signIn(signInOptions) : _this4.auth2.grantOfflineAccess(signInOptions);\n        promise.then(function (response) {\n          var user = new SocialUser();\n\n          if (response && response.code) {\n            user.authorizationCode = response.code;\n          } else {\n            var profile = _this4.auth2.currentUser.get().getBasicProfile();\n\n            var token = _this4.auth2.currentUser.get().getAuthResponse(true).access_token;\n\n            var backendToken = _this4.auth2.currentUser.get().getAuthResponse(true).id_token;\n\n            user.id = profile.getId();\n            user.name = profile.getName();\n            user.email = profile.getEmail();\n            user.photoUrl = profile.getImageUrl();\n            user.firstName = profile.getGivenName();\n            user.lastName = profile.getFamilyName();\n            user.authToken = token;\n            user.idToken = backendToken;\n            user.response = profile;\n          }\n\n          resolve(user);\n        }, function (closed) {\n          reject(closed);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(revoke) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        var signOutPromise;\n\n        if (revoke) {\n          signOutPromise = _this5.auth2.disconnect();\n        } else {\n          signOutPromise = _this5.auth2.signOut();\n        }\n\n        signOutPromise.then(function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }]);\n\n  return GoogleLoginProvider;\n}(BaseLoginProvider);\n\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n/** @dynamic */\n\nvar SocialAuthService = /*#__PURE__*/function () {\n  function SocialAuthService(config) {\n    var _this6 = this;\n\n    _classCallCheck(this, SocialAuthService);\n\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(function (config) {\n        _this6.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n\n  _createClass(SocialAuthService, [{\n    key: \"initialize\",\n    value: function initialize(config) {\n      var _this7 = this;\n\n      this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n      var _config$onError = config.onError,\n          onError = _config$onError === void 0 ? console.error : _config$onError;\n      config.providers.forEach(function (item) {\n        _this7.providers.set(item.id, item.provider);\n      });\n      Promise.all(Array.from(this.providers.values()).map(function (provider) {\n        return provider.initialize();\n      })).then(function () {\n        if (_this7.autoLogin) {\n          var loginStatusPromises = [];\n          var loggedIn = false;\n\n          _this7.providers.forEach(function (provider, key) {\n            var promise = provider.getLoginStatus();\n            loginStatusPromises.push(promise);\n            promise.then(function (user) {\n              user.provider = key;\n              _this7._user = user;\n\n              _this7._authState.next(user);\n\n              loggedIn = true;\n            }).catch(console.debug);\n          });\n\n          Promise.all(loginStatusPromises).catch(function () {\n            if (!loggedIn) {\n              _this7._user = null;\n\n              _this7._authState.next(null);\n            }\n          });\n        }\n      }).catch(function (error) {\n        onError(error);\n      }).finally(function () {\n        _this7.initialized = true;\n\n        _this7._initState.next(_this7.initialized);\n\n        _this7._initState.complete();\n      });\n    }\n  }, {\n    key: \"refreshAuthToken\",\n    value: function refreshAuthToken(providerId) {\n      var _this8 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this8.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n          reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n        } else {\n          var providerObject = _this8.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.getLoginStatus({\n              refreshToken: true\n            }).then(function (user) {\n              user.provider = providerId;\n              _this8._user = user;\n\n              _this8._authState.next(user);\n\n              resolve();\n            }).catch(function (err) {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(providerId, signInOptions) {\n      var _this9 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this9.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else {\n          var providerObject = _this9.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.signIn(signInOptions).then(function (user) {\n              user.provider = providerId;\n              resolve(user);\n              _this9._user = user;\n\n              _this9._authState.next(user);\n            }).catch(function (err) {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      var _this10 = this;\n\n      var revoke = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Promise(function (resolve, reject) {\n        if (!_this10.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else if (!_this10._user) {\n          reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n        } else {\n          var providerId = _this10._user.provider;\n\n          var providerObject = _this10.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.signOut(revoke).then(function () {\n              resolve();\n              _this10._user = null;\n\n              _this10._authState.next(null);\n            }).catch(function (err) {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"authState\",\n    get: function get() {\n      return this._authState.asObservable();\n    }\n  }, {\n    key: \"initState\",\n    get: function get() {\n      return this._initState.asObservable();\n    }\n  }]);\n\n  return SocialAuthService;\n}();\n\nSocialAuthService.Éµfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(Éµngcc0.ÉµÉµinject('SocialAuthServiceConfig'));\n};\n\nSocialAuthService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.Éµfac\n});\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n\nSocialAuthService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: ['SocialAuthServiceConfig']\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(SocialAuthService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }];\n  }, null);\n})();\n\nvar SocialLoginModule = /*#__PURE__*/function () {\n  function SocialLoginModule(parentModule) {\n    _classCallCheck(this, SocialLoginModule);\n\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  _createClass(SocialLoginModule, null, [{\n    key: \"initialize\",\n    value: function initialize(config) {\n      return {\n        ngModule: SocialLoginModule,\n        providers: [SocialAuthService, {\n          provide: 'SocialAuthServiceConfig',\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return SocialLoginModule;\n}();\n\nSocialLoginModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function SocialLoginModule_Factory(t) {\n    return new (t || SocialLoginModule)(Éµngcc0.ÉµÉµinject(SocialLoginModule, 12));\n  },\n  providers: [SocialAuthService],\n  imports: [[CommonModule]]\n});\n\nSocialLoginModule.ctorParameters = function () {\n  return [{\n    type: SocialLoginModule,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(SocialLoginModule, {\n    imports: function imports() {\n      return [CommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [SocialAuthService]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nvar DummyLoginProvider = /*#__PURE__*/function (_BaseLoginProvider2) {\n  _inherits(DummyLoginProvider, _BaseLoginProvider2);\n\n  var _super2 = _createSuper(DummyLoginProvider);\n\n  function DummyLoginProvider(dummy) {\n    var _this11;\n\n    _classCallCheck(this, DummyLoginProvider);\n\n    _this11 = _super2.call(this);\n\n    if (dummy) {\n      _this11.dummy = dummy;\n    } else {\n      _this11.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    _this11.loggedIn = false;\n    return _this11;\n  }\n\n  _createClass(DummyLoginProvider, [{\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this12 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this12.loggedIn) {\n          resolve(_this12.dummy);\n        } else {\n          reject('No user is currently logged in.');\n        }\n      });\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      return new Promise(function (resolve, reject) {\n        resolve();\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn() {\n      var _this13 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this13.loggedIn = true;\n        resolve(_this13.dummy);\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(revoke) {\n      var _this14 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this14.loggedIn = false;\n        resolve();\n      });\n    }\n  }]);\n\n  return DummyLoginProvider;\n}(BaseLoginProvider);\n\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\n\nvar FacebookLoginProvider = /*#__PURE__*/function (_BaseLoginProvider3) {\n  _inherits(FacebookLoginProvider, _BaseLoginProvider3);\n\n  var _super3 = _createSuper(FacebookLoginProvider);\n\n  function FacebookLoginProvider(clientId) {\n    var _this15;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v4.0'\n    };\n\n    _classCallCheck(this, FacebookLoginProvider);\n\n    _this15 = _super3.call(this);\n    _this15.clientId = clientId;\n    _this15.initOptions = initOptions;\n    return _this15;\n  }\n\n  _createClass(FacebookLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this16 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this16.loadScript(FacebookLoginProvider.PROVIDER_ID, \"//connect.facebook.net/\".concat(_this16.initOptions.locale, \"/sdk.js\"), function () {\n            FB.init({\n              appId: _this16.clientId,\n              autoLogAppEvents: true,\n              cookie: true,\n              xfbml: true,\n              version: _this16.initOptions.version\n            });\n            resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this17 = this;\n\n      return new Promise(function (resolve, reject) {\n        FB.getLoginStatus(function (response) {\n          if (response.status === 'connected') {\n            var authResponse = response.authResponse;\n            FB.api(\"/me?fields=\".concat(_this17.initOptions.fields), function (fbUser) {\n              var user = new SocialUser();\n              user.id = fbUser.id;\n              user.name = fbUser.name;\n              user.email = fbUser.email;\n              user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n              user.firstName = fbUser.first_name;\n              user.lastName = fbUser.last_name;\n              user.authToken = authResponse.accessToken;\n              user.response = fbUser;\n              resolve(user);\n            });\n          } else {\n            reject(\"No user is currently logged in with \".concat(FacebookLoginProvider.PROVIDER_ID));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(signInOptions) {\n      var options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise(function (resolve, reject) {\n        FB.login(function (response) {\n          if (response.authResponse) {\n            var authResponse = response.authResponse;\n            FB.api(\"/me?fields=\".concat(options.fields), function (fbUser) {\n              var user = new SocialUser();\n              user.id = fbUser.id;\n              user.name = fbUser.name;\n              user.email = fbUser.email;\n              user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n              user.firstName = fbUser.first_name;\n              user.lastName = fbUser.last_name;\n              user.authToken = authResponse.accessToken;\n              user.response = fbUser;\n              resolve(user);\n            });\n          } else {\n            reject('User cancelled login or did not fully authorize.');\n          }\n        }, options);\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return new Promise(function (resolve, reject) {\n        FB.logout(function (response) {\n          resolve();\n        });\n      });\n    }\n  }]);\n\n  return FacebookLoginProvider;\n}(BaseLoginProvider);\n\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nvar AmazonLoginProvider = /*#__PURE__*/function (_BaseLoginProvider4) {\n  _inherits(AmazonLoginProvider, _BaseLoginProvider4);\n\n  var _super4 = _createSuper(AmazonLoginProvider);\n\n  function AmazonLoginProvider(clientId) {\n    var _this18;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scope: 'profile',\n      scope_data: {\n        profile: {\n          essential: false\n        }\n      },\n      redirect_uri: location.origin\n    };\n\n    _classCallCheck(this, AmazonLoginProvider);\n\n    _this18 = _super4.call(this);\n    _this18.clientId = clientId;\n    _this18.initOptions = initOptions;\n    return _this18;\n  }\n\n  _createClass(AmazonLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this19 = this;\n\n      var amazonRoot = null;\n\n      if (document) {\n        amazonRoot = document.createElement('div');\n        amazonRoot.id = 'amazon-root';\n        document.body.appendChild(amazonRoot);\n      }\n\n      window.onAmazonLoginReady = function () {\n        amazon.Login.setClientId(_this19.clientId);\n      };\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this19.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', function () {\n            resolve();\n          }, amazonRoot);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this20 = this;\n\n      return new Promise(function (resolve, reject) {\n        var token = _this20.retrieveToken();\n\n        if (token) {\n          amazon.Login.retrieveProfile(token, function (response) {\n            if (response.success) {\n              var user = new SocialUser();\n              user.id = response.profile.CustomerId;\n              user.name = response.profile.Name;\n              user.email = response.profile.PrimaryEmail;\n              user.response = response.profile;\n              resolve(user);\n            } else {\n              reject(response.error);\n            }\n          });\n        } else {\n          reject(\"No user is currently logged in with \".concat(AmazonLoginProvider.PROVIDER_ID));\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(signInOptions) {\n      var _this21 = this;\n\n      var options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise(function (resolve, reject) {\n        amazon.Login.authorize(options, function (authResponse) {\n          if (authResponse.error) {\n            reject(authResponse.error);\n          } else {\n            amazon.Login.retrieveProfile(authResponse.access_token, function (response) {\n              var user = new SocialUser();\n              user.id = response.profile.CustomerId;\n              user.name = response.profile.Name;\n              user.email = response.profile.PrimaryEmail;\n              user.authToken = authResponse.access_token;\n              user.response = response.profile;\n\n              _this21.persistToken(authResponse.access_token);\n\n              resolve(user);\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(revoke) {\n      var _this22 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          amazon.Login.logout();\n\n          _this22.clearToken();\n\n          resolve();\n        } catch (err) {\n          reject(err.message);\n        }\n      });\n    }\n  }, {\n    key: \"persistToken\",\n    value: function persistToken(token) {\n      localStorage.setItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"), token);\n    }\n  }, {\n    key: \"retrieveToken\",\n    value: function retrieveToken() {\n      return localStorage.getItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"));\n    }\n  }, {\n    key: \"clearToken\",\n    value: function clearToken() {\n      localStorage.removeItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"));\n    }\n  }]);\n\n  return AmazonLoginProvider;\n}(BaseLoginProvider);\n\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nvar VKLoginProvider = /*#__PURE__*/function (_BaseLoginProvider5) {\n  _inherits(VKLoginProvider, _BaseLoginProvider5);\n\n  var _super5 = _createSuper(VKLoginProvider);\n\n  function VKLoginProvider(clientId) {\n    var _this23;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fields: 'photo_max,contacts',\n      version: '5.124'\n    };\n\n    _classCallCheck(this, VKLoginProvider);\n\n    _this23 = _super5.call(this);\n    _this23.clientId = clientId;\n    _this23.initOptions = initOptions;\n    _this23.VK_API_URL = '//vk.com/js/api/openapi.js';\n    _this23.VK_API_GET_USER = 'users.get';\n    return _this23;\n  }\n\n  _createClass(VKLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this24 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this24.loadScript(VKLoginProvider.PROVIDER_ID, _this24.VK_API_URL, function () {\n            VK.init({\n              apiId: _this24.clientId\n            });\n            resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this25 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this25.getLoginStatusInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn() {\n      var _this26 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this26.signInInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return new Promise(function (resolve, reject) {\n        VK.Auth.logout(function (response) {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"signInInternal\",\n    value: function signInInternal(resolve, reject) {\n      var _this27 = this;\n\n      VK.Auth.login(function (loginResponse) {\n        if (loginResponse.status === 'connected') {\n          _this27.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n        }\n      });\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser(userId, token, resolve) {\n      var _this28 = this;\n\n      VK.Api.call(this.VK_API_GET_USER, {\n        user_id: userId,\n        fields: this.initOptions.fields,\n        v: this.initOptions.version\n      }, function (userResponse) {\n        resolve(_this28.createUser(Object.assign({}, {\n          token: token\n        }, userResponse.response[0])));\n      });\n    }\n  }, {\n    key: \"getLoginStatusInternal\",\n    value: function getLoginStatusInternal(resolve, reject) {\n      var _this29 = this;\n\n      VK.Auth.getLoginStatus(function (loginResponse) {\n        if (loginResponse.status === 'connected') {\n          _this29.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n        }\n      });\n    }\n  }, {\n    key: \"createUser\",\n    value: function createUser(response) {\n      var user = new SocialUser();\n      user.id = response.id;\n      user.name = \"\".concat(response.first_name, \" \").concat(response.last_name);\n      user.photoUrl = response.photo_max;\n      user.authToken = response.token;\n      return user;\n    }\n  }]);\n\n  return VKLoginProvider;\n}(BaseLoginProvider);\n\nVKLoginProvider.PROVIDER_ID = 'VK';\n/**\r\n * Protocol modes supported by MSAL.\r\n */\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nvar COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\n\nvar MicrosoftLoginProvider = /*#__PURE__*/function (_BaseLoginProvider6) {\n  _inherits(MicrosoftLoginProvider, _BaseLoginProvider6);\n\n  var _super6 = _createSuper(MicrosoftLoginProvider);\n\n  function MicrosoftLoginProvider(clientId, initOptions) {\n    var _this30;\n\n    _classCallCheck(this, MicrosoftLoginProvider);\n\n    _this30 = _super6.call(this);\n    _this30.clientId = clientId;\n    _this30.initOptions = {\n      redirect_uri: location.origin,\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    _this30.initOptions = Object.assign(Object.assign({}, _this30.initOptions), initOptions);\n    return _this30;\n  }\n\n  _createClass(MicrosoftLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this31 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this31.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.1.0/js/msal-browser.js', function () {\n          try {\n            var config = {\n              auth: {\n                clientId: _this31.clientId,\n                redirectUri: _this31.initOptions.redirect_uri,\n                authority: _this31.initOptions.authority,\n                knownAuthorities: _this31.initOptions.knownAuthorities,\n                protocolMode: _this31.initOptions.protocolMode,\n                clientCapabilities: _this31.initOptions.clientCapabilities\n              },\n              cache: !_this31.initOptions.cacheLocation ? null : {\n                cacheLocation: _this31.initOptions.cacheLocation\n              }\n            };\n            _this31._instance = new msal.PublicClientApplication(config);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getSocialUser\",\n    value: function getSocialUser(loginResponse) {\n      return new Promise(function (resolve, reject) {\n        //After login, use Microsoft Graph API to get user info\n        var meRequest = new XMLHttpRequest();\n\n        meRequest.onreadystatechange = function () {\n          if (meRequest.readyState == 4) {\n            try {\n              if (meRequest.status == 200) {\n                var userInfo = JSON.parse(meRequest.responseText);\n                var user = new SocialUser();\n                user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                user.id = loginResponse.idToken;\n                user.name = loginResponse.idTokenClaims.name;\n                user.email = loginResponse.account.username;\n                user.idToken = loginResponse.idToken;\n                user.response = loginResponse;\n                user.firstName = userInfo.givenName;\n                user.lastName = userInfo.surname;\n                resolve(user);\n              } else {\n                reject(\"Error retrieving user info: \".concat(meRequest.status));\n              }\n            } catch (err) {\n              reject(err);\n            }\n          }\n        }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n        meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n        meRequest.setRequestHeader('Authorization', \"Bearer \".concat(loginResponse.accessToken));\n\n        try {\n          meRequest.send();\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this32 = this;\n\n      return new Promise(function (resolve, reject) {\n        var accounts = _this32._instance.getAllAccounts();\n\n        if (accounts.length > 0) {\n          try {\n            _this32._instance.ssoSilent({\n              scopes: _this32.initOptions.scopes,\n              loginHint: accounts[0].username\n            }).then(function (loginResponse) {\n              _this32.getSocialUser(loginResponse).then(function (user) {\n                return resolve(user);\n              }).catch(function (err) {\n                return reject(err);\n              });\n            }).catch(function (err) {\n              return reject(err);\n            });\n          } catch (err) {\n            reject(err);\n          }\n        } else {\n          reject(\"No user is currently logged in with \".concat(MicrosoftLoginProvider.PROVIDER_ID));\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn() {\n      var _this33 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this33._instance.loginPopup({\n            scopes: _this33.initOptions.scopes\n          }).then(function (loginResponse) {\n            _this33.getSocialUser(loginResponse).then(function (user) {\n              return resolve(user);\n            }).catch(function (err) {\n              return reject(err);\n            });\n          }).catch(function (err) {\n            return reject(err);\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(revoke) {\n      var _this34 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          var accounts = _this34._instance.getAllAccounts(); //TODO: This redirects to a Microsoft page, then sends us back to redirect_uri... this doesn't seem to match other providers\n          //Open issues:\n          // https://github.com/abacritt/angularx-social-login/issues/306\n          // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/2563\n\n\n          _this34._instance.logout({\n            account: accounts[0],\n            postLogoutRedirectUri: _this34.initOptions.redirect_uri\n          }).then(function () {\n            resolve();\n          }).catch(function (err) {\n            reject(err);\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }]);\n\n  return MicrosoftLoginProvider;\n}(BaseLoginProvider);\n\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":null,"metadata":{},"sourceType":"module"}