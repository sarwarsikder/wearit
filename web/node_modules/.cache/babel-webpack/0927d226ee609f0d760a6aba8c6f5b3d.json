{"ast":null,"code":"import _toConsumableArray from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/var/www/html/wearit/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { InjectionToken, Inject, Injectable, Directive, Input, Output, HostListener, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, PLATFORM_ID, Pipe, NgModule } from '@angular/core';\nimport { of, BehaviorSubject, EMPTY } from 'rxjs';\nimport { tap, map, delay, switchMap, catchError, filter, take } from 'rxjs/operators';\nimport { isPlatformBrowser } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nvar\n/** @type {?} */\nCONFIG = new InjectionToken('CONFIG');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * Simple object check.\r\n * @param {?} item\r\n * @return {?}\r\n */\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\r\n * Deep merge two objects.\r\n * @param {?} target\r\n * @param {...?} sources\r\n * @return {?}\r\n */\n\n\nfunction mergeDeep(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (!sources.length) {\n    return target;\n  }\n\n  var\n  /** @type {?} */\n  source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (var\n    /** @type {?} */\n    key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, _defineProperty({}, key, {}));\n        }\n\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, _defineProperty({}, key, source[key]));\n      }\n    }\n  }\n\n  return mergeDeep.apply(void 0, [target].concat(sources));\n}\n/**\r\n * Returns a readable number from share count\r\n * @param {?} num\r\n * @param {?} digits\r\n * @return {?}\r\n */\n\n\nfunction shareCountFormatter(num, digits) {\n  var\n  /** @type {?} */\n  si = [{\n    value: 1E9,\n    symbol: 'B'\n  }, {\n    value: 1E6,\n    symbol: 'M'\n  }, {\n    value: 1E3,\n    symbol: 'K'\n  }],\n\n  /** @type {?} */\n  rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  for (var\n  /** @type {?} */\n  i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n    }\n  }\n\n  return num.toFixed(digits).replace(rx, '$1');\n}\n/**\r\n * Copy text to clipboard\r\n * @param {?} url\r\n * @param {?} browser\r\n * @return {?}\r\n */\n\n\nfunction copyToClipboard(url, browser) {\n  return of(url).pipe(tap(function (text) {\n    // Create a hidden textarea element\n    var\n    /** @type {?} */\n    textArea = document.createElement('textarea');\n    textArea.value = text;\n    document.body.appendChild(textArea); // highlight textarea to copy the text\n\n    if (browser === 'ios') {\n      var\n      /** @type {?} */\n      range = document.createRange();\n      range.selectNodeContents(textArea);\n      var\n      /** @type {?} */\n      selection = window.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(range);\n      textArea.readOnly = true;\n      textArea.setSelectionRange(0, 999999);\n    } else {\n      textArea.select();\n    }\n\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  }));\n}\n/**\r\n * Get meta tag content\r\n * @param {?} key\r\n * @return {?}\r\n */\n\n\nfunction getMetaContent(key) {\n  var\n  /** @type {?} */\n  metaTag = document.querySelector(\"meta[property=\\\"\".concat(key, \"\\\"]\"));\n  return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n/**\r\n * Detect operating system 'ios', 'android', or 'desktop'\r\n * @return {?}\r\n */\n\n\nfunction getOS() {\n  var\n  /** @type {?} */\n  userAgent = navigator.userAgent || navigator.vendor ||\n  /** @type {?} */\n  window.opera;\n\n  if (/android/i.test(userAgent)) {\n    return 'android';\n  }\n\n  if (/iPad|iPhone|iPod/.test(userAgent) && !\n  /** @type {?} */\n  window.MSStream) {\n    return 'ios';\n  }\n\n  return 'desktop';\n}\n/**\r\n * Returns a valid URL or falls back to current URL\r\n * @param {?} url\r\n * @param {?} fallbackUrl\r\n * @return {?}\r\n */\n\n\nfunction getValidUrl(url, fallbackUrl) {\n  if (url) {\n    var\n    /** @type {?} */\n    r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n    if (r.test(url)) {\n      return url;\n    }\n\n    console.warn(\"[ShareButtons]: Sharing link '\".concat(url, \"' is invalid!\"));\n  }\n\n  return fallbackUrl;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * Meta tags operator - Serialize meta tags into the sharer URL\r\n */\n\n\nvar\n/** @type {?} */\nmetaTagsOperators = [map(function (ref) {\n  // Social network sharer URL */\n  var\n  /** @type {?} */\n  SharerURL = ref.prop.share[ref.os];\n\n  if (SharerURL) {\n    // object contains supported meta tags\n    var\n    /** @type {?} */\n    metaTags = ref.prop.share.metaTags; // object contains meta tags values */\n\n    var\n    /** @type {?} */\n    metaTagsValues = ref.metaTags;\n    var\n    /** @type {?} */\n    link = ''; // Set each meta tag with user value\n\n    if (metaTags) {\n      link = Object.entries(metaTags).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            metaTag = _ref2[1];\n\n        return metaTagsValues[key] ? \"\".concat(metaTag, \"=\").concat(encodeURIComponent(metaTagsValues[key])) : '';\n      }).join('&');\n    }\n\n    return SharerURL + link;\n  }\n\n  return;\n})];\n/**\r\n * Print button operator\r\n */\n\nvar\n/** @type {?} */\nprintOperators = [map(function () {\n  return window.print();\n})];\n/**\r\n * Copy link to clipboard, used for copy button\r\n */\n\nvar\n/** @type {?} */\ncopyOperators = [map(function (ref) {\n  // Disable the button\n  ref.renderer.setStyle(ref.el, 'pointer-events', 'none');\n  ref.temp = {\n    text: ref.prop.text,\n    icon: ref.prop.icon\n  };\n  ref.metaTags.url = decodeURIComponent(ref.metaTags.url);\n  return ref;\n}), switchMap(function (ref) {\n  return copyToClipboard(ref.metaTags.url, ref.os).pipe(map(function () {\n    ref.prop.text = ref.prop.successText;\n    ref.prop.icon = ref.prop.successIcon;\n    return ref;\n  }), catchError(function () {\n    ref.prop.text = ref.prop.failText;\n    ref.prop.icon = ref.prop.failIcon;\n    return of(ref);\n  }));\n}), map(function (ref) {\n  ref.cd.markForCheck();\n  return ref;\n}), delay(2000), map(function (ref) {\n  // Enable the button\n  ref.renderer.setStyle(ref.el, 'pointer-events', 'auto'); // Reset copy button text and icon */\n\n  ref.prop.text = ref.temp.text;\n  ref.prop.icon = ref.temp.icon;\n  ref.cd.markForCheck();\n})];\n/**\r\n * Add the share URL to message body, used for WhatsApp and Email buttons\r\n */\n\nvar\n/** @type {?} */\nurlInMessageOperators = [map(function (ref) {\n  var\n  /** @type {?} */\n  description = ref.metaTags.description;\n  var\n  /** @type {?} */\n  url = ref.metaTags.url;\n  var\n  /** @type {?} */\n  newRef = {\n    metaTags: {\n      description: description ? \"\".concat(description, \"\\r\\n\").concat(url) : url\n    }\n  };\n  return mergeDeep(ref, newRef);\n})];\nvar\n/** @type {?} */\nFacebookCountOperators = [map(function (res) {\n  return +res.share.share_count;\n})];\nvar\n/** @type {?} */\nPinterestCountOperators = [map(function (text) {\n  return JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1'));\n}), map(function (res) {\n  return +res.count;\n})];\nvar\n/** @type {?} */\nTumblrCountOperators = [map(function (res) {\n  return +res.response.note_count;\n})];\nvar\n/** @type {?} */\nRedditCountOperators = [map(function (res) {\n  return +res.data.children[0].data.score;\n})];\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\nvar\n/** @type {?} */\nshareButtonsProp = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    icon: ['fab', 'facebook-f'],\n    color: '#4267B2',\n    share: {\n      desktop: 'https://www.facebook.com/sharer/sharer.php?',\n      android: 'https://www.facebook.com/sharer/sharer.php?',\n      ios: 'https://www.facebook.com/sharer/sharer.php?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'u'\n      }\n    },\n    count: {\n      request: 'http',\n      url: 'https://graph.facebook.com?id=',\n      operators: FacebookCountOperators\n    }\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    icon: ['fab', 'twitter'],\n    color: '#00acee',\n    share: {\n      desktop: 'https://twitter.com/intent/tweet?',\n      android: 'https://twitter.com/intent/tweet?',\n      ios: 'https://twitter.com/intent/tweet?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url',\n        description: 'text',\n        tags: 'hashtags',\n        via: 'via'\n      }\n    }\n  },\n  google: {\n    type: 'google',\n    text: 'Google+',\n    icon: ['fab', 'google-plus-g'],\n    color: '#DB4437',\n    share: {\n      desktop: 'https://plus.google.com/share?',\n      android: 'https://plus.google.com/share?',\n      ios: 'https://plus.google.com/share?',\n      metaTags: {\n        url: 'url'\n      },\n      operators: metaTagsOperators\n    }\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    icon: ['fab', 'linkedin-in'],\n    color: '#006fa6',\n    share: {\n      desktop: 'http://www.linkedin.com/shareArticle?',\n      android: 'http://www.linkedin.com/shareArticle?',\n      ios: 'http://www.linkedin.com/shareArticle?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url',\n        title: 'title',\n        description: 'summary'\n      }\n    }\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    icon: ['fab', 'pinterest-p'],\n    color: '#BD091D',\n    share: {\n      desktop: 'https://in.pinterest.com/pin/create/button/?',\n      android: 'https://in.pinterest.com/pin/create/button/?',\n      ios: 'https://in.pinterest.com/pin/create/button/?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url',\n        description: 'description',\n        image: 'media'\n      }\n    },\n    count: {\n      request: 'http',\n      url: 'https://api.pinterest.com/v1/urls/count.json?url=',\n      args: {\n        responseType: 'text'\n      },\n      operators: PinterestCountOperators\n    }\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    icon: ['fab', 'reddit-alien'],\n    color: '#FF4006',\n    share: {\n      desktop: 'http://www.reddit.com/submit?',\n      android: 'http://www.reddit.com/submit?',\n      ios: 'http://www.reddit.com/submit?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url',\n        title: 'title'\n      }\n    },\n    count: {\n      request: 'http',\n      url: 'https://buttons.reddit.com/button_info.json?url=',\n      operators: RedditCountOperators\n    }\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    icon: ['fab', 'tumblr'],\n    color: '#36465D',\n    share: {\n      desktop: 'http://tumblr.com/widgets/share/tool?',\n      android: 'http://tumblr.com/widgets/share/tool?',\n      ios: 'http://tumblr.com/widgets/share/tool?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'canonicalUrl',\n        description: 'caption',\n        tags: 'tags'\n      }\n    },\n    count: {\n      request: 'jsonp',\n      url: 'https://api.tumblr.com/v2/share/stats?url=',\n      operators: TumblrCountOperators\n    }\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    icon: ['fab', 'whatsapp'],\n    color: '#25D366',\n    share: {\n      desktop: 'https://web.whatsapp.com/send?',\n      android: 'whatsapp://send?',\n      ios: 'whatsapp://send?',\n      operators: [].concat(urlInMessageOperators, metaTagsOperators),\n      metaTags: {\n        description: 'text'\n      }\n    }\n  },\n  messenger: {\n    type: 'messenger',\n    text: 'Messenger',\n    icon: ['fab', 'facebook-messenger'],\n    color: '#0080FF',\n    share: {\n      android: 'fb-messenger://share/?',\n      ios: 'fb-messenger://share/?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'link'\n      }\n    }\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    icon: ['fab', 'telegram-plane'],\n    color: '#0088cc',\n    share: {\n      desktop: 'https://t.me/share/url?',\n      android: 'https://t.me/share/url?',\n      ios: 'https://t.me/share/url?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url',\n        description: 'text'\n      }\n    }\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    icon: ['fab', 'vk'],\n    color: '#4C75A3',\n    share: {\n      desktop: 'http://vk.com/share.php?',\n      android: 'http://vk.com/share.php?',\n      ios: 'http://vk.com/share.php?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url'\n      }\n    }\n  },\n  stumble: {\n    type: 'stumble',\n    text: 'Stumble',\n    icon: ['fab', 'stumbleupon'],\n    color: '#eb4924',\n    share: {\n      desktop: 'http://www.stumbleupon.com/submit?',\n      android: 'http://www.stumbleupon.com/submit?',\n      ios: 'http://www.stumbleupon.com/submit?',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url'\n      }\n    }\n  },\n  xing: {\n    type: 'xing',\n    text: 'Xing',\n    icon: ['fab', 'xing'],\n    color: '#006567',\n    share: {\n      desktop: 'https://www.xing.com/app/user?op=share&',\n      android: 'https://www.xing.com/app/user?op=share&',\n      ios: 'https://www.xing.com/app/user?op=share&',\n      operators: metaTagsOperators,\n      metaTags: {\n        url: 'url'\n      }\n    }\n  },\n  sms: {\n    type: 'sms',\n    text: 'SMS',\n    icon: 'comment-alt',\n    color: '#20c16c',\n    share: {\n      desktop: 'sms:?',\n      android: 'sms:?',\n      ios: 'sms:?',\n      metaTags: {\n        description: 'body'\n      },\n      operators: [].concat(urlInMessageOperators, metaTagsOperators)\n    }\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    icon: 'envelope',\n    color: '#FF961C',\n    share: {\n      desktop: 'mailto:?',\n      android: 'mailto:?',\n      ios: 'mailto:?',\n      operators: [].concat(urlInMessageOperators, metaTagsOperators),\n      metaTags: {\n        title: 'subject',\n        description: 'body'\n      }\n    }\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    successText: 'Copied',\n    successIcon: 'check',\n    failText: 'Error',\n    failIcon: 'exclamation',\n    icon: 'link',\n    color: '#607D8B',\n    share: {\n      operators: copyOperators\n    }\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    icon: 'print',\n    color: '#765AA2',\n    share: {\n      operators: printOperators\n    }\n  }\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\nvar ShareButtons = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} config\r\n   */\n  function ShareButtons(config) {\n    _classCallCheck(this, ShareButtons);\n\n    this.config = {\n      prop: shareButtonsProp,\n      options: {\n        theme: 'default',\n        include: [],\n        exclude: [],\n        size: 0,\n        url: undefined,\n        title: undefined,\n        description: undefined,\n        image: undefined,\n        tags: undefined,\n        twitterAccount: undefined,\n        autoSetMeta: true,\n        gaTracking: false,\n        windowWidth: 800,\n        windowHeight: 500,\n        moreButtonIcon: 'ellipsis-h',\n        lessButtonIcon: 'minus'\n      }\n    };\n    this.config$ = new BehaviorSubject(this.config);\n\n    if (config) {\n      this.setConfig(config);\n    }\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(ShareButtons, [{\n    key: \"setConfig\",\n\n    /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\n    value: function setConfig(config) {\n      this.config = mergeDeep(this.config, config);\n      this.config$.next(this.config);\n    }\n    /**\r\n     * @param {?} name\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"addButton\",\n    value: function addButton(name, data) {\n      var\n      /** @type {?} */\n      config = {\n        prop: Object.assign({}, shareButtonsProp, _defineProperty({}, name, data))\n      };\n      this.setConfig(config);\n    }\n  }, {\n    key: \"prop\",\n    get: function get() {\n      return this.config.prop;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"twitterAccount\",\n    get: function get() {\n      return this.config.options.twitterAccount;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.config.options.theme;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"windowSize\",\n    get: function get() {\n      return \"width=\".concat(this.config.options.windowWidth, \", height=\").concat(this.config.options.windowHeight);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this.config.options.url;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this.config.options.title;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this.config.options.description;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"image\",\n    get: function get() {\n      return this.config.options.image;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"tags\",\n    get: function get() {\n      return this.config.options.tags;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"autoSetMeta\",\n    get: function get() {\n      return this.config.options.autoSetMeta;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"gaTracking\",\n    get: function get() {\n      return this.config.options.gaTracking;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.config.options.size;\n    }\n  }]);\n\n  return ShareButtons;\n}();\n\nShareButtons.ɵfac = function ShareButtons_Factory(t) {\n  return new (t || ShareButtons)(ɵngcc0.ɵɵinject(CONFIG));\n};\n\nShareButtons.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ShareButtons,\n  factory: ShareButtons.ɵfac\n});\n/** @nocollapse */\n\nShareButtons.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ShareButtons, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar ShareButtonDirective = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} shareService\r\n   * @param {?} http\r\n   * @param {?} renderer\r\n   * @param {?} cd\r\n   * @param {?} el\r\n   * @param {?} platform\r\n   */\n  function ShareButtonDirective(shareService, http, renderer, cd, el, platform) {\n    _classCallCheck(this, ShareButtonDirective);\n\n    this.shareService = shareService;\n    this.http = http;\n    this.renderer = renderer;\n    this.cd = cd;\n    this.el = el;\n    this.platform = platform;\n    /**\r\n     * Get share count\r\n     */\n\n    this.getCount = false;\n    /**\r\n     * Set meta tags from document head, useful when SEO is supported\r\n     */\n\n    this.autoSetMeta = this.shareService.autoSetMeta;\n    /**\r\n     * Meta tags inputs - initialized from the global options\r\n     */\n\n    this.url = this.shareService.url;\n    this.title = this.shareService.title;\n    this.description = this.shareService.description;\n    this.image = this.shareService.image;\n    this.tags = this.shareService.tags;\n    /**\r\n     * Stream that emits when share count is fetched\r\n     */\n\n    this.count = new EventEmitter();\n    /**\r\n     * Stream that emits when share dialog is opened\r\n     */\n\n    this.opened = new EventEmitter();\n    /**\r\n     * Stream that emits when share dialog is closed\r\n     */\n\n    this.closed = new EventEmitter();\n  }\n  /**\r\n   * Share link on element click\r\n   * @return {?}\r\n   */\n\n\n  _createClass(ShareButtonDirective, [{\n    key: \"onClick\",\n    value: function onClick() {\n      var _this = this;\n\n      if (isPlatformBrowser(this.platform)) {\n        var _of;\n\n        var\n        /** @type {?} */\n        metaTags = this.autoSetMeta ? {\n          url: this.url,\n          title: this.title || getMetaContent('og:title'),\n          description: this.description || getMetaContent('og:description'),\n          image: this.image || getMetaContent('og:image'),\n          via: this.shareService.twitterAccount || getMetaContent('twitter:site'),\n          tags: this.tags\n        } : {\n          url: this.url,\n          title: this.title,\n          description: this.description,\n          image: this.image,\n          tags: this.tags,\n          via: this.shareService.twitterAccount\n        };\n        var\n        /** @type {?} */\n        ref = {\n          cd: this.cd,\n          renderer: this.renderer,\n          prop: this.prop,\n          el: this.el.nativeElement,\n          os: getOS(),\n          metaTags: metaTags\n        }; // Share the link\n\n        (_of = of(ref)).pipe.apply(_of, _toConsumableArray(this.prop.share.operators).concat([tap(function (sharerURL) {\n          return _this.share(sharerURL);\n        }), take(1)])).subscribe();\n      }\n    }\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this2 = this;\n\n      if (isPlatformBrowser(this.platform)) {\n        if (changes['shareButton'] && (changes['shareButton'].firstChange || changes['shareButton'].previousValue !== this.shareButton)) {\n          this.createShareButton(this.shareButton);\n        }\n\n        if (!this.url || changes['url'] && changes['url'].previousValue !== this.url) {\n          of(null).pipe(map(function () {\n            _this2.url = getValidUrl(_this2.autoSetMeta ? _this2.url || getMetaContent('og:url') : _this2.url, window.location.href);\n            return _this2.url;\n          }), filter(function () {\n            return _this2.prop.count && _this2.getCount;\n          }), switchMap(function (url) {\n            return _this2.shareCount(url);\n          }), tap(function (shareCount) {\n            return _this2.count.emit(shareCount);\n          }), take(1)).subscribe();\n        }\n      }\n    }\n    /**\r\n     * Open sharing dialog\r\n     * @param {?} url - Share URL\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"share\",\n    value: function share(url) {\n      var _this3 = this;\n\n      if (url) {\n        // GA Tracking\n        if (this.shareService.gaTracking && typeof ga !== 'undefined') {\n          ga('send', 'social', this.prop.type, 'click', this.url);\n        } // Emit when share dialog is opened\n\n\n        this.opened.emit(this.prop.type);\n        var\n        /** @type {?} */\n        popUp = window.open(url, 'newwindow', this.shareService.windowSize); // Emit when share dialog is closed\n\n        if (popUp) {\n          var\n          /** @type {?} */\n          pollTimer = window.setInterval(function () {\n            if (popUp.closed) {\n              window.clearInterval(pollTimer);\n\n              _this3.closed.emit(_this3.prop.type);\n            }\n          }, 200);\n        }\n      }\n    }\n    /**\r\n     * Get link share count\r\n     * @param {?} url - Share URL\r\n     * @return {?} Share count\r\n     */\n\n  }, {\n    key: \"shareCount\",\n    value: function shareCount(url) {\n      if (this.prop.count.request === 'jsonp') {\n        var _this$http$jsonp;\n\n        return (_this$http$jsonp = this.http.jsonp(this.prop.count.url + url, 'callback')).pipe.apply(_this$http$jsonp, _toConsumableArray(this.prop.count.operators).concat([catchError(function () {\n          return EMPTY;\n        })]));\n      } else {\n        var _this$http$get;\n\n        return (_this$http$get = this.http.get(this.prop.count.url + url, this.prop.count.args)).pipe.apply(_this$http$get, _toConsumableArray(this.prop.count.operators).concat([catchError(function () {\n          return EMPTY;\n        })]));\n      }\n    }\n    /**\r\n     * @param {?} buttonsName\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"createShareButton\",\n    value: function createShareButton(buttonsName) {\n      var\n      /** @type {?} */\n      button = Object.assign({}, this.shareService.prop[buttonsName]);\n\n      if (button) {\n        // Set share button properties\n        this.prop = button; // Remove previous button class\n\n        this.renderer.removeClass(this.el.nativeElement, \"sb-\".concat(this._buttonClass)); // Add new button class\n\n        this.renderer.addClass(this.el.nativeElement, \"sb-\".concat(button.type)); // Set button css color variable\n\n        this.el.nativeElement.style.setProperty('--button-color', this.prop.color); // Keep a copy of the class for future replacement\n\n        this._buttonClass = button.type; // Set aria-label attribute\n\n        this.renderer.setAttribute(this.el.nativeElement, 'aria-label', button.ariaLabel || button.text);\n      } else {\n        throw new Error(\"[ShareButtons]: The share button '\".concat(buttonsName, \"' does not exist!\"));\n      }\n    }\n  }]);\n\n  return ShareButtonDirective;\n}();\n\nShareButtonDirective.ɵfac = function ShareButtonDirective_Factory(t) {\n  return new (t || ShareButtonDirective)(ɵngcc0.ɵɵdirectiveInject(ShareButtons), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nShareButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ShareButtonDirective,\n  selectors: [[\"\", \"shareButton\", \"\"]],\n  hostBindings: function ShareButtonDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ShareButtonDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  inputs: {\n    getCount: \"getCount\",\n    autoSetMeta: \"autoSetMeta\",\n    url: \"url\",\n    title: \"title\",\n    description: \"description\",\n    image: \"image\",\n    tags: \"tags\",\n    shareButton: \"shareButton\"\n  },\n  outputs: {\n    count: \"count\",\n    opened: \"opened\",\n    closed: \"closed\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nShareButtonDirective.ctorParameters = function () {\n  return [{\n    type: ShareButtons\n  }, {\n    type: HttpClient\n  }, {\n    type: Renderer2\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n\nShareButtonDirective.propDecorators = {\n  shareButton: [{\n    type: Input\n  }],\n  getCount: [{\n    type: Input\n  }],\n  autoSetMeta: [{\n    type: Input\n  }],\n  url: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  description: [{\n    type: Input\n  }],\n  image: [{\n    type: Input\n  }],\n  tags: [{\n    type: Input\n  }],\n  count: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ShareButtonDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[shareButton]'\n    }]\n  }], function () {\n    return [{\n      type: ShareButtons\n    }, {\n      type: ɵngcc1.HttpClient\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    getCount: [{\n      type: Input\n    }],\n    autoSetMeta: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    description: [{\n      type: Input\n    }],\n    image: [{\n      type: Input\n    }],\n    tags: [{\n      type: Input\n    }],\n    count: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n\n    /**\n     * Share link on element click\n     * @return {?}\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    shareButton: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar ShareCountPipe = /*#__PURE__*/function () {\n  function ShareCountPipe() {\n    _classCallCheck(this, ShareCountPipe);\n  }\n\n  _createClass(ShareCountPipe, [{\n    key: \"transform\",\n\n    /**\r\n     * @param {?} num\r\n     * @param {?=} digits\r\n     * @return {?}\r\n     */\n    value: function transform(num, digits) {\n      return shareCountFormatter(num, digits);\n    }\n  }]);\n\n  return ShareCountPipe;\n}();\n\nShareCountPipe.ɵfac = function ShareCountPipe_Factory(t) {\n  return new (t || ShareCountPipe)();\n};\n\nShareCountPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"shareCount\",\n  type: ShareCountPipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ShareCountPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'shareCount'\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * @param {?} config\r\n * @return {?}\r\n */\n\n\nfunction ShareButtonsFactory(config) {\n  return new ShareButtons(config);\n}\n\nvar ShareModule = /*#__PURE__*/function () {\n  function ShareModule() {\n    _classCallCheck(this, ShareModule);\n  }\n\n  _createClass(ShareModule, null, [{\n    key: \"forRoot\",\n\n    /**\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\n    value: function forRoot(config) {\n      return {\n        ngModule: ShareModule,\n        providers: [{\n          provide: CONFIG,\n          useValue: config\n        }, {\n          provide: ShareButtons,\n          useFactory: ShareButtonsFactory,\n          deps: [CONFIG]\n        }]\n      };\n    }\n  }]);\n\n  return ShareModule;\n}();\n\nShareModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ShareModule\n});\nShareModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ShareModule_Factory(t) {\n    return new (t || ShareModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShareModule, {\n    declarations: [ShareButtonDirective, ShareCountPipe],\n    exports: [ShareButtonDirective, ShareCountPipe]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ShareModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ShareButtonDirective, ShareCountPipe],\n      exports: [ShareButtonDirective, ShareCountPipe]\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nexport { ShareButtonsFactory, ShareModule, ShareButtons, ShareButtonDirective, metaTagsOperators, printOperators, copyOperators, urlInMessageOperators, FacebookCountOperators, PinterestCountOperators, TumblrCountOperators, RedditCountOperators, shareButtonsProp, ShareCountPipe, CONFIG };","map":null,"metadata":{},"sourceType":"module"}