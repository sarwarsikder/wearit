{"ast":null,"code":"import _toConsumableArray from \"D:/Angular Project/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:/Angular Project/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Angular Project/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"D:/Angular Project/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { InjectionToken, Injectable, Optional, Inject, Injector, NgModule, SkipSelf } from '@angular/core';\nimport { HttpRequest, HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse, HttpBackend, HttpClientModule } from '@angular/common/http';\nimport { isArray, includes, isUndefined, isNull, defaults, each, extend, find, has, initial, last, clone, reduce, isBoolean, keys, isEmpty, forEach, isObject, isFunction, map as map$1, bind, union, values, pick, isNumber, omit, every, get } from 'lodash';\nimport { assign } from 'core-js/features/object';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { filter, map, catchError } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular.config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nvar RESTANGULAR = new InjectionToken('restangularWithConfig');\n/**\n * @param {?} __0\n * @return {?}\n */\n\nfunction RestangularFactory(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      callbackOrServices = _ref2[0],\n      callback = _ref2[1];\n\n  /** @type {?} */\n  var arrServices = [];\n  /** @type {?} */\n\n  var fn = callbackOrServices;\n\n  if (isArray(callbackOrServices)) {\n    arrServices = callbackOrServices;\n    fn = callback;\n  }\n\n  return {\n    fn: fn,\n    arrServices: arrServices\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular-helper.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar RestangularHelper = /*#__PURE__*/function () {\n  function RestangularHelper() {\n    _classCallCheck(this, RestangularHelper);\n  }\n\n  _createClass(RestangularHelper, null, [{\n    key: \"createRequest\",\n\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    value: function createRequest(options) {\n      /** @type {?} */\n      var requestQueryParams = RestangularHelper.createRequestQueryParams(options.params);\n      /** @type {?} */\n\n      var requestHeaders = RestangularHelper.createRequestHeaders(options.headers);\n      /** @type {?} */\n\n      var methodName = options.method.toUpperCase();\n      /** @type {?} */\n\n      var withCredentials = options.withCredentials || false;\n      /** @type {?} */\n\n      var request = new HttpRequest(methodName, options.url, options.data, {\n        headers: requestHeaders,\n        params: requestQueryParams,\n        responseType: options.responseType,\n        withCredentials: withCredentials\n      });\n\n      if (['GET', 'DELETE', 'HEAD', 'JSONP', 'OPTIONS'].indexOf(methodName) >= 0) {\n        request = new HttpRequest(methodName, options.url, {\n          headers: requestHeaders,\n          params: requestQueryParams,\n          responseType: options.responseType,\n          withCredentials: withCredentials\n        });\n      }\n\n      return request;\n    }\n    /**\n     * @param {?} queryParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"createRequestQueryParams\",\n    value: function createRequestQueryParams(queryParams) {\n      /** @type {?} */\n      var requestQueryParams = assign({}, queryParams);\n      /** @type {?} */\n\n      var search = new HttpParams();\n\n      var _loop = function _loop(key) {\n        /** @type {?} */\n        var value = requestQueryParams[key];\n\n        if (Array.isArray(value)) {\n          value.forEach(\n          /**\n          * @param {?} val\n          * @return {?}\n          */\n          function (val) {\n            search = search.append(key, val);\n          });\n        } else {\n          if (typeof value === 'object') {\n            value = JSON.stringify(value);\n          }\n\n          search = search.append(key, value);\n        }\n      };\n\n      for (var key in requestQueryParams) {\n        _loop(key);\n      }\n\n      return search;\n    }\n    /**\n     * @param {?} headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"createRequestHeaders\",\n    value: function createRequestHeaders(headers) {\n      for (var key in headers) {\n        /** @type {?} */\n        var value = headers[key];\n\n        if (typeof value === 'undefined') {\n          delete headers[key];\n        }\n      }\n\n      return new HttpHeaders(assign({}, headers));\n    }\n  }]);\n\n  return RestangularHelper;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular-http.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar RestangularHttp = /*#__PURE__*/function () {\n  /**\n   * @param {?} http\n   */\n  function RestangularHttp(http) {\n    _classCallCheck(this, RestangularHttp);\n\n    this.http = http;\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _createClass(RestangularHttp, [{\n    key: \"createRequest\",\n    value: function createRequest(options) {\n      /** @type {?} */\n      var request = RestangularHelper.createRequest(options);\n      return this.request(request);\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(_request) {\n      var _this = this;\n\n      return this.http.handle(_request).pipe(filter(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        return event instanceof HttpResponse;\n      }), map(\n      /**\n      * @param {?} response\n      * @return {?}\n      */\n      function (response) {\n        if (!response.ok) {\n          return throwError(new HttpErrorResponse(response));\n        }\n\n        return response;\n      }), map(\n      /**\n      * @param {?} response\n      * @return {?}\n      */\n      function (response) {\n        response.config = {\n          params: _request\n        };\n        return response;\n      }), catchError(\n      /**\n      * @param {?} err\n      * @return {?}\n      */\n      function (err) {\n        err.request = _request;\n        err.data = err.error;\n\n        err.repeatRequest =\n        /**\n        * @param {?=} newRequest\n        * @return {?}\n        */\n        function (newRequest) {\n          return _this.request(newRequest || _request);\n        };\n\n        return throwError(err);\n      }));\n    }\n  }]);\n\n  return RestangularHttp;\n}();\n\nRestangularHttp.ɵfac = function RestangularHttp_Factory(t) {\n  return new (t || RestangularHttp)(ɵngcc0.ɵɵinject(ɵngcc1.HttpBackend));\n};\n\nRestangularHttp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RestangularHttp,\n  factory: RestangularHttp.ɵfac\n});\n/** @nocollapse */\n\nRestangularHttp.ctorParameters = function () {\n  return [{\n    type: HttpBackend\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RestangularHttp, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpBackend\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  RestangularHttp.prototype.http;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular-config.factory.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} object\n * @param {?} configuration\n * @return {?}\n */\n\n\nfunction RestangularConfigurer(object, configuration) {\n  object.configuration = configuration;\n  /**\n   * Those are HTTP safe methods for which there is no need to pass any data with the request.\n   * @type {?}\n   */\n\n  var safeMethods = ['get', 'head', 'options', 'trace', 'getlist'];\n\n  configuration.isSafe =\n  /**\n  * @param {?} operation\n  * @return {?}\n  */\n  function (operation) {\n    return includes(safeMethods, operation.toLowerCase());\n  };\n  /** @type {?} */\n\n\n  var absolutePattern = /^https?:\\/\\//i;\n\n  configuration.isAbsoluteUrl =\n  /**\n  * @param {?} string\n  * @return {?}\n  */\n  function (string) {\n    return isUndefined(configuration.absoluteUrl) || isNull(configuration.absoluteUrl) ? string && absolutePattern.test(string) : configuration.absoluteUrl;\n  };\n\n  configuration.absoluteUrl = isUndefined(configuration.absoluteUrl) ? true : configuration.absoluteUrl;\n\n  object.setSelfLinkAbsoluteUrl =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    configuration.absoluteUrl = value;\n  };\n  /**\n   * This is the BaseURL to be used with Restangular\n   */\n\n\n  configuration.baseUrl = isUndefined(configuration.baseUrl) ? '' : configuration.baseUrl;\n\n  object.setBaseUrl =\n  /**\n  * @param {?} newBaseUrl\n  * @return {?}\n  */\n  function (newBaseUrl) {\n    configuration.baseUrl = /\\/$/.test(newBaseUrl) ? newBaseUrl.substring(0, newBaseUrl.length - 1) : newBaseUrl;\n    return this;\n  };\n  /**\n   * Sets the extra fields to keep from the parents\n   */\n\n\n  configuration.extraFields = configuration.extraFields || [];\n\n  object.setExtraFields =\n  /**\n  * @param {?} newExtraFields\n  * @return {?}\n  */\n  function (newExtraFields) {\n    configuration.extraFields = newExtraFields;\n    return this;\n  };\n  /**\n   * Some default $http parameter to be used in EVERY call\n   **/\n\n\n  configuration.defaultHttpFields = configuration.defaultHttpFields || {};\n\n  object.setDefaultHttpFields =\n  /**\n  * @param {?} values\n  * @return {?}\n  */\n  function (values) {\n    configuration.defaultHttpFields = values;\n    return this;\n  };\n  /**\n   * Always return plain data, no restangularized object\n   **/\n\n\n  configuration.plainByDefault = configuration.plainByDefault || false;\n\n  object.setPlainByDefault =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    configuration.plainByDefault = value === true ? true : false;\n    return this;\n  };\n\n  configuration.withHttpValues =\n  /**\n  * @param {?} httpLocalConfig\n  * @param {?} obj\n  * @return {?}\n  */\n  function (httpLocalConfig, obj) {\n    return defaults(obj, httpLocalConfig, configuration.defaultHttpFields);\n  };\n\n  configuration.encodeIds = isUndefined(configuration.encodeIds) ? true : configuration.encodeIds;\n\n  object.setEncodeIds =\n  /**\n  * @param {?} encode\n  * @return {?}\n  */\n  function (encode) {\n    configuration.encodeIds = encode;\n  };\n\n  configuration.defaultRequestParams = configuration.defaultRequestParams || {\n    get: {},\n    post: {},\n    put: {},\n    remove: {},\n    common: {}\n  };\n\n  object.setDefaultRequestParams =\n  /**\n  * @param {?} param1\n  * @param {?} param2\n  * @return {?}\n  */\n  function (param1, param2) {\n    /** @type {?} */\n    var methods = [];\n    /** @type {?} */\n\n    var params = param2 || param1;\n\n    if (!isUndefined(param2)) {\n      if (isArray(param1)) {\n        methods = param1;\n      } else {\n        methods.push(param1);\n      }\n    } else {\n      methods.push('common');\n    }\n\n    each(methods,\n    /**\n    * @param {?} method\n    * @return {?}\n    */\n    function (method) {\n      configuration.defaultRequestParams[method] = params;\n    });\n    return this;\n  };\n\n  object.requestParams = configuration.defaultRequestParams;\n  configuration.defaultHeaders = configuration.defaultHeaders || {};\n\n  object.setDefaultHeaders =\n  /**\n  * @param {?} headers\n  * @return {?}\n  */\n  function (headers) {\n    configuration.defaultHeaders = headers;\n    object.defaultHeaders = configuration.defaultHeaders;\n    return this;\n  };\n\n  object.defaultHeaders = configuration.defaultHeaders;\n  /**\n   * Method overriders response Method\n   **/\n\n  configuration.defaultResponseMethod = configuration.defaultResponseMethod || 'promise';\n\n  object.setDefaultResponseMethod =\n  /**\n  * @param {?} method\n  * @return {?}\n  */\n  function (method) {\n    configuration.defaultResponseMethod = method;\n    object.defaultResponseMethod = configuration.defaultResponseMethod;\n    return this;\n  };\n\n  object.defaultResponseMethod = configuration.defaultResponseMethod;\n  /**\n   * Method overriders will set which methods are sent via POST with an X-HTTP-Method-Override\n   **/\n\n  configuration.methodOverriders = configuration.methodOverriders || [];\n\n  object.setMethodOverriders =\n  /**\n  * @param {?} values\n  * @return {?}\n  */\n  function (values) {\n    /** @type {?} */\n    var overriders = extend([], values);\n\n    if (configuration.isOverridenMethod('delete', overriders)) {\n      overriders.push('remove');\n    }\n\n    configuration.methodOverriders = overriders;\n    return this;\n  };\n\n  configuration.jsonp = isUndefined(configuration.jsonp) ? false : configuration.jsonp;\n\n  object.setJsonp =\n  /**\n  * @param {?} active\n  * @return {?}\n  */\n  function (active) {\n    configuration.jsonp = active;\n  };\n\n  configuration.isOverridenMethod =\n  /**\n  * @param {?} method\n  * @param {?} values\n  * @return {?}\n  */\n  function (method, values) {\n    /** @type {?} */\n    var search = values || configuration.methodOverriders;\n    return !isUndefined(find(search,\n    /**\n    * @param {?} one\n    * @return {?}\n    */\n    function (one) {\n      return one.toLowerCase() === method.toLowerCase();\n    }));\n  };\n  /**\n   * Sets the URL creator type. For now, only Path is created. In the future we'll have queryParams\n   **/\n\n\n  configuration.urlCreator = configuration.urlCreator || 'path';\n\n  object.setUrlCreator =\n  /**\n  * @param {?} name\n  * @return {?}\n  */\n  function (name) {\n    if (!has(configuration.urlCreatorFactory, name)) {\n      throw new Error('URL Path selected isn\\'t valid');\n    }\n\n    configuration.urlCreator = name;\n    return this;\n  };\n  /**\n   * You can set the restangular fields here. The 3 required fields for Restangular are:\n   *\n   * id: Id of the element\n   * route: name of the route of this element\n   * parentResource: the reference to the parent resource\n   *\n   *  All of this fields except for id, are handled (and created) by Restangular. By default,\n   *  the field values will be id, route and parentResource respectively\n   */\n\n\n  configuration.restangularFields = configuration.restangularFields || {\n    id: 'id',\n    route: 'route',\n    parentResource: 'parentResource',\n    restangularCollection: 'restangularCollection',\n    cannonicalId: '__cannonicalId',\n    etag: 'restangularEtag',\n    selfLink: 'href',\n    get: 'get',\n    getList: 'getList',\n    put: 'put',\n    post: 'post',\n    remove: 'remove',\n    head: 'head',\n    trace: 'trace',\n    options: 'options',\n    patch: 'patch',\n    getRestangularUrl: 'getRestangularUrl',\n    getRequestedUrl: 'getRequestedUrl',\n    putElement: 'putElement',\n    addRestangularMethod: 'addRestangularMethod',\n    getParentList: 'getParentList',\n    clone: 'clone',\n    ids: 'ids',\n    httpConfig: '_$httpConfig',\n    reqParams: 'reqParams',\n    one: 'one',\n    all: 'all',\n    several: 'several',\n    oneUrl: 'oneUrl',\n    allUrl: 'allUrl',\n    customPUT: 'customPUT',\n    customPATCH: 'customPATCH',\n    customPOST: 'customPOST',\n    customDELETE: 'customDELETE',\n    customGET: 'customGET',\n    customGETLIST: 'customGETLIST',\n    customOperation: 'customOperation',\n    doPUT: 'doPUT',\n    doPATCH: 'doPATCH',\n    doPOST: 'doPOST',\n    doDELETE: 'doDELETE',\n    doGET: 'doGET',\n    doGETLIST: 'doGETLIST',\n    fromServer: 'fromServer',\n    withConfig: 'withConfig',\n    withHttpConfig: 'withHttpConfig',\n    singleOne: 'singleOne',\n    plain: 'plain',\n    save: 'save',\n    restangularized: 'restangularized'\n  };\n\n  object.setRestangularFields =\n  /**\n  * @param {?} resFields\n  * @return {?}\n  */\n  function (resFields) {\n    configuration.restangularFields = extend({}, configuration.restangularFields, resFields);\n    return this;\n  };\n\n  configuration.isRestangularized =\n  /**\n  * @param {?} obj\n  * @return {?}\n  */\n  function (obj) {\n    return !!obj[configuration.restangularFields.restangularized];\n  };\n\n  configuration.setFieldToElem =\n  /**\n  * @param {?} field\n  * @param {?} elem\n  * @param {?} value\n  * @return {?}\n  */\n  function (field, elem, value) {\n    /** @type {?} */\n    var properties = field.split('.');\n    /** @type {?} */\n\n    var idValue = elem;\n    each(initial(properties),\n    /**\n    * @param {?} prop\n    * @return {?}\n    */\n    function (prop) {\n      idValue[prop] = {};\n      idValue = idValue[prop];\n    });\n    /** @type {?} */\n\n    var index = last(properties);\n    idValue[index] = value;\n    return this;\n  };\n\n  configuration.getFieldFromElem =\n  /**\n  * @param {?} field\n  * @param {?} elem\n  * @return {?}\n  */\n  function (field, elem) {\n    /** @type {?} */\n    var properties = field.split('.');\n    /** @type {?} */\n\n    var idValue = elem;\n    each(properties,\n    /**\n    * @param {?} prop\n    * @return {?}\n    */\n    function (prop) {\n      if (idValue) {\n        idValue = idValue[prop];\n      }\n    });\n    return clone(idValue);\n  };\n\n  configuration.setIdToElem =\n  /**\n  * @param {?} elem\n  * @param {?} id\n  * @return {?}\n  */\n  function (elem, id\n  /*, route */\n  ) {\n    configuration.setFieldToElem(configuration.restangularFields.id, elem, id);\n    return this;\n  };\n\n  configuration.getIdFromElem =\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return configuration.getFieldFromElem(configuration.restangularFields.id, elem);\n  };\n\n  configuration.isValidId =\n  /**\n  * @param {?} elemId\n  * @return {?}\n  */\n  function (elemId) {\n    return '' !== elemId && !isUndefined(elemId) && !isNull(elemId);\n  };\n\n  configuration.setUrlToElem =\n  /**\n  * @param {?} elem\n  * @param {?} url\n  * @return {?}\n  */\n  function (elem, url\n  /*, route */\n  ) {\n    configuration.setFieldToElem(configuration.restangularFields.selfLink, elem, url);\n    return this;\n  };\n\n  configuration.getUrlFromElem =\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return configuration.getFieldFromElem(configuration.restangularFields.selfLink, elem);\n  };\n\n  configuration.useCannonicalId = isUndefined(configuration.useCannonicalId) ? false : configuration.useCannonicalId;\n\n  object.setUseCannonicalId =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    configuration.useCannonicalId = value;\n    return this;\n  };\n\n  configuration.getCannonicalIdFromElem =\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    /** @type {?} */\n    var cannonicalId = elem[configuration.restangularFields.cannonicalId];\n    /** @type {?} */\n\n    var actualId = configuration.isValidId(cannonicalId) ? cannonicalId : configuration.getIdFromElem(elem);\n    return actualId;\n  };\n  /**\n   * Sets the Response parser. This is used in case your response isn't directly the data.\n   * For example if you have a response like {meta: {'meta'}, data: {name: 'Gonto'}}\n   * you can extract this data which is the one that needs wrapping\n   *\n   * The ResponseExtractor is a function that receives the response and the method executed.\n   */\n\n\n  configuration.responseInterceptors = configuration.responseInterceptors ? _toConsumableArray(configuration.responseInterceptors) : [];\n\n  configuration.defaultResponseInterceptor =\n  /**\n  * @param {?} data\n  * @return {?}\n  */\n  function (data\n  /*, operation, what, url, response, subject */\n  ) {\n    return data || {};\n  };\n\n  configuration.responseExtractor =\n  /**\n  * @param {?} data\n  * @param {?} operation\n  * @param {?} what\n  * @param {?} url\n  * @param {?} response\n  * @param {?} subject\n  * @return {?}\n  */\n  function (data, operation, what, url, response, subject) {\n    /** @type {?} */\n    var interceptors = clone(configuration.responseInterceptors);\n    interceptors.push(configuration.defaultResponseInterceptor);\n    /** @type {?} */\n\n    var theData = data;\n    each(interceptors,\n    /**\n    * @param {?} interceptor\n    * @return {?}\n    */\n    function (interceptor) {\n      theData = interceptor(theData, operation, what, url, response, subject);\n    });\n    return theData;\n  };\n\n  object.addResponseInterceptor =\n  /**\n  * @param {?} extractor\n  * @return {?}\n  */\n  function (extractor) {\n    configuration.responseInterceptors.push(extractor);\n    return this;\n  };\n\n  configuration.errorInterceptors = configuration.errorInterceptors ? _toConsumableArray(configuration.errorInterceptors) : [];\n\n  object.addErrorInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.errorInterceptors = [interceptor].concat(_toConsumableArray(configuration.errorInterceptors));\n    return this;\n  };\n\n  object.setResponseInterceptor = object.addResponseInterceptor;\n  object.setResponseExtractor = object.addResponseInterceptor;\n  object.setErrorInterceptor = object.addErrorInterceptor;\n  /**\n   * Response interceptor is called just before resolving promises.\n   */\n\n  /**\n   * Request interceptor is called before sending an object to the server.\n   */\n\n  configuration.requestInterceptors = configuration.requestInterceptors ? _toConsumableArray(configuration.requestInterceptors) : [];\n\n  configuration.defaultInterceptor =\n  /**\n  * @param {?} element\n  * @param {?} operation\n  * @param {?} path\n  * @param {?} url\n  * @param {?} headers\n  * @param {?} params\n  * @param {?} httpConfig\n  * @return {?}\n  */\n  function (element, operation, path, url, headers, params, httpConfig) {\n    return {\n      element: element,\n      headers: headers,\n      params: params,\n      httpConfig: httpConfig\n    };\n  };\n\n  configuration.fullRequestInterceptor =\n  /**\n  * @param {?} element\n  * @param {?} operation\n  * @param {?} path\n  * @param {?} url\n  * @param {?} headers\n  * @param {?} params\n  * @param {?} httpConfig\n  * @return {?}\n  */\n  function (element, operation, path, url, headers, params, httpConfig) {\n    /** @type {?} */\n    var interceptors = clone(configuration.requestInterceptors);\n    /** @type {?} */\n\n    var defaultRequest = configuration.defaultInterceptor(element, operation, path, url, headers, params, httpConfig);\n    return reduce(interceptors,\n    /**\n    * @param {?} request\n    * @param {?} interceptor\n    * @return {?}\n    */\n    function (request, interceptor) {\n      /** @type {?} */\n      var returnInterceptor = interceptor(request.element, operation, path, url, request.headers, request.params, request.httpConfig);\n      return extend(request, returnInterceptor);\n    }, defaultRequest);\n  };\n\n  object.addRequestInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.requestInterceptors.push(\n    /**\n    * @param {?} elem\n    * @param {?} operation\n    * @param {?} path\n    * @param {?} url\n    * @param {?} headers\n    * @param {?} params\n    * @param {?} httpConfig\n    * @return {?}\n    */\n    function (elem, operation, path, url, headers, params, httpConfig) {\n      return {\n        headers: headers,\n        params: params,\n        element: interceptor(elem, operation, path, url),\n        httpConfig: httpConfig\n      };\n    });\n    return this;\n  };\n\n  object.setRequestInterceptor = object.addRequestInterceptor;\n\n  object.addFullRequestInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.requestInterceptors.push(interceptor);\n    return this;\n  };\n\n  object.setFullRequestInterceptor = object.addFullRequestInterceptor;\n\n  configuration.onBeforeElemRestangularized = configuration.onBeforeElemRestangularized ||\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return elem;\n  };\n\n  object.setOnBeforeElemRestangularized =\n  /**\n  * @param {?} post\n  * @return {?}\n  */\n  function (post) {\n    configuration.onBeforeElemRestangularized = post;\n    return this;\n  };\n\n  object.setRestangularizePromiseInterceptor =\n  /**\n  * @param {?} interceptor\n  * @return {?}\n  */\n  function (interceptor) {\n    configuration.restangularizePromiseInterceptor = interceptor;\n    return this;\n  };\n  /**\n   * This method is called after an element has been \"Restangularized\".\n   *\n   * It receives the element, a boolean indicating if it's an element or a collection\n   * and the name of the model\n   *\n   */\n\n\n  configuration.onElemRestangularized = configuration.onElemRestangularized ||\n  /**\n  * @param {?} elem\n  * @return {?}\n  */\n  function (elem) {\n    return elem;\n  };\n\n  object.setOnElemRestangularized =\n  /**\n  * @param {?} post\n  * @return {?}\n  */\n  function (post) {\n    configuration.onElemRestangularized = post;\n    return this;\n  };\n\n  configuration.shouldSaveParent = configuration.shouldSaveParent ||\n  /**\n  * @return {?}\n  */\n  function () {\n    return true;\n  };\n\n  object.setParentless =\n  /**\n  * @param {?} values\n  * @return {?}\n  */\n  function (values) {\n    if (isArray(values)) {\n      configuration.shouldSaveParent =\n      /**\n      * @param {?} route\n      * @return {?}\n      */\n      function (route) {\n        return !includes(values, route);\n      };\n    } else if (isBoolean(values)) {\n      configuration.shouldSaveParent =\n      /**\n      * @return {?}\n      */\n      function () {\n        return !values;\n      };\n    }\n\n    return this;\n  };\n  /**\n   * This lets you set a suffix to every request.\n   *\n   * For example, if your api requires that for JSon requests you do /users/123.json, you can set that\n   * in here.\n   *\n   *\n   * By default, the suffix is null\n   */\n\n\n  configuration.suffix = isUndefined(configuration.suffix) ? null : configuration.suffix;\n\n  object.setRequestSuffix =\n  /**\n  * @param {?} newSuffix\n  * @return {?}\n  */\n  function (newSuffix) {\n    configuration.suffix = newSuffix;\n    return this;\n  };\n  /**\n   * Add element transformers for certain routes.\n   */\n\n\n  configuration.transformers = configuration.transformers || {};\n\n  object.addElementTransformer =\n  /**\n  * @param {?} type\n  * @param {?} secondArg\n  * @param {?} thirdArg\n  * @return {?}\n  */\n  function (type, secondArg, thirdArg) {\n    /** @type {?} */\n    var isCollection = null;\n    /** @type {?} */\n\n    var transformer = null;\n\n    if (arguments.length === 2) {\n      transformer = secondArg;\n    } else {\n      transformer = thirdArg;\n      isCollection = secondArg;\n    }\n    /** @type {?} */\n\n\n    var typeTransformers = configuration.transformers[type];\n\n    if (!typeTransformers) {\n      typeTransformers = configuration.transformers[type] = [];\n    }\n\n    typeTransformers.push(\n    /**\n    * @param {?} coll\n    * @param {?} elem\n    * @return {?}\n    */\n    function (coll, elem) {\n      if (isNull(isCollection) || coll === isCollection) {\n        return transformer(elem);\n      }\n\n      return elem;\n    });\n    return object;\n  };\n\n  object.extendCollection =\n  /**\n  * @param {?} route\n  * @param {?} fn\n  * @return {?}\n  */\n  function (route, fn) {\n    return object.addElementTransformer(route, true, fn);\n  };\n\n  object.extendModel =\n  /**\n  * @param {?} route\n  * @param {?} fn\n  * @return {?}\n  */\n  function (route, fn) {\n    return object.addElementTransformer(route, false, fn);\n  };\n\n  configuration.transformElem =\n  /**\n  * @param {?} elem\n  * @param {?} isCollection\n  * @param {?} route\n  * @param {?} Restangular\n  * @param {?} force\n  * @return {?}\n  */\n  function (elem, isCollection, route, Restangular, force) {\n    if (!force && !configuration.transformLocalElements && !elem[configuration.restangularFields.fromServer]) {\n      return elem;\n    }\n    /** @type {?} */\n\n\n    var typeTransformers = configuration.transformers[route];\n    /** @type {?} */\n\n    var changedElem = elem;\n\n    if (typeTransformers) {\n      each(typeTransformers,\n      /**\n      * @param {?} transformer\n      * @return {?}\n      */\n      function (transformer) {\n        changedElem = transformer(isCollection, changedElem);\n      });\n    }\n\n    return configuration.onElemRestangularized(changedElem, isCollection, route, Restangular);\n  };\n\n  configuration.transformLocalElements = isUndefined(configuration.transformLocalElements) ? false : configuration.transformLocalElements;\n\n  object.setTransformOnlyServerElements =\n  /**\n  * @param {?} active\n  * @return {?}\n  */\n  function (active) {\n    configuration.transformLocalElements = !active;\n  };\n\n  configuration.fullResponse = isUndefined(configuration.fullResponse) ? false : configuration.fullResponse;\n\n  object.setFullResponse =\n  /**\n  * @param {?} full\n  * @return {?}\n  */\n  function (full) {\n    configuration.fullResponse = full;\n    return this;\n  }; // Internal values and functions\n\n\n  configuration.urlCreatorFactory = {};\n  /**\n   * Base URL Creator. Base prototype for everything related to it\n   *\n   * @type {?}\n   */\n\n  var BaseCreator =\n  /**\n  * @return {?}\n  */\n  function BaseCreator() {};\n\n  BaseCreator.prototype.setConfig =\n  /**\n  * @param {?} config\n  * @return {?}\n  */\n  function (config) {\n    this.config = config;\n    return this;\n  };\n\n  BaseCreator.prototype.parentsArray =\n  /**\n  * @param {?} current\n  * @return {?}\n  */\n  function (current) {\n    /** @type {?} */\n    var parents = [];\n\n    while (current) {\n      parents.push(current);\n      current = current[this.config.restangularFields.parentResource];\n    }\n\n    return parents.reverse();\n  };\n  /**\n   * @param {?} config\n   * @param {?} $http\n   * @param {?} url\n   * @param {?} configurer\n   * @return {?}\n   */\n\n\n  function RestangularResource(config, $http, url, configurer) {\n    /** @type {?} */\n    var resource = {};\n    each(keys(configurer),\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    function (key) {\n      /** @type {?} */\n      var value = configurer[key]; // Add default parameters\n\n      value.params = extend({}, value.params, config.defaultRequestParams[value.method.toLowerCase()]); // We don't want the ? if no params are there\n\n      if (isEmpty(value.params)) {\n        delete value.params;\n      }\n\n      if (config.isSafe(value.method)) {\n        resource[key] =\n        /**\n        * @return {?}\n        */\n        function () {\n          /** @type {?} */\n          var resultConfig = extend(value, {\n            url: url\n          });\n          return $http.createRequest(resultConfig);\n        };\n      } else {\n        resource[key] =\n        /**\n        * @param {?} data\n        * @return {?}\n        */\n        function (data) {\n          /** @type {?} */\n          var resultConfig = extend(value, {\n            url: url,\n            data: data\n          });\n          return $http.createRequest(resultConfig);\n        };\n      }\n    });\n    return resource;\n  }\n\n  BaseCreator.prototype.resource =\n  /**\n  * @param {?} current\n  * @param {?} $http\n  * @param {?} localHttpConfig\n  * @param {?} callHeaders\n  * @param {?} callParams\n  * @param {?} what\n  * @param {?} etag\n  * @param {?} operation\n  * @return {?}\n  */\n  function (current, $http, localHttpConfig, callHeaders, callParams, what, etag, operation) {\n    /** @type {?} */\n    var params = defaults(callParams || {}, this.config.defaultRequestParams.common);\n    /** @type {?} */\n\n    var headers = defaults(callHeaders || {}, this.config.defaultHeaders);\n\n    if (etag) {\n      if (!configuration.isSafe(operation)) {\n        headers['If-Match'] = etag;\n      } else {\n        headers['If-None-Match'] = etag;\n      }\n    }\n    /** @type {?} */\n\n\n    var url = this.base(current);\n\n    if (what) {\n      /** @type {?} */\n      var add = '';\n\n      if (!/\\/$/.test(url)) {\n        add += '/';\n      }\n\n      add += what;\n      url += add;\n    }\n\n    if (this.config.suffix && url.indexOf(this.config.suffix, url.length - this.config.suffix.length) === -1 && !this.config.getUrlFromElem(current)) {\n      url += this.config.suffix;\n    }\n\n    current[this.config.restangularFields.httpConfig] = undefined;\n    return RestangularResource(this.config, $http, url, {\n      getList: this.config.withHttpValues(localHttpConfig, {\n        method: 'GET',\n        params: params,\n        headers: headers\n      }),\n      get: this.config.withHttpValues(localHttpConfig, {\n        method: 'GET',\n        params: params,\n        headers: headers\n      }),\n      jsonp: this.config.withHttpValues(localHttpConfig, {\n        method: 'jsonp',\n        params: params,\n        headers: headers\n      }),\n      put: this.config.withHttpValues(localHttpConfig, {\n        method: 'PUT',\n        params: params,\n        headers: headers\n      }),\n      post: this.config.withHttpValues(localHttpConfig, {\n        method: 'POST',\n        params: params,\n        headers: headers\n      }),\n      remove: this.config.withHttpValues(localHttpConfig, {\n        method: 'DELETE',\n        params: params,\n        headers: headers\n      }),\n      head: this.config.withHttpValues(localHttpConfig, {\n        method: 'HEAD',\n        params: params,\n        headers: headers\n      }),\n      trace: this.config.withHttpValues(localHttpConfig, {\n        method: 'TRACE',\n        params: params,\n        headers: headers\n      }),\n      options: this.config.withHttpValues(localHttpConfig, {\n        method: 'OPTIONS',\n        params: params,\n        headers: headers\n      }),\n      patch: this.config.withHttpValues(localHttpConfig, {\n        method: 'PATCH',\n        params: params,\n        headers: headers\n      })\n    });\n  };\n  /**\n   * This is the Path URL creator. It uses Path to show Hierarchy in the Rest API.\n   * This means that if you have an Account that then has a set of Buildings, a URL to a building\n   * would be /accounts/123/buildings/456\n   *\n   * @type {?}\n   */\n\n\n  var Path =\n  /**\n  * @return {?}\n  */\n  function Path() {};\n\n  Path.prototype = new BaseCreator();\n\n  Path.prototype.normalizeUrl =\n  /**\n  * @param {?} url\n  * @return {?}\n  */\n  function (url) {\n    /** @type {?} */\n    var parts = /((?:http[s]?:)?\\/\\/)?(.*)?/.exec(url);\n    parts[2] = parts[2].replace(/[\\\\\\/]+/g, '/');\n    return typeof parts[1] !== 'undefined' ? parts[1] + parts[2] : parts[2];\n  };\n\n  Path.prototype.base =\n  /**\n  * @param {?} current\n  * @return {?}\n  */\n  function (current) {\n    /** @type {?} */\n    var __this = this;\n\n    return reduce(this.parentsArray(current),\n    /**\n    * @param {?} acum\n    * @param {?} elem\n    * @return {?}\n    */\n    function (acum, elem) {\n      /** @type {?} */\n      var elemUrl;\n      /** @type {?} */\n\n      var elemSelfLink = __this.config.getUrlFromElem(elem);\n\n      if (elemSelfLink) {\n        if (__this.config.isAbsoluteUrl(elemSelfLink)) {\n          return elemSelfLink;\n        } else {\n          elemUrl = elemSelfLink;\n        }\n      } else {\n        elemUrl = elem[__this.config.restangularFields.route];\n\n        if (elem[__this.config.restangularFields.restangularCollection]) {\n          /** @type {?} */\n          var ids = elem[__this.config.restangularFields.ids];\n\n          if (ids) {\n            elemUrl += '/' + ids.join(',');\n          }\n        } else {\n          /** @type {?} */\n          var elemId;\n\n          if (__this.config.useCannonicalId) {\n            elemId = __this.config.getCannonicalIdFromElem(elem);\n          } else {\n            elemId = __this.config.getIdFromElem(elem);\n          }\n\n          if (configuration.isValidId(elemId) && !elem.singleOne) {\n            elemUrl += '/' + (__this.config.encodeIds ? encodeURIComponent(elemId) : elemId);\n          }\n        }\n      }\n\n      acum = acum.replace(/\\/$/, '') + '/' + elemUrl;\n      return __this.normalizeUrl(acum);\n    }, this.config.baseUrl);\n  };\n\n  Path.prototype.fetchUrl =\n  /**\n  * @param {?} current\n  * @param {?} what\n  * @return {?}\n  */\n  function (current, what) {\n    /** @type {?} */\n    var baseUrl = this.base(current);\n\n    if (what) {\n      baseUrl += '/' + what;\n    }\n\n    return baseUrl;\n  };\n\n  Path.prototype.fetchRequestedUrl =\n  /**\n  * @param {?} current\n  * @param {?} what\n  * @return {?}\n  */\n  function (current, what) {\n    /** @type {?} */\n    var url = this.fetchUrl(current, what);\n    /** @type {?} */\n\n    var params = current[configuration.restangularFields.reqParams]; // From here on and until the end of fetchRequestedUrl,\n    // the code has been kindly borrowed from angular.js\n    // The reason for such code bloating is coherence:\n    //   If the user were to use this for cache management, the\n    //   serialization of parameters would need to be identical\n    //   to the one done by angular for cache keys to match.\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n\n    function sortedKeys(obj) {\n      /** @type {?} */\n      var resultKeys = [];\n\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          resultKeys.push(key);\n        }\n      }\n\n      return resultKeys.sort();\n    }\n    /**\n     * @param {?} obj\n     * @param {?=} iterator\n     * @param {?=} context\n     * @return {?}\n     */\n\n\n    function forEachSorted(obj, iterator, context) {\n      /** @type {?} */\n      var sortedKeysArray = sortedKeys(obj);\n\n      for (var i = 0; i < sortedKeysArray.length; i++) {\n        iterator.call(context, obj[sortedKeysArray[i]], sortedKeysArray[i]);\n      }\n\n      return sortedKeysArray;\n    }\n    /**\n     * @param {?} val\n     * @param {?=} pctEncodeSpaces\n     * @return {?}\n     */\n\n\n    function encodeUriQuery(val, pctEncodeSpaces) {\n      return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');\n    }\n\n    if (!params) {\n      return url + (this.config.suffix || '');\n    }\n    /** @type {?} */\n\n\n    var parts = [];\n    forEachSorted(params,\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    function (value, key) {\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      if (!isArray(value)) {\n        value = [value];\n      }\n\n      forEach(value,\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {\n        if (isObject(v)) {\n          v = JSON.stringify(v);\n        }\n\n        parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));\n      });\n    });\n    return url + (this.config.suffix || '') + (url.indexOf('?') === -1 ? '?' : '&') + parts.join('&');\n  };\n\n  configuration.urlCreatorFactory.path = Path;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar Restangular = /*#__PURE__*/function () {\n  /**\n   * @param {?} configObj\n   * @param {?} injector\n   * @param {?} http\n   */\n  function Restangular(configObj, injector, http) {\n    _classCallCheck(this, Restangular);\n\n    this.configObj = configObj;\n    this.injector = injector;\n    this.http = http;\n    this.provider = new providerConfig(http);\n    /** @type {?} */\n\n    var element = this.provider.$get();\n    assign(this, element);\n    this.setDefaultConfig();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Restangular, [{\n    key: \"setDefaultConfig\",\n    value: function setDefaultConfig() {\n      var _this2 = this,\n          _this$configObj;\n\n      if (!this.configObj || !isFunction(this.configObj.fn)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var arrDI = map$1(this.configObj.arrServices,\n      /**\n      * @param {?} services\n      * @return {?}\n      */\n      function (services) {\n        return _this2.injector.get(services);\n      });\n\n      (_this$configObj = this.configObj).fn.apply(_this$configObj, [this.provider].concat(_toConsumableArray(arrDI)));\n    }\n  }]);\n\n  return Restangular;\n}();\n\nRestangular.ɵfac = function Restangular_Factory(t) {\n  return new (t || Restangular)(ɵngcc0.ɵɵinject(RESTANGULAR, 8), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(RestangularHttp));\n};\n\nRestangular.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Restangular,\n  factory: Restangular.ɵfac\n});\n/** @nocollapse */\n\nRestangular.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RESTANGULAR]\n    }]\n  }, {\n    type: Injector\n  }, {\n    type: RestangularHttp\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Restangular, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RESTANGULAR]\n      }]\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: RestangularHttp\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  Restangular.prototype.provider;\n  /** @type {?} */\n\n  Restangular.prototype.addElementTransformer;\n  /** @type {?} */\n\n  Restangular.prototype.extendCollection;\n  /** @type {?} */\n\n  Restangular.prototype.extendModel;\n  /** @type {?} */\n\n  Restangular.prototype.copy;\n  /** @type {?} */\n\n  Restangular.prototype.configuration;\n  /** @type {?} */\n\n  Restangular.prototype.service;\n  /** @type {?} */\n\n  Restangular.prototype.id;\n  /** @type {?} */\n\n  Restangular.prototype.route;\n  /** @type {?} */\n\n  Restangular.prototype.parentResource;\n  /** @type {?} */\n\n  Restangular.prototype.restangularCollection;\n  /** @type {?} */\n\n  Restangular.prototype.cannonicalId;\n  /** @type {?} */\n\n  Restangular.prototype.etag;\n  /** @type {?} */\n\n  Restangular.prototype.selfLink;\n  /** @type {?} */\n\n  Restangular.prototype.get;\n  /** @type {?} */\n\n  Restangular.prototype.getList;\n  /** @type {?} */\n\n  Restangular.prototype.put;\n  /** @type {?} */\n\n  Restangular.prototype.post;\n  /** @type {?} */\n\n  Restangular.prototype.remove;\n  /** @type {?} */\n\n  Restangular.prototype.head;\n  /** @type {?} */\n\n  Restangular.prototype.trace;\n  /** @type {?} */\n\n  Restangular.prototype.options;\n  /** @type {?} */\n\n  Restangular.prototype.patch;\n  /** @type {?} */\n\n  Restangular.prototype.getRestangularUrl;\n  /** @type {?} */\n\n  Restangular.prototype.getRequestedUrl;\n  /** @type {?} */\n\n  Restangular.prototype.putElement;\n  /** @type {?} */\n\n  Restangular.prototype.addRestangularMethod;\n  /** @type {?} */\n\n  Restangular.prototype.getParentList;\n  /** @type {?} */\n\n  Restangular.prototype.clone;\n  /** @type {?} */\n\n  Restangular.prototype.ids;\n  /** @type {?} */\n\n  Restangular.prototype.httpConfig;\n  /** @type {?} */\n\n  Restangular.prototype.reqParams;\n  /** @type {?} */\n\n  Restangular.prototype.one;\n  /** @type {?} */\n\n  Restangular.prototype.all;\n  /** @type {?} */\n\n  Restangular.prototype.several;\n  /** @type {?} */\n\n  Restangular.prototype.oneUrl;\n  /** @type {?} */\n\n  Restangular.prototype.allUrl;\n  /** @type {?} */\n\n  Restangular.prototype.customPUT;\n  /** @type {?} */\n\n  Restangular.prototype.customPATCH;\n  /** @type {?} */\n\n  Restangular.prototype.customPOST;\n  /** @type {?} */\n\n  Restangular.prototype.customDELETE;\n  /** @type {?} */\n\n  Restangular.prototype.customGET;\n  /** @type {?} */\n\n  Restangular.prototype.customGETLIST;\n  /** @type {?} */\n\n  Restangular.prototype.customOperation;\n  /** @type {?} */\n\n  Restangular.prototype.doPUT;\n  /** @type {?} */\n\n  Restangular.prototype.doPATCH;\n  /** @type {?} */\n\n  Restangular.prototype.doPOST;\n  /** @type {?} */\n\n  Restangular.prototype.doDELETE;\n  /** @type {?} */\n\n  Restangular.prototype.doGET;\n  /** @type {?} */\n\n  Restangular.prototype.doGETLIST;\n  /** @type {?} */\n\n  Restangular.prototype.fromServer;\n  /** @type {?} */\n\n  Restangular.prototype.withConfig;\n  /** @type {?} */\n\n  Restangular.prototype.withHttpConfig;\n  /** @type {?} */\n\n  Restangular.prototype.singleOne;\n  /** @type {?} */\n\n  Restangular.prototype.plain;\n  /** @type {?} */\n\n  Restangular.prototype.save;\n  /** @type {?} */\n\n  Restangular.prototype.restangularized;\n  /** @type {?} */\n\n  Restangular.prototype.restangularizeElement;\n  /** @type {?} */\n\n  Restangular.prototype.restangularizeCollection;\n  /** @type {?} */\n\n  Restangular.prototype.configObj;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Restangular.prototype.injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Restangular.prototype.http;\n}\n/**\n * @param {?} $http\n * @return {?}\n */\n\n\nfunction providerConfig($http) {\n  /** @type {?} */\n  var globalConfiguration = {};\n  RestangularConfigurer(this, globalConfiguration);\n  this.$get = $get;\n  /**\n   * @return {?}\n   */\n\n  function $get() {\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    function createServiceForConfiguration(config) {\n      /** @type {?} */\n      var service = {};\n      /** @type {?} */\n\n      var urlHandler = new config.urlCreatorFactory[config.urlCreator]();\n      urlHandler.setConfig(config);\n      /**\n       * @param {?} parent\n       * @param {?} elem\n       * @param {?} route\n       * @param {?} reqParams\n       * @param {?} fromServer\n       * @return {?}\n       */\n\n      function restangularizeBase(parent, elem, route, reqParams, fromServer) {\n        elem[config.restangularFields.route] = route;\n        elem[config.restangularFields.getRestangularUrl] = bind(urlHandler.fetchUrl, urlHandler, elem);\n        elem[config.restangularFields.getRequestedUrl] = bind(urlHandler.fetchRequestedUrl, urlHandler, elem);\n        elem[config.restangularFields.addRestangularMethod] = bind(addRestangularMethodFunction, elem);\n        elem[config.restangularFields.clone] = bind(copyRestangularizedElement, elem);\n        elem[config.restangularFields.reqParams] = isEmpty(reqParams) ? null : reqParams;\n        elem[config.restangularFields.withHttpConfig] = bind(withHttpConfig, elem);\n        elem[config.restangularFields.plain] = bind(stripRestangular, elem, elem); // Tag element as restangularized\n\n        elem[config.restangularFields.restangularized] = true; // RequestLess connection\n\n        elem[config.restangularFields.one] = bind(one, elem, elem);\n        elem[config.restangularFields.all] = bind(all, elem, elem);\n        elem[config.restangularFields.several] = bind(several, elem, elem);\n        elem[config.restangularFields.oneUrl] = bind(oneUrl, elem, elem);\n        elem[config.restangularFields.allUrl] = bind(allUrl, elem, elem);\n        elem[config.restangularFields.fromServer] = !!fromServer;\n\n        if (parent && config.shouldSaveParent(route)) {\n          /** @type {?} */\n          var parentId = config.getIdFromElem(parent);\n          /** @type {?} */\n\n          var parentUrl = config.getUrlFromElem(parent);\n          /** @type {?} */\n\n          var restangularFieldsForParent = union(values(pick(config.restangularFields, ['route', 'singleOne', 'parentResource'])), config.extraFields);\n          /** @type {?} */\n\n          var parentResource = pick(parent, restangularFieldsForParent);\n\n          if (config.isValidId(parentId)) {\n            config.setIdToElem(parentResource, parentId, route);\n          }\n\n          if (config.isValidId(parentUrl)) {\n            config.setUrlToElem(parentResource, parentUrl, route);\n          }\n\n          elem[config.restangularFields.parentResource] = parentResource;\n        } else {\n          elem[config.restangularFields.parentResource] = null;\n        }\n\n        return elem;\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @param {?} id\n       * @param {?} singleOne\n       * @return {?}\n       */\n\n\n      function one(parent, route, id, singleOne) {\n        /** @type {?} */\n        var error;\n\n        if (isNumber(route) || isNumber(parent)) {\n          error = 'You\\'re creating a Restangular entity with the number ';\n          error += 'instead of the route or the parent. For example, you can\\'t call .one(12).';\n          throw new Error(error);\n        }\n\n        if (isUndefined(route)) {\n          error = 'You\\'re creating a Restangular entity either without the path. ';\n          error += 'For example you can\\'t call .one(). Please check if your arguments are valid.';\n          throw new Error(error);\n        }\n        /** @type {?} */\n\n\n        var elem = {};\n        config.setIdToElem(elem, id, route);\n        config.setFieldToElem(config.restangularFields.singleOne, elem, singleOne);\n        return restangularizeElem(parent, elem, route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @return {?}\n       */\n\n\n      function all(parent, route) {\n        return restangularizeCollection(parent, [], route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @return {?}\n       */\n\n\n      function several(parent, route\n      /*, ids */\n      ) {\n        /** @type {?} */\n        var collection = [];\n        collection[config.restangularFields.ids] = Array.prototype.splice.call(arguments, 2);\n        return restangularizeCollection(parent, collection, route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @param {?} url\n       * @return {?}\n       */\n\n\n      function oneUrl(parent, route, url) {\n        if (!route) {\n          throw new Error('Route is mandatory when creating new Restangular objects.');\n        }\n        /** @type {?} */\n\n\n        var elem = {};\n        config.setUrlToElem(elem, url, route);\n        return restangularizeElem(parent, elem, route, false);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} route\n       * @param {?} url\n       * @return {?}\n       */\n\n\n      function allUrl(parent, route, url) {\n        if (!route) {\n          throw new Error('Route is mandatory when creating new Restangular objects.');\n        }\n        /** @type {?} */\n\n\n        var elem = {};\n        config.setUrlToElem(elem, url, route);\n        return restangularizeCollection(parent, elem, route, false);\n      } // Promises\n\n      /**\n       * @param {?} subject\n       * @param {?} isCollection\n       * @param {?} valueToFill\n       * @return {?}\n       */\n\n\n      function restangularizeResponse(subject, isCollection, valueToFill) {\n        return subject.pipe(filter(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function (res) {\n          return !!res;\n        }));\n      }\n      /**\n       * @param {?} subject\n       * @param {?} response\n       * @param {?} data\n       * @param {?} filledValue\n       * @return {?}\n       */\n\n\n      function resolvePromise(subject, response, data, filledValue) {\n        extend(filledValue, data); // Trigger the full response interceptor.\n\n        if (config.fullResponse) {\n          subject.next(extend(response, {\n            data: data\n          }));\n        } else {\n          subject.next(data);\n        }\n\n        subject.complete();\n      } // Elements\n\n      /**\n       * @param {?} elem\n       * @return {?}\n       */\n\n\n      function stripRestangular(elem) {\n        if (isArray(elem)) {\n          /** @type {?} */\n          var array = [];\n          each(elem,\n          /**\n          * @param {?} value\n          * @return {?}\n          */\n          function (value) {\n            array.push(config.isRestangularized(value) ? stripRestangular(value) : value);\n          });\n          return array;\n        } else {\n          return omit(elem, values(omit(config.restangularFields, 'id')));\n        }\n      }\n      /**\n       * @param {?} elem\n       * @return {?}\n       */\n\n\n      function addCustomOperation(elem) {\n        elem[config.restangularFields.customOperation] = bind(customFunction, elem);\n        /** @type {?} */\n\n        var requestMethods = {\n          get: customFunction,\n          delete: customFunction\n        };\n        each(['put', 'patch', 'post'],\n        /**\n        * @param {?} name\n        * @return {?}\n        */\n        function (name) {\n          requestMethods[name] =\n          /**\n          * @param {?} operation\n          * @param {?} element\n          * @param {?} path\n          * @param {?} params\n          * @param {?} headers\n          * @return {?}\n          */\n          function (operation, element, path, params, headers) {\n            return bind(customFunction, this)(operation, path, params, headers, element);\n          };\n        });\n        each(requestMethods,\n        /**\n        * @param {?} requestFunc\n        * @param {?} name\n        * @return {?}\n        */\n        function (requestFunc, name) {\n          /** @type {?} */\n          var callOperation = name === 'delete' ? 'remove' : name;\n          each(['do', 'custom'],\n          /**\n          * @param {?} alias\n          * @return {?}\n          */\n          function (alias) {\n            elem[alias + name.toUpperCase()] = bind(requestFunc, elem, callOperation);\n          });\n        });\n        elem[config.restangularFields.customGETLIST] = bind(fetchFunction, elem);\n        elem[config.restangularFields.doGETLIST] = elem[config.restangularFields.customGETLIST];\n      }\n      /**\n       * @param {?} fromElement\n       * @param {?=} toElement\n       * @return {?}\n       */\n\n\n      function copyRestangularizedElement(fromElement) {\n        var toElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        /** @type {?} */\n        var copiedElement = assign(toElement, fromElement);\n        return restangularizeElem(copiedElement[config.restangularFields.parentResource], copiedElement, copiedElement[config.restangularFields.route], true);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} element\n       * @param {?} route\n       * @param {?=} fromServer\n       * @param {?=} collection\n       * @param {?=} reqParams\n       * @return {?}\n       */\n\n\n      function restangularizeElem(parent, element, route, fromServer, collection, reqParams) {\n        /** @type {?} */\n        var elem = config.onBeforeElemRestangularized(element, false, route);\n        /** @type {?} */\n\n        var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n\n        if (config.useCannonicalId) {\n          localElem[config.restangularFields.cannonicalId] = config.getIdFromElem(localElem);\n        }\n\n        if (collection) {\n          localElem[config.restangularFields.getParentList] =\n          /**\n          * @return {?}\n          */\n          function () {\n            return collection;\n          };\n        }\n\n        localElem[config.restangularFields.restangularCollection] = false;\n        localElem[config.restangularFields.get] = bind(getFunction, localElem);\n        localElem[config.restangularFields.getList] = bind(fetchFunction, localElem);\n        localElem[config.restangularFields.put] = bind(putFunction, localElem);\n        localElem[config.restangularFields.post] = bind(postFunction, localElem);\n        localElem[config.restangularFields.remove] = bind(deleteFunction, localElem);\n        localElem[config.restangularFields.head] = bind(headFunction, localElem);\n        localElem[config.restangularFields.trace] = bind(traceFunction, localElem);\n        localElem[config.restangularFields.options] = bind(optionsFunction, localElem);\n        localElem[config.restangularFields.patch] = bind(patchFunction, localElem);\n        localElem[config.restangularFields.save] = bind(save, localElem);\n        addCustomOperation(localElem);\n        return config.transformElem(localElem, false, route, service, true);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} element\n       * @param {?} route\n       * @param {?=} fromServer\n       * @param {?=} reqParams\n       * @return {?}\n       */\n\n\n      function restangularizeCollection(parent, element, route, fromServer, reqParams) {\n        /** @type {?} */\n        var elem = config.onBeforeElemRestangularized(element, true, route);\n        /** @type {?} */\n\n        var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n        localElem[config.restangularFields.restangularCollection] = true;\n        localElem[config.restangularFields.post] = bind(postFunction, localElem, null);\n        localElem[config.restangularFields.remove] = bind(deleteFunction, localElem);\n        localElem[config.restangularFields.head] = bind(headFunction, localElem);\n        localElem[config.restangularFields.trace] = bind(traceFunction, localElem);\n        localElem[config.restangularFields.putElement] = bind(putElementFunction, localElem);\n        localElem[config.restangularFields.options] = bind(optionsFunction, localElem);\n        localElem[config.restangularFields.patch] = bind(patchFunction, localElem);\n        localElem[config.restangularFields.get] = bind(getById, localElem);\n        localElem[config.restangularFields.getList] = bind(fetchFunction, localElem, null);\n        addCustomOperation(localElem);\n        return config.transformElem(localElem, true, route, service, true);\n      }\n      /**\n       * @param {?} parent\n       * @param {?} element\n       * @param {?} route\n       * @return {?}\n       */\n\n\n      function restangularizeCollectionAndElements(parent, element, route) {\n        /** @type {?} */\n        var collection = restangularizeCollection(parent, element, route, false);\n        each(collection,\n        /**\n        * @param {?} elem\n        * @return {?}\n        */\n        function (elem) {\n          if (elem) {\n            restangularizeElem(parent, elem, route, false);\n          }\n        });\n        return collection;\n      }\n      /**\n       * @param {?} id\n       * @param {?} reqParams\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function getById(id, reqParams, headers) {\n        return this.customGET(id.toString(), reqParams, headers);\n      }\n      /**\n       * @param {?} idx\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function putElementFunction(idx, params, headers) {\n        /** @type {?} */\n        var __this = this;\n        /** @type {?} */\n\n\n        var elemToPut = this[idx];\n        /** @type {?} */\n\n        var subject = new BehaviorSubject(null);\n        /** @type {?} */\n\n        var filledArray = [];\n        filledArray = config.transformElem(filledArray, true, elemToPut[config.restangularFields.route], service);\n        elemToPut.put(params, headers).subscribe(\n        /**\n        * @param {?} serverElem\n        * @return {?}\n        */\n        function (serverElem) {\n          /** @type {?} */\n          var newArray = copyRestangularizedElement(__this);\n          newArray[idx] = serverElem;\n          filledArray = newArray;\n          subject.next(newArray);\n        },\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function (response) {\n          subject.error(response);\n        },\n        /**\n        * @return {?}\n        */\n        function () {\n          subject.complete();\n        });\n        return restangularizeResponse(subject, true, filledArray);\n      }\n      /**\n       * @param {?} resData\n       * @param {?} operation\n       * @param {?} route\n       * @param {?} fetchUrl\n       * @param {?} response\n       * @param {?} subject\n       * @return {?}\n       */\n\n\n      function parseResponse(resData, operation, route, fetchUrl, response, subject) {\n        /** @type {?} */\n        var data = config.responseExtractor(resData, operation, route, fetchUrl, response, subject);\n        /** @type {?} */\n\n        var etag = response.headers.get('ETag');\n\n        if (data && etag) {\n          data[config.restangularFields.etag] = etag;\n        }\n\n        return data;\n      }\n      /**\n       * @param {?} what\n       * @param {?} reqParams\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function fetchFunction(what, reqParams, headers) {\n        /** @type {?} */\n        var __this = this;\n        /** @type {?} */\n\n\n        var subject = new BehaviorSubject(null);\n        /** @type {?} */\n\n        var operation = 'getList';\n        /** @type {?} */\n\n        var url = urlHandler.fetchUrl(this, what);\n        /** @type {?} */\n\n        var whatFetched = what || __this[config.restangularFields.route];\n        /** @type {?} */\n\n        var request = config.fullRequestInterceptor(null, operation, whatFetched, url, headers || {}, reqParams || {}, this[config.restangularFields.httpConfig] || {});\n        /** @type {?} */\n\n        var filledArray = [];\n        filledArray = config.transformElem(filledArray, true, whatFetched, service);\n        /** @type {?} */\n\n        var method = 'getList';\n\n        if (config.jsonp) {\n          method = 'jsonp';\n        }\n        /** @type {?} */\n\n\n        var okCallback =\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function okCallback(response) {\n          /** @type {?} */\n          var resData = response.body;\n          /** @type {?} */\n\n          var fullParams = response.config.params;\n          /** @type {?} */\n\n          var data = parseResponse(resData, operation, whatFetched, url, response, subject); // support empty response for getList() calls (some APIs respond with 204 and empty body)\n\n          if (isUndefined(data) || '' === data) {\n            data = [];\n          }\n\n          if (!isArray(data)) {\n            throw new Error('Response for getList SHOULD be an array and not an object or something else');\n          }\n\n          if (true === config.plainByDefault) {\n            return resolvePromise(subject, response, data, filledArray);\n          }\n          /** @type {?} */\n\n\n          var processedData = map$1(data,\n          /**\n          * @param {?} elem\n          * @return {?}\n          */\n          function (elem) {\n            if (!__this[config.restangularFields.restangularCollection]) {\n              return restangularizeElem(__this, elem, what, true, data);\n            } else {\n              return restangularizeElem(__this[config.restangularFields.parentResource], elem, __this[config.restangularFields.route], true, data);\n            }\n          });\n          processedData = extend(data, processedData);\n\n          if (!__this[config.restangularFields.restangularCollection]) {\n            resolvePromise(subject, response, restangularizeCollection(__this, processedData, what, true, fullParams), filledArray);\n          } else {\n            resolvePromise(subject, response, restangularizeCollection(__this[config.restangularFields.parentResource], processedData, __this[config.restangularFields.route], true, fullParams), filledArray);\n          }\n        };\n\n        urlHandler.resource(this, $http, request.httpConfig, request.headers, request.params, what, this[config.restangularFields.etag], operation)[method]().subscribe(okCallback,\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function error(response) {\n          if (response.status === 304 && __this[config.restangularFields.restangularCollection]) {\n            resolvePromise(subject, response, __this, filledArray);\n          } else if (every(config.errorInterceptors,\n          /**\n          * @param {?} cb\n          * @return {?}\n          */\n          function (cb) {\n            return cb(response, subject, okCallback) !== false;\n          })) {\n            // triggered if no callback returns false\n            subject.error(response);\n          }\n        });\n        return restangularizeResponse(subject, true, filledArray);\n      }\n      /**\n       * @param {?} httpConfig\n       * @return {?}\n       */\n\n\n      function withHttpConfig(httpConfig) {\n        this[config.restangularFields.httpConfig] = httpConfig;\n        return this;\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function save(params, headers) {\n        if (this[config.restangularFields.fromServer]) {\n          return this[config.restangularFields.put](params, headers);\n        } else {\n          return bind(elemFunction, this)('post', undefined, params, undefined, headers);\n        }\n      }\n      /**\n       * @param {?} operation\n       * @param {?} what\n       * @param {?} params\n       * @param {?} obj\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function elemFunction(operation, what, params, obj, headers) {\n        /** @type {?} */\n        var __this = this;\n        /** @type {?} */\n\n\n        var subject = new BehaviorSubject(null);\n        /** @type {?} */\n\n        var resParams = params || {};\n        /** @type {?} */\n\n        var route = what || this[config.restangularFields.route];\n        /** @type {?} */\n\n        var fetchUrl = urlHandler.fetchUrl(this, what);\n        /** @type {?} */\n\n        var callObj = obj || this; // fallback to etag on restangular object (since for custom methods we probably don't explicitly specify the etag field)\n\n        /** @type {?} */\n\n        var etag = callObj[config.restangularFields.etag] || (operation !== 'post' ? this[config.restangularFields.etag] : null);\n\n        if (isObject(callObj) && config.isRestangularized(callObj)) {\n          callObj = stripRestangular(callObj);\n        }\n        /** @type {?} */\n\n\n        var request = config.fullRequestInterceptor(callObj, operation, route, fetchUrl, headers || {}, resParams || {}, this[config.restangularFields.httpConfig] || {});\n        /** @type {?} */\n\n        var filledObject = {};\n        filledObject = config.transformElem(filledObject, false, route, service);\n        /** @type {?} */\n\n        var okCallback =\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function okCallback(response) {\n          /** @type {?} */\n          var resData = get(response, 'body');\n          /** @type {?} */\n\n          var fullParams = get(response, 'config.params');\n          /** @type {?} */\n\n          var elem = parseResponse(resData, operation, route, fetchUrl, response, subject);\n\n          if (elem) {\n            /** @type {?} */\n            var data;\n\n            if (true === config.plainByDefault) {\n              return resolvePromise(subject, response, elem, filledObject);\n            }\n\n            if (operation === 'post' && !__this[config.restangularFields.restangularCollection]) {\n              data = restangularizeElem(__this[config.restangularFields.parentResource], elem, route, true, null, fullParams);\n              resolvePromise(subject, response, data, filledObject);\n            } else {\n              data = restangularizeElem(__this[config.restangularFields.parentResource], elem, __this[config.restangularFields.route], true, null, fullParams);\n              data[config.restangularFields.singleOne] = __this[config.restangularFields.singleOne];\n              resolvePromise(subject, response, data, filledObject);\n            }\n          } else {\n            resolvePromise(subject, response, undefined, filledObject);\n          }\n        };\n        /** @type {?} */\n\n\n        var errorCallback =\n        /**\n        * @param {?} response\n        * @return {?}\n        */\n        function errorCallback(response) {\n          if (response.status === 304 && config.isSafe(operation)) {\n            resolvePromise(subject, response, __this, filledObject);\n          } else if (every(config.errorInterceptors,\n          /**\n          * @param {?} cb\n          * @return {?}\n          */\n          function (cb) {\n            return cb(response, subject, okCallback) !== false;\n          })) {\n            // triggered if no callback returns false\n            subject.error(response);\n          }\n        }; // Overriding HTTP Method\n\n        /** @type {?} */\n\n\n        var callOperation = operation;\n        /** @type {?} */\n\n        var callHeaders = extend({}, request.headers);\n        /** @type {?} */\n\n        var isOverrideOperation = config.isOverridenMethod(operation);\n\n        if (isOverrideOperation) {\n          callOperation = 'post';\n          callHeaders = extend(callHeaders, {\n            'X-HTTP-Method-Override': operation === 'remove' ? 'DELETE' : operation.toUpperCase()\n          });\n        } else if (config.jsonp && callOperation === 'get') {\n          callOperation = 'jsonp';\n        }\n\n        if (config.isSafe(operation)) {\n          if (isOverrideOperation) {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation]({}).subscribe(okCallback, errorCallback);\n          } else {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation]().subscribe(okCallback, errorCallback);\n          }\n        } else {\n          urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params, what, etag, callOperation)[callOperation](request.element).subscribe(okCallback, errorCallback);\n        }\n\n        return restangularizeResponse(subject, false, filledObject);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function getFunction(params, headers) {\n        return bind(elemFunction, this)('get', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function deleteFunction(params, headers) {\n        return bind(elemFunction, this)('remove', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function putFunction(params, headers) {\n        return bind(elemFunction, this)('put', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} what\n       * @param {?} elem\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function postFunction(what, elem, params, headers) {\n        return bind(elemFunction, this)('post', what, params, elem, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function headFunction(params, headers) {\n        return bind(elemFunction, this)('head', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function traceFunction(params, headers) {\n        return bind(elemFunction, this)('trace', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function optionsFunction(params, headers) {\n        return bind(elemFunction, this)('options', undefined, params, undefined, headers);\n      }\n      /**\n       * @param {?} elem\n       * @param {?} params\n       * @param {?} headers\n       * @return {?}\n       */\n\n\n      function patchFunction(elem, params, headers) {\n        return bind(elemFunction, this)('patch', undefined, params, elem, headers);\n      }\n      /**\n       * @param {?} operation\n       * @param {?} path\n       * @param {?} params\n       * @param {?} headers\n       * @param {?} elem\n       * @return {?}\n       */\n\n\n      function customFunction(operation, path, params, headers, elem) {\n        return bind(elemFunction, this)(operation, path, params, elem, headers);\n      }\n      /**\n       * @param {?} name\n       * @param {?} operation\n       * @param {?} path\n       * @param {?} defaultParams\n       * @param {?} defaultHeaders\n       * @param {?} defaultElem\n       * @return {?}\n       */\n\n\n      function addRestangularMethodFunction(name, operation, path, defaultParams, defaultHeaders, defaultElem) {\n        /** @type {?} */\n        var bindedFunction;\n\n        if (operation === 'getList') {\n          bindedFunction = bind(fetchFunction, this, path);\n        } else {\n          bindedFunction = bind(customFunction, this, operation, path);\n        }\n        /** @type {?} */\n\n\n        var createdFunction =\n        /**\n        * @param {?} params\n        * @param {?} headers\n        * @param {?} elem\n        * @return {?}\n        */\n        function createdFunction(params, headers, elem) {\n          /** @type {?} */\n          var callParams = defaults({\n            params: params,\n            headers: headers,\n            elem: elem\n          }, {\n            params: defaultParams,\n            headers: defaultHeaders,\n            elem: defaultElem\n          });\n          return bindedFunction(callParams.params, callParams.headers, callParams.elem);\n        };\n\n        if (config.isSafe(operation)) {\n          this[name] = createdFunction;\n        } else {\n          this[name] =\n          /**\n          * @param {?} elem\n          * @param {?} params\n          * @param {?} headers\n          * @return {?}\n          */\n          function (elem, params, headers) {\n            return createdFunction(params, headers, elem);\n          };\n        }\n      }\n      /**\n       * @param {?} configurer\n       * @return {?}\n       */\n\n\n      function withConfigurationFunction(configurer) {\n        /** @type {?} */\n        var newConfig = clone(omit(config, 'configuration'));\n        RestangularConfigurer(newConfig, newConfig);\n        configurer(newConfig);\n        return createServiceForConfiguration(newConfig);\n      }\n      /**\n       * @param {?} route\n       * @param {?} parent\n       * @return {?}\n       */\n\n\n      function toService(route, parent) {\n        /** @type {?} */\n        var knownCollectionMethods = values(config.restangularFields);\n        /** @type {?} */\n\n        var serv = {};\n        /** @type {?} */\n\n        var collection = (parent || service).all(route);\n        serv.one = bind(one, parent || service, parent, route);\n        serv.all = bind(collection.all, collection);\n        serv.post = bind(collection.post, collection);\n        serv.getList = bind(collection.getList, collection);\n        serv.withHttpConfig = bind(collection.withHttpConfig, collection);\n        serv.get = bind(collection.get, collection);\n\n        for (var prop in collection) {\n          if (collection.hasOwnProperty(prop) && isFunction(collection[prop]) && !includes(knownCollectionMethods, prop)) {\n            serv[prop] = bind(collection[prop], collection);\n          }\n        }\n\n        return serv;\n      }\n\n      RestangularConfigurer(service, config);\n      service.copy = bind(copyRestangularizedElement, service);\n      service.service = bind(toService, service);\n      service.withConfig = bind(withConfigurationFunction, service);\n      service.one = bind(one, service, null);\n      service.all = bind(all, service, null);\n      service.several = bind(several, service, null);\n      service.oneUrl = bind(oneUrl, service, null);\n      service.allUrl = bind(allUrl, service, null);\n      service.stripRestangular = bind(stripRestangular, service);\n      service.restangularizeElement = bind(restangularizeElem, service);\n      service.restangularizeCollection = bind(restangularizeCollectionAndElements, service);\n      return service;\n    }\n\n    return createServiceForConfiguration(globalConfiguration);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-restangular.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar CONFIG_OBJ = new InjectionToken('configObj');\n\nvar RestangularModule = /*#__PURE__*/function () {\n  /**\n   * @param {?} parentModule\n   */\n  function RestangularModule(parentModule) {\n    _classCallCheck(this, RestangularModule);\n\n    if (parentModule) {\n      throw new Error('RestangularModule is already loaded. Import it in the AppModule only');\n    }\n  }\n  /**\n   * @param {?=} config1\n   * @param {?=} config2\n   * @return {?}\n   */\n\n\n  _createClass(RestangularModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(config1, config2) {\n      return {\n        ngModule: RestangularModule,\n        providers: [{\n          provide: CONFIG_OBJ,\n          useValue: [config1, config2]\n        }, {\n          provide: RESTANGULAR,\n          useFactory: RestangularFactory,\n          deps: [CONFIG_OBJ]\n        }]\n      };\n    }\n  }]);\n\n  return RestangularModule;\n}();\n\nRestangularModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RestangularModule\n});\nRestangularModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RestangularModule_Factory(t) {\n    return new (t || RestangularModule)(ɵngcc0.ɵɵinject(RestangularModule, 12));\n  },\n  providers: [RestangularHttp, Restangular],\n  imports: [[HttpClientModule]]\n});\n/** @nocollapse */\n\nRestangularModule.ctorParameters = function () {\n  return [{\n    type: RestangularModule,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RestangularModule, {\n    imports: function imports() {\n      return [HttpClientModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RestangularModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule],\n      providers: [RestangularHttp, Restangular]\n    }]\n  }], function () {\n    return [{\n      type: RestangularModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-restangular.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { Restangular, RestangularHttp, RestangularModule, CONFIG_OBJ as ɵa, RESTANGULAR as ɵb, RestangularFactory as ɵc };","map":{"version":3,"sources":["../../../projects/ngx-restangular/src/lib/ngx-restangular.config.ts","../../../projects/ngx-restangular/src/lib/ngx-restangular-helper.ts","../../../projects/ngx-restangular/src/lib/ngx-restangular-http.ts","../../../projects/ngx-restangular/src/lib/ngx-restangular-config.factory.ts","../../../projects/ngx-restangular/src/lib/ngx-restangular.ts","../../../projects/ngx-restangular/src/lib/ngx-restangular.module.ts"],"names":["map"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport { isArray } from 'lodash';\n\n\nexport const RESTANGULAR = new InjectionToken<string>('restangularWithConfig');\n\nexport function RestangularFactory([callbackOrServices, callback]) {\n  let arrServices = [];\n  let fn = callbackOrServices;\n\n  if (isArray(callbackOrServices)) {\n    arrServices = callbackOrServices;\n    fn = callback;\n  }\n\n  return {fn, arrServices};\n}\n","import { HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { assign } from 'core-js/features/object';\n\nexport class RestangularHelper {\n\n  static createRequest(options) {\n    const requestQueryParams = RestangularHelper.createRequestQueryParams(options.params);\n    const requestHeaders = RestangularHelper.createRequestHeaders(options.headers);\n    const methodName = options.method.toUpperCase();\n    const withCredentials = options.withCredentials || false;\n\n    let request = new HttpRequest(\n      methodName,\n      options.url,\n      options.data,\n      {\n        headers: requestHeaders,\n        params: requestQueryParams,\n        responseType: options.responseType,\n        withCredentials\n      }\n    );\n\n    if (['GET', 'DELETE', 'HEAD', 'JSONP', 'OPTIONS'].indexOf(methodName) >= 0) {\n      request = new HttpRequest(\n        methodName,\n        options.url,\n        {\n          headers: requestHeaders,\n          params: requestQueryParams,\n          responseType: options.responseType,\n          withCredentials\n        }\n      );\n    }\n    return request;\n  }\n\n  static createRequestQueryParams(queryParams) {\n    const requestQueryParams = assign({}, queryParams);\n    let search: HttpParams = new HttpParams();\n\n    for (const key in requestQueryParams) {\n      let value: any = requestQueryParams[key];\n\n      if (Array.isArray(value)) {\n        value.forEach(function (val) {\n          search = search.append(key, val);\n        });\n      } else {\n        if (typeof value === 'object') {\n          value = JSON.stringify(value);\n        }\n        search = search.append(key, value);\n      }\n    }\n\n    return search;\n  }\n\n  static createRequestHeaders(headers) {\n    for (const key in headers) {\n      const value: any = headers[key];\n      if (typeof value === 'undefined') {\n        delete headers[key];\n      }\n    }\n\n    return new HttpHeaders(assign({}, headers));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpBackend, HttpErrorResponse, HttpEvent, HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { throwError, Observable } from 'rxjs';\n\nimport { RestangularHelper } from './ngx-restangular-helper';\nimport { catchError, filter, map } from 'rxjs/operators';\n\n@Injectable()\nexport class RestangularHttp {\n\n  constructor(public http: HttpBackend) {\n  }\n\n  createRequest(options): Observable<HttpEvent<any>> {\n    const request = RestangularHelper.createRequest(options);\n\n    return this.request(request);\n  }\n\n  request(request: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.http.handle(request)\n    .pipe(\n      filter(event => event instanceof HttpResponse),\n      map((response: any) => {\n        if (!response.ok) {\n          return throwError(new HttpErrorResponse(response));\n        }\n        return response;\n      }),\n      map(response => {\n        response.config = {params: request};\n        return response;\n      }),\n      catchError(err => {\n        err.request = request;\n        err.data = err.error;\n        err.repeatRequest = (newRequest?) => {\n          return this.request(newRequest || request);\n        };\n\n        return throwError(err);\n      })\n    );\n  }\n}\n","import {\n  includes,\n  isUndefined,\n  isNull,\n  isArray,\n  isObject,\n  isBoolean,\n  defaults,\n  each,\n  extend,\n  find,\n  has,\n  initial,\n  last,\n  clone,\n  reduce,\n  keys,\n  isEmpty,\n  forEach,\n} from 'lodash';\n\nexport function RestangularConfigurer(object, configuration) {\n  object.configuration = configuration;\n\n  /**\n   * Those are HTTP safe methods for which there is no need to pass any data with the request.\n   */\n  const safeMethods = ['get', 'head', 'options', 'trace', 'getlist'];\n  configuration.isSafe = function (operation) {\n    return includes(safeMethods, operation.toLowerCase());\n  };\n\n  const absolutePattern = /^https?:\\/\\//i;\n  configuration.isAbsoluteUrl = function (string) {\n    return isUndefined(configuration.absoluteUrl) || isNull(configuration.absoluteUrl) ?\n      string && absolutePattern.test(string) :\n      configuration.absoluteUrl;\n  };\n\n  configuration.absoluteUrl = isUndefined(configuration.absoluteUrl) ? true : configuration.absoluteUrl;\n  object.setSelfLinkAbsoluteUrl = function (value) {\n    configuration.absoluteUrl = value;\n  };\n  /**\n   * This is the BaseURL to be used with Restangular\n   */\n  configuration.baseUrl = isUndefined(configuration.baseUrl) ? '' : configuration.baseUrl;\n  object.setBaseUrl = function (newBaseUrl) {\n    configuration.baseUrl = /\\/$/.test(newBaseUrl) ?\n      newBaseUrl.substring(0, newBaseUrl.length - 1) :\n      newBaseUrl;\n    return this;\n  };\n\n  /**\n   * Sets the extra fields to keep from the parents\n   */\n  configuration.extraFields = configuration.extraFields || [];\n  object.setExtraFields = function (newExtraFields) {\n    configuration.extraFields = newExtraFields;\n    return this;\n  };\n\n  /**\n   * Some default $http parameter to be used in EVERY call\n   **/\n  configuration.defaultHttpFields = configuration.defaultHttpFields || {};\n  object.setDefaultHttpFields = function (values) {\n    configuration.defaultHttpFields = values;\n    return this;\n  };\n\n  /**\n   * Always return plain data, no restangularized object\n   **/\n  configuration.plainByDefault = configuration.plainByDefault || false;\n  object.setPlainByDefault = function (value) {\n    configuration.plainByDefault = value === true ? true : false;\n    return this;\n  };\n\n  configuration.withHttpValues = function (httpLocalConfig, obj) {\n    return defaults(obj, httpLocalConfig, configuration.defaultHttpFields);\n  };\n\n  configuration.encodeIds = isUndefined(configuration.encodeIds) ? true : configuration.encodeIds;\n  object.setEncodeIds = function (encode) {\n    configuration.encodeIds = encode;\n  };\n\n  configuration.defaultRequestParams = configuration.defaultRequestParams || {\n    get: {},\n    post: {},\n    put: {},\n    remove: {},\n    common: {}\n  };\n\n  object.setDefaultRequestParams = function (param1, param2) {\n    let methods = [];\n    const params = param2 || param1;\n    if (!isUndefined(param2)) {\n      if (isArray(param1)) {\n        methods = param1;\n      } else {\n        methods.push(param1);\n      }\n    } else {\n      methods.push('common');\n    }\n\n    each(methods, function (method) {\n      configuration.defaultRequestParams[method] = params;\n    });\n    return this;\n  };\n\n  object.requestParams = configuration.defaultRequestParams;\n\n  configuration.defaultHeaders = configuration.defaultHeaders || {};\n  object.setDefaultHeaders = function (headers) {\n    configuration.defaultHeaders = headers;\n    object.defaultHeaders = configuration.defaultHeaders;\n    return this;\n  };\n\n  object.defaultHeaders = configuration.defaultHeaders;\n\n\n  /**\n   * Method overriders response Method\n   **/\n  configuration.defaultResponseMethod = configuration.defaultResponseMethod || 'promise';\n  object.setDefaultResponseMethod = function (method) {\n    configuration.defaultResponseMethod = method;\n    object.defaultResponseMethod = configuration.defaultResponseMethod;\n    return this;\n  };\n  object.defaultResponseMethod = configuration.defaultResponseMethod;\n\n  /**\n   * Method overriders will set which methods are sent via POST with an X-HTTP-Method-Override\n   **/\n  configuration.methodOverriders = configuration.methodOverriders || [];\n  object.setMethodOverriders = function (values) {\n    const overriders = extend([], values);\n    if (configuration.isOverridenMethod('delete', overriders)) {\n      overriders.push('remove');\n    }\n    configuration.methodOverriders = overriders;\n    return this;\n  };\n\n  configuration.jsonp = isUndefined(configuration.jsonp) ? false : configuration.jsonp;\n  object.setJsonp = function (active) {\n    configuration.jsonp = active;\n  };\n\n  configuration.isOverridenMethod = function (method, values) {\n    const search = values || configuration.methodOverriders;\n    return !isUndefined(find(search, function (one: string) {\n      return one.toLowerCase() === method.toLowerCase();\n    }));\n  };\n\n  /**\n   * Sets the URL creator type. For now, only Path is created. In the future we'll have queryParams\n   **/\n  configuration.urlCreator = configuration.urlCreator || 'path';\n  object.setUrlCreator = function (name) {\n    if (!has(configuration.urlCreatorFactory, name)) {\n      throw new Error('URL Path selected isn\\'t valid');\n    }\n\n    configuration.urlCreator = name;\n    return this;\n  };\n\n  /**\n   * You can set the restangular fields here. The 3 required fields for Restangular are:\n   *\n   * id: Id of the element\n   * route: name of the route of this element\n   * parentResource: the reference to the parent resource\n   *\n   *  All of this fields except for id, are handled (and created) by Restangular. By default,\n   *  the field values will be id, route and parentResource respectively\n   */\n  configuration.restangularFields = configuration.restangularFields || {\n    id: 'id',\n    route: 'route',\n    parentResource: 'parentResource',\n    restangularCollection: 'restangularCollection',\n    cannonicalId: '__cannonicalId',\n    etag: 'restangularEtag',\n    selfLink: 'href',\n    get: 'get',\n    getList: 'getList',\n    put: 'put',\n    post: 'post',\n    remove: 'remove',\n    head: 'head',\n    trace: 'trace',\n    options: 'options',\n    patch: 'patch',\n    getRestangularUrl: 'getRestangularUrl',\n    getRequestedUrl: 'getRequestedUrl',\n    putElement: 'putElement',\n    addRestangularMethod: 'addRestangularMethod',\n    getParentList: 'getParentList',\n    clone: 'clone',\n    ids: 'ids',\n    httpConfig: '_$httpConfig',\n    reqParams: 'reqParams',\n    one: 'one',\n    all: 'all',\n    several: 'several',\n    oneUrl: 'oneUrl',\n    allUrl: 'allUrl',\n    customPUT: 'customPUT',\n    customPATCH: 'customPATCH',\n    customPOST: 'customPOST',\n    customDELETE: 'customDELETE',\n    customGET: 'customGET',\n    customGETLIST: 'customGETLIST',\n    customOperation: 'customOperation',\n    doPUT: 'doPUT',\n    doPATCH: 'doPATCH',\n    doPOST: 'doPOST',\n    doDELETE: 'doDELETE',\n    doGET: 'doGET',\n    doGETLIST: 'doGETLIST',\n    fromServer: 'fromServer',\n    withConfig: 'withConfig',\n    withHttpConfig: 'withHttpConfig',\n    singleOne: 'singleOne',\n    plain: 'plain',\n    save: 'save',\n    restangularized: 'restangularized'\n  };\n  object.setRestangularFields = function (resFields) {\n    configuration.restangularFields =\n      extend({}, configuration.restangularFields, resFields);\n    return this;\n  };\n\n  configuration.isRestangularized = function (obj) {\n    return !!obj[configuration.restangularFields.restangularized];\n  };\n\n  configuration.setFieldToElem = function (field, elem, value) {\n    const properties = field.split('.');\n    let idValue = elem;\n    each(initial(properties), function (prop: any) {\n      idValue[prop] = {};\n      idValue = idValue[prop];\n    });\n    const index: any = last(properties);\n    idValue[index] = value;\n    return this;\n  };\n\n  configuration.getFieldFromElem = function (field, elem) {\n    const properties = field.split('.');\n    let idValue: any = elem;\n    each(properties, function (prop) {\n      if (idValue) {\n        idValue = idValue[prop];\n      }\n    });\n    return clone(idValue);\n  };\n\n  configuration.setIdToElem = function (elem, id /*, route */) {\n    configuration.setFieldToElem(configuration.restangularFields.id, elem, id);\n    return this;\n  };\n\n  configuration.getIdFromElem = function (elem) {\n    return configuration.getFieldFromElem(configuration.restangularFields.id, elem);\n  };\n\n  configuration.isValidId = function (elemId) {\n    return '' !== elemId && !isUndefined(elemId) && !isNull(elemId);\n  };\n\n  configuration.setUrlToElem = function (elem, url /*, route */) {\n    configuration.setFieldToElem(configuration.restangularFields.selfLink, elem, url);\n    return this;\n  };\n\n  configuration.getUrlFromElem = function (elem) {\n    return configuration.getFieldFromElem(configuration.restangularFields.selfLink, elem);\n  };\n\n  configuration.useCannonicalId = isUndefined(configuration.useCannonicalId) ? false : configuration.useCannonicalId;\n  object.setUseCannonicalId = function (value) {\n    configuration.useCannonicalId = value;\n    return this;\n  };\n\n  configuration.getCannonicalIdFromElem = function (elem) {\n    const cannonicalId = elem[configuration.restangularFields.cannonicalId];\n    const actualId = configuration.isValidId(cannonicalId) ? cannonicalId : configuration.getIdFromElem(elem);\n    return actualId;\n  };\n\n  /**\n   * Sets the Response parser. This is used in case your response isn't directly the data.\n   * For example if you have a response like {meta: {'meta'}, data: {name: 'Gonto'}}\n   * you can extract this data which is the one that needs wrapping\n   *\n   * The ResponseExtractor is a function that receives the response and the method executed.\n   */\n\n  configuration.responseInterceptors = configuration.responseInterceptors ? [...configuration.responseInterceptors] : [];\n\n  configuration.defaultResponseInterceptor = function (data /*, operation, what, url, response, subject */) {\n    return data || {};\n  };\n\n  configuration.responseExtractor = function (data, operation, what, url, response, subject) {\n    const interceptors = clone(configuration.responseInterceptors);\n    interceptors.push(configuration.defaultResponseInterceptor);\n    let theData = data;\n    each(interceptors, function (interceptor: any) {\n      theData = interceptor(theData, operation,\n        what, url, response, subject);\n    });\n    return theData;\n  };\n\n  object.addResponseInterceptor = function (extractor) {\n    configuration.responseInterceptors.push(extractor);\n    return this;\n  };\n\n  configuration.errorInterceptors = configuration.errorInterceptors ? [...configuration.errorInterceptors] : [];\n  object.addErrorInterceptor = function (interceptor) {\n    configuration.errorInterceptors = [interceptor, ...configuration.errorInterceptors];\n    return this;\n  };\n\n  object.setResponseInterceptor = object.addResponseInterceptor;\n  object.setResponseExtractor = object.addResponseInterceptor;\n  object.setErrorInterceptor = object.addErrorInterceptor;\n\n  /**\n   * Response interceptor is called just before resolving promises.\n   */\n\n\n  /**\n   * Request interceptor is called before sending an object to the server.\n   */\n  configuration.requestInterceptors = configuration.requestInterceptors ? [...configuration.requestInterceptors] : [];\n\n  configuration.defaultInterceptor = function (element, operation, path, url, headers, params, httpConfig) {\n    return {\n      element: element,\n      headers: headers,\n      params: params,\n      httpConfig: httpConfig\n    };\n  };\n\n  configuration.fullRequestInterceptor = function (element, operation, path, url, headers, params, httpConfig) {\n    const interceptors = clone(configuration.requestInterceptors);\n    const defaultRequest = configuration.defaultInterceptor(element, operation, path, url, headers, params, httpConfig);\n    return reduce(interceptors, function (request: any, interceptor: any) {\n\n      const returnInterceptor: any = interceptor(\n        request.element,\n        operation,\n        path,\n        url,\n        request.headers,\n        request.params,\n        request.httpConfig\n      );\n      return extend(request, returnInterceptor);\n    }, defaultRequest);\n  };\n\n  object.addRequestInterceptor = function (interceptor) {\n    configuration.requestInterceptors.push(function (elem, operation, path, url, headers, params, httpConfig) {\n      return {\n        headers: headers,\n        params: params,\n        element: interceptor(elem, operation, path, url),\n        httpConfig: httpConfig\n      };\n    });\n    return this;\n  };\n\n  object.setRequestInterceptor = object.addRequestInterceptor;\n\n  object.addFullRequestInterceptor = function (interceptor) {\n    configuration.requestInterceptors.push(interceptor);\n    return this;\n  };\n\n  object.setFullRequestInterceptor = object.addFullRequestInterceptor;\n\n  configuration.onBeforeElemRestangularized = configuration.onBeforeElemRestangularized || function (elem) {\n    return elem;\n  };\n  object.setOnBeforeElemRestangularized = function (post) {\n    configuration.onBeforeElemRestangularized = post;\n    return this;\n  };\n\n  object.setRestangularizePromiseInterceptor = function (interceptor) {\n    configuration.restangularizePromiseInterceptor = interceptor;\n    return this;\n  };\n\n  /**\n   * This method is called after an element has been \"Restangularized\".\n   *\n   * It receives the element, a boolean indicating if it's an element or a collection\n   * and the name of the model\n   *\n   */\n  configuration.onElemRestangularized = configuration.onElemRestangularized || function (elem) {\n    return elem;\n  };\n  object.setOnElemRestangularized = function (post) {\n    configuration.onElemRestangularized = post;\n    return this;\n  };\n\n  configuration.shouldSaveParent = configuration.shouldSaveParent || function () {\n    return true;\n  };\n  object.setParentless = function (values) {\n    if (isArray(values)) {\n      configuration.shouldSaveParent = function (route) {\n        return !includes(values, route);\n      };\n    } else if (isBoolean(values)) {\n      configuration.shouldSaveParent = function () {\n        return !values;\n      };\n    }\n    return this;\n  };\n\n  /**\n   * This lets you set a suffix to every request.\n   *\n   * For example, if your api requires that for JSon requests you do /users/123.json, you can set that\n   * in here.\n   *\n   *\n   * By default, the suffix is null\n   */\n  configuration.suffix = isUndefined(configuration.suffix) ? null : configuration.suffix;\n  object.setRequestSuffix = function (newSuffix) {\n    configuration.suffix = newSuffix;\n    return this;\n  };\n\n  /**\n   * Add element transformers for certain routes.\n   */\n  configuration.transformers = configuration.transformers || {};\n  object.addElementTransformer = function (type, secondArg, thirdArg) {\n    let isCollection = null;\n    let transformer = null;\n    if (arguments.length === 2) {\n      transformer = secondArg;\n    } else {\n      transformer = thirdArg;\n      isCollection = secondArg;\n    }\n\n    let typeTransformers = configuration.transformers[type];\n    if (!typeTransformers) {\n      typeTransformers = configuration.transformers[type] = [];\n    }\n\n    typeTransformers.push(function (coll, elem) {\n      if (isNull(isCollection) || (coll === isCollection)) {\n        return transformer(elem);\n      }\n      return elem;\n    });\n\n    return object;\n  };\n\n  object.extendCollection = function (route, fn) {\n    return object.addElementTransformer(route, true, fn);\n  };\n\n  object.extendModel = function (route, fn) {\n    return object.addElementTransformer(route, false, fn);\n  };\n\n  configuration.transformElem = function (elem, isCollection, route, Restangular, force) {\n    if (!force && !configuration.transformLocalElements && !elem[configuration.restangularFields.fromServer]) {\n      return elem;\n    }\n    const typeTransformers = configuration.transformers[route];\n    let changedElem = elem;\n    if (typeTransformers) {\n      each(typeTransformers, function (transformer: (isCollection: boolean, changedElem: any) => any) {\n        changedElem = transformer(isCollection, changedElem);\n      });\n    }\n    return configuration.onElemRestangularized(changedElem, isCollection, route, Restangular);\n  };\n\n  configuration.transformLocalElements = isUndefined(configuration.transformLocalElements) ?\n    false :\n    configuration.transformLocalElements;\n\n  object.setTransformOnlyServerElements = function (active) {\n    configuration.transformLocalElements = !active;\n  };\n\n  configuration.fullResponse = isUndefined(configuration.fullResponse) ? false : configuration.fullResponse;\n  object.setFullResponse = function (full) {\n    configuration.fullResponse = full;\n    return this;\n  };\n\n\n  // Internal values and functions\n  configuration.urlCreatorFactory = {};\n\n  /**\n   * Base URL Creator. Base prototype for everything related to it\n   **/\n\n  const BaseCreator = function () {\n  };\n\n  BaseCreator.prototype.setConfig = function (config) {\n    this.config = config;\n    return this;\n  };\n\n  BaseCreator.prototype.parentsArray = function (current) {\n    const parents = [];\n    while (current) {\n      parents.push(current);\n      current = current[this.config.restangularFields.parentResource];\n    }\n    return parents.reverse();\n  };\n\n  function RestangularResource(config, $http, url, configurer) {\n    const resource = {};\n    each(keys(configurer), function (key) {\n      const value = configurer[key];\n\n      // Add default parameters\n      value.params = extend({}, value.params, config.defaultRequestParams[value.method.toLowerCase()]);\n      // We don't want the ? if no params are there\n      if (isEmpty(value.params)) {\n        delete value.params;\n      }\n\n      if (config.isSafe(value.method)) {\n\n        resource[key] = function () {\n          const resultConfig = extend(value, {\n            url: url\n          });\n          return $http.createRequest(resultConfig);\n        };\n\n      } else {\n\n        resource[key] = function (data) {\n          const resultConfig = extend(value, {\n            url: url,\n            data: data\n          });\n          return $http.createRequest(resultConfig);\n        };\n\n      }\n    });\n\n    return resource;\n  }\n\n  BaseCreator.prototype.resource = function (current, $http, localHttpConfig, callHeaders, callParams, what, etag, operation) {\n    const params = defaults(callParams || {}, this.config.defaultRequestParams.common);\n    const headers = defaults(callHeaders || {}, this.config.defaultHeaders);\n\n    if (etag) {\n      if (!configuration.isSafe(operation)) {\n        headers['If-Match'] = etag;\n      } else {\n        headers['If-None-Match'] = etag;\n      }\n    }\n\n    let url = this.base(current);\n\n    if (what) {\n      let add = '';\n      if (!/\\/$/.test(url)) {\n        add += '/';\n      }\n      add += what;\n      url += add;\n    }\n\n    if (this.config.suffix &&\n      url.indexOf(this.config.suffix, url.length - this.config.suffix.length) === -1 && !this.config.getUrlFromElem(current)) {\n      url += this.config.suffix;\n    }\n\n    current[this.config.restangularFields.httpConfig] = undefined;\n\n    return RestangularResource(this.config, $http, url, {\n      getList: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'GET',\n          params: params,\n          headers: headers\n        }),\n\n      get: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'GET',\n          params: params,\n          headers: headers\n        }),\n\n      jsonp: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'jsonp',\n          params: params,\n          headers: headers\n        }),\n\n      put: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'PUT',\n          params: params,\n          headers: headers\n        }),\n\n      post: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'POST',\n          params: params,\n          headers: headers\n        }),\n\n      remove: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'DELETE',\n          params: params,\n          headers: headers\n        }),\n\n      head: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'HEAD',\n          params: params,\n          headers: headers\n        }),\n\n      trace: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'TRACE',\n          params: params,\n          headers: headers\n        }),\n\n      options: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'OPTIONS',\n          params: params,\n          headers: headers\n        }),\n\n      patch: this.config.withHttpValues(localHttpConfig,\n        {\n          method: 'PATCH',\n          params: params,\n          headers: headers\n        })\n    });\n  };\n\n  /**\n   * This is the Path URL creator. It uses Path to show Hierarchy in the Rest API.\n   * This means that if you have an Account that then has a set of Buildings, a URL to a building\n   * would be /accounts/123/buildings/456\n   **/\n  const Path = function () {\n  };\n\n  Path.prototype = new BaseCreator();\n\n  Path.prototype.normalizeUrl = function (url) {\n    const parts = /((?:http[s]?:)?\\/\\/)?(.*)?/.exec(url);\n    parts[2] = parts[2].replace(/[\\\\\\/]+/g, '/');\n    return (typeof parts[1] !== 'undefined') ? parts[1] + parts[2] : parts[2];\n  };\n\n  Path.prototype.base = function (current) {\n    const __this = this;\n    return reduce(this.parentsArray(current), function (acum: any, elem: any) {\n      let elemUrl;\n      const elemSelfLink = __this.config.getUrlFromElem(elem);\n      if (elemSelfLink) {\n        if (__this.config.isAbsoluteUrl(elemSelfLink)) {\n          return elemSelfLink;\n        } else {\n          elemUrl = elemSelfLink;\n        }\n      } else {\n        elemUrl = elem[__this.config.restangularFields.route];\n\n        if (elem[__this.config.restangularFields.restangularCollection]) {\n          const ids = elem[__this.config.restangularFields.ids];\n          if (ids) {\n            elemUrl += '/' + ids.join(',');\n          }\n        } else {\n          let elemId: any;\n          if (__this.config.useCannonicalId) {\n            elemId = __this.config.getCannonicalIdFromElem(elem);\n          } else {\n            elemId = __this.config.getIdFromElem(elem);\n          }\n\n          if (configuration.isValidId(elemId) && !elem.singleOne) {\n            elemUrl += '/' + (__this.config.encodeIds ? encodeURIComponent(elemId) : elemId);\n          }\n        }\n      }\n      acum = acum.replace(/\\/$/, '') + '/' + elemUrl;\n      return __this.normalizeUrl(acum);\n\n    }, this.config.baseUrl);\n  };\n\n\n  Path.prototype.fetchUrl = function (current, what) {\n    let baseUrl = this.base(current);\n    if (what) {\n      baseUrl += '/' + what;\n    }\n    return baseUrl;\n  };\n\n  Path.prototype.fetchRequestedUrl = function (current, what) {\n    const url = this.fetchUrl(current, what);\n    const params = current[configuration.restangularFields.reqParams];\n\n    // From here on and until the end of fetchRequestedUrl,\n    // the code has been kindly borrowed from angular.js\n    // The reason for such code bloating is coherence:\n    //   If the user were to use this for cache management, the\n    //   serialization of parameters would need to be identical\n    //   to the one done by angular for cache keys to match.\n    function sortedKeys(obj) {\n      const resultKeys = [];\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          resultKeys.push(key);\n        }\n      }\n      return resultKeys.sort();\n    }\n\n    function forEachSorted(obj, iterator?, context?) {\n      const sortedKeysArray = sortedKeys(obj);\n      for (let i = 0; i < sortedKeysArray.length; i++) {\n        iterator.call(context, obj[sortedKeysArray[i]], sortedKeysArray[i]);\n      }\n      return sortedKeysArray;\n    }\n\n    function encodeUriQuery(val, pctEncodeSpaces?) {\n      return encodeURIComponent(val)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/g, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    }\n\n    if (!params) {\n      return url + (this.config.suffix || '');\n    }\n\n    const parts = [];\n    forEachSorted(params, function (value, key) {\n      if (value === null || value === undefined) {\n        return;\n      }\n      if (!isArray(value)) {\n        value = [value];\n      }\n\n      forEach(value, function (v) {\n        if (isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));\n      });\n    });\n\n    return url + (this.config.suffix || '') + ((url.indexOf('?') === -1) ? '?' : '&') + parts.join('&');\n  };\n\n  configuration.urlCreatorFactory.path = Path;\n}\n","import { Injectable, Inject, Injector, Optional, Type } from '@angular/core';\nimport { assign } from 'core-js/features/object';\nimport {\n  map,\n  bind,\n  union,\n  values,\n  pick,\n  isEmpty,\n  isFunction,\n  isNumber,\n  isUndefined,\n  isArray,\n  isObject,\n  extend,\n  each,\n  every,\n  omit,\n  get,\n  defaults,\n  clone,\n  includes\n} from 'lodash';\n\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { RESTANGULAR } from './ngx-restangular.config';\nimport { RestangularHttp } from './ngx-restangular-http';\nimport { RestangularConfigurer } from './ngx-restangular-config.factory';\n\n@Injectable()\nexport class Restangular {\n  provider: {\n    setBaseUrl: any,\n    setDefaultHeaders: any,\n    configuration: any,\n    setSelfLinkAbsoluteUrl: any,\n    setExtraFields: any,\n    setDefaultHttpFields: any,\n    setPlainByDefault: any,\n    setEncodeIds: any,\n    setDefaultRequestParams: any,\n    requestParams: any,\n    defaultHeaders: any,\n    setDefaultResponseMethod: any,\n    defaultResponseMethod: any,\n    setMethodOverriders: any,\n    setJsonp: any,\n    setUrlCreator: any,\n    setRestangularFields: any,\n    setUseCannonicalId: any,\n    addResponseInterceptor: any,\n    addErrorInterceptor: any,\n    setResponseInterceptor: any,\n    setResponseExtractor: any,\n    setErrorInterceptor: any,\n    addRequestInterceptor: any,\n    setRequestInterceptor: any,\n    setFullRequestInterceptor: any,\n    addFullRequestInterceptor: any,\n    setOnBeforeElemRestangularized: any,\n    setRestangularizePromiseInterceptor: any,\n    setOnElemRestangularized: any,\n    setParentless: any,\n    setRequestSuffix: any,\n    addElementTransformer: any,\n    extendCollection: any,\n    extendModel: any,\n    setTransformOnlyServerElements: any,\n    setFullResponse: any,\n    $get: any\n  };\n  addElementTransformer: any;\n  extendCollection: any;\n  extendModel: any;\n  copy;\n  configuration;\n  service;\n  id;\n  route;\n  parentResource;\n  restangularCollection;\n  cannonicalId;\n  etag;\n  selfLink;\n  get;\n  getList;\n  put;\n  post;\n  remove;\n  head;\n  trace;\n  options;\n  patch;\n  getRestangularUrl;\n  getRequestedUrl;\n  putElement;\n  addRestangularMethod;\n  getParentList;\n  clone;\n  ids;\n  httpConfig;\n  reqParams;\n  one;\n  all;\n  several;\n  oneUrl;\n  allUrl;\n  customPUT;\n  customPATCH;\n  customPOST;\n  customDELETE;\n  customGET;\n  customGETLIST;\n  customOperation;\n  doPUT;\n  doPATCH;\n  doPOST;\n  doDELETE;\n  doGET;\n  doGETLIST;\n  fromServer;\n  withConfig;\n  withHttpConfig;\n  singleOne;\n  plain;\n  save;\n  restangularized;\n  restangularizeElement;\n  restangularizeCollection;\n\n  constructor(\n    @Optional() @Inject(RESTANGULAR) public configObj,\n    private injector: Injector,\n    private http: RestangularHttp\n  ) {\n    this.provider = new providerConfig(http);\n    const element = this.provider.$get();\n    assign(this, element);\n\n    this.setDefaultConfig();\n  }\n\n  setDefaultConfig() {\n    if (!this.configObj || !isFunction(this.configObj.fn)) {\n      return;\n    }\n\n    const arrDI = map(this.configObj.arrServices, (services: Type<any>) => {\n      return this.injector.get(services);\n    });\n\n    this.configObj.fn(...[this.provider, ...arrDI]);\n  }\n}\n\nfunction providerConfig($http) {\n  const globalConfiguration = {};\n\n  RestangularConfigurer(this, globalConfiguration);\n\n  this.$get = $get;\n\n  function $get() {\n\n    function createServiceForConfiguration(config) {\n      const service: any = {};\n\n      const urlHandler = new config.urlCreatorFactory[config.urlCreator]();\n      urlHandler.setConfig(config);\n\n      function restangularizeBase(parent, elem, route, reqParams, fromServer) {\n        elem[config.restangularFields.route] = route;\n        elem[config.restangularFields.getRestangularUrl] = bind(urlHandler.fetchUrl, urlHandler, elem);\n        elem[config.restangularFields.getRequestedUrl] = bind(urlHandler.fetchRequestedUrl, urlHandler, elem);\n        elem[config.restangularFields.addRestangularMethod] = bind(addRestangularMethodFunction, elem);\n        elem[config.restangularFields.clone] = bind(copyRestangularizedElement, elem);\n        elem[config.restangularFields.reqParams] = isEmpty(reqParams) ? null : reqParams;\n        elem[config.restangularFields.withHttpConfig] = bind(withHttpConfig, elem);\n        elem[config.restangularFields.plain] = bind(stripRestangular, elem, elem);\n\n        // Tag element as restangularized\n        elem[config.restangularFields.restangularized] = true;\n\n        // RequestLess connection\n        elem[config.restangularFields.one] = bind(one, elem, elem);\n        elem[config.restangularFields.all] = bind(all, elem, elem);\n        elem[config.restangularFields.several] = bind(several, elem, elem);\n        elem[config.restangularFields.oneUrl] = bind(oneUrl, elem, elem);\n        elem[config.restangularFields.allUrl] = bind(allUrl, elem, elem);\n\n        elem[config.restangularFields.fromServer] = !!fromServer;\n\n        if (parent && config.shouldSaveParent(route)) {\n          const parentId = config.getIdFromElem(parent);\n          const parentUrl = config.getUrlFromElem(parent);\n\n          const restangularFieldsForParent = union(\n            values(pick(config.restangularFields, ['route', 'singleOne', 'parentResource'])),\n            config.extraFields\n          );\n          const parentResource = pick(parent, restangularFieldsForParent);\n\n          if (config.isValidId(parentId)) {\n            config.setIdToElem(parentResource, parentId, route);\n          }\n          if (config.isValidId(parentUrl)) {\n            config.setUrlToElem(parentResource, parentUrl, route);\n          }\n\n          elem[config.restangularFields.parentResource] = parentResource;\n        } else {\n          elem[config.restangularFields.parentResource] = null;\n        }\n        return elem;\n      }\n\n      function one(parent, route, id, singleOne) {\n        let error;\n        if (isNumber(route) || isNumber(parent)) {\n          error = 'You\\'re creating a Restangular entity with the number ';\n          error += 'instead of the route or the parent. For example, you can\\'t call .one(12).';\n          throw new Error(error);\n        }\n        if (isUndefined(route)) {\n          error = 'You\\'re creating a Restangular entity either without the path. ';\n          error += 'For example you can\\'t call .one(). Please check if your arguments are valid.';\n          throw new Error(error);\n        }\n        const elem = {};\n        config.setIdToElem(elem, id, route);\n        config.setFieldToElem(config.restangularFields.singleOne, elem, singleOne);\n        return restangularizeElem(parent, elem, route, false);\n      }\n\n      function all(parent, route) {\n        return restangularizeCollection(parent, [], route, false);\n      }\n\n      function several(parent, route /*, ids */) {\n        const collection = [];\n        collection[config.restangularFields.ids] = Array.prototype.splice.call(arguments, 2);\n        return restangularizeCollection(parent, collection, route, false);\n      }\n\n      function oneUrl(parent, route, url) {\n        if (!route) {\n          throw new Error('Route is mandatory when creating new Restangular objects.');\n        }\n        const elem = {};\n        config.setUrlToElem(elem, url, route);\n        return restangularizeElem(parent, elem, route, false);\n      }\n\n      function allUrl(parent, route, url) {\n        if (!route) {\n          throw new Error('Route is mandatory when creating new Restangular objects.');\n        }\n        const elem = {};\n        config.setUrlToElem(elem, url, route);\n        return restangularizeCollection(parent, elem, route, false);\n      }\n\n      // Promises\n      function restangularizeResponse(subject, isCollection, valueToFill) {\n        return subject.pipe(filter(res => !!res));\n      }\n\n      function resolvePromise(subject, response, data, filledValue) {\n        extend(filledValue, data);\n\n        // Trigger the full response interceptor.\n        if (config.fullResponse) {\n          subject.next(extend(response, {\n            data: data\n          }));\n        } else {\n          subject.next(data);\n        }\n\n        subject.complete();\n      }\n\n      // Elements\n      function stripRestangular(elem) {\n        if (isArray(elem)) {\n          const array = [];\n          each(elem, function (value) {\n            array.push(config.isRestangularized(value) ? stripRestangular(value) : value);\n          });\n          return array;\n        } else {\n          return omit(elem, values(omit(config.restangularFields, 'id')));\n        }\n      }\n\n      function addCustomOperation(elem) {\n        elem[config.restangularFields.customOperation] = bind(customFunction, elem);\n        const requestMethods = {get: customFunction, delete: customFunction};\n        each(['put', 'patch', 'post'], function (name) {\n          requestMethods[name] = function (operation, element, path, params, headers) {\n            return bind(customFunction, this)(operation, path, params, headers, element);\n          };\n        });\n        each(requestMethods, function (requestFunc, name) {\n          const callOperation = name === 'delete' ? 'remove' : name;\n          each(['do', 'custom'], function (alias) {\n            elem[alias + name.toUpperCase()] = bind(requestFunc, elem, callOperation);\n          });\n        });\n        elem[config.restangularFields.customGETLIST] = bind(fetchFunction, elem);\n        elem[config.restangularFields.doGETLIST] = elem[config.restangularFields.customGETLIST];\n      }\n\n      function copyRestangularizedElement(fromElement, toElement = {}) {\n        const copiedElement = assign(toElement, fromElement);\n        return restangularizeElem(copiedElement[config.restangularFields.parentResource],\n          copiedElement, copiedElement[config.restangularFields.route], true);\n      }\n\n      function restangularizeElem(parent, element, route, fromServer?, collection?, reqParams?) {\n        const elem = config.onBeforeElemRestangularized(element, false, route);\n\n        const localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n\n        if (config.useCannonicalId) {\n          localElem[config.restangularFields.cannonicalId] = config.getIdFromElem(localElem);\n        }\n\n        if (collection) {\n          localElem[config.restangularFields.getParentList] = function () {\n            return collection;\n          };\n        }\n\n        localElem[config.restangularFields.restangularCollection] = false;\n        localElem[config.restangularFields.get] = bind(getFunction, localElem);\n        localElem[config.restangularFields.getList] = bind(fetchFunction, localElem);\n        localElem[config.restangularFields.put] = bind(putFunction, localElem);\n        localElem[config.restangularFields.post] = bind(postFunction, localElem);\n        localElem[config.restangularFields.remove] = bind(deleteFunction, localElem);\n        localElem[config.restangularFields.head] = bind(headFunction, localElem);\n        localElem[config.restangularFields.trace] = bind(traceFunction, localElem);\n        localElem[config.restangularFields.options] = bind(optionsFunction, localElem);\n        localElem[config.restangularFields.patch] = bind(patchFunction, localElem);\n        localElem[config.restangularFields.save] = bind(save, localElem);\n\n        addCustomOperation(localElem);\n        return config.transformElem(localElem, false, route, service, true);\n      }\n\n      function restangularizeCollection(parent, element, route, fromServer?, reqParams?) {\n        const elem = config.onBeforeElemRestangularized(element, true, route);\n\n        const localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n        localElem[config.restangularFields.restangularCollection] = true;\n        localElem[config.restangularFields.post] = bind(postFunction, localElem, null);\n        localElem[config.restangularFields.remove] = bind(deleteFunction, localElem);\n        localElem[config.restangularFields.head] = bind(headFunction, localElem);\n        localElem[config.restangularFields.trace] = bind(traceFunction, localElem);\n        localElem[config.restangularFields.putElement] = bind(putElementFunction, localElem);\n        localElem[config.restangularFields.options] = bind(optionsFunction, localElem);\n        localElem[config.restangularFields.patch] = bind(patchFunction, localElem);\n        localElem[config.restangularFields.get] = bind(getById, localElem);\n        localElem[config.restangularFields.getList] = bind(fetchFunction, localElem, null);\n\n        addCustomOperation(localElem);\n        return config.transformElem(localElem, true, route, service, true);\n      }\n\n      function restangularizeCollectionAndElements(parent, element, route) {\n        const collection = restangularizeCollection(parent, element, route, false);\n        each(collection, function (elem) {\n          if (elem) {\n            restangularizeElem(parent, elem, route, false);\n          }\n        });\n        return collection;\n      }\n\n      function getById(id, reqParams, headers) {\n        return this.customGET(id.toString(), reqParams, headers);\n      }\n\n      function putElementFunction(idx, params, headers) {\n        const __this = this;\n        const elemToPut = this[idx];\n        const subject = new BehaviorSubject(null);\n        let filledArray = [];\n        filledArray = config.transformElem(filledArray, true, elemToPut[config.restangularFields.route], service);\n\n        elemToPut.put(params, headers)\n        .subscribe(function (serverElem) {\n          const newArray = copyRestangularizedElement(__this);\n          newArray[idx] = serverElem;\n          filledArray = newArray;\n          subject.next(newArray);\n        }, function (response) {\n          subject.error(response);\n        }, function () {\n          subject.complete();\n        });\n\n        return restangularizeResponse(subject, true, filledArray);\n      }\n\n      function parseResponse(resData, operation, route, fetchUrl, response, subject) {\n        const data = config.responseExtractor(resData, operation, route, fetchUrl, response, subject);\n        const etag = response.headers.get('ETag');\n        if (data && etag) {\n          data[config.restangularFields.etag] = etag;\n        }\n        return data;\n      }\n\n      function fetchFunction(what, reqParams, headers) {\n        const __this = this;\n        const subject = new BehaviorSubject(null);\n        const operation = 'getList';\n        const url = urlHandler.fetchUrl(this, what);\n        const whatFetched = what || __this[config.restangularFields.route];\n\n        const request = config.fullRequestInterceptor(null, operation,\n          whatFetched, url, headers || {}, reqParams || {}, this[config.restangularFields.httpConfig] || {});\n\n        let filledArray = [];\n        filledArray = config.transformElem(filledArray, true, whatFetched, service);\n\n        let method = 'getList';\n\n        if (config.jsonp) {\n          method = 'jsonp';\n        }\n\n        const okCallback = function (response) {\n          const resData = response.body;\n          const fullParams = response.config.params;\n          let data = parseResponse(resData, operation, whatFetched, url, response, subject);\n\n          // support empty response for getList() calls (some APIs respond with 204 and empty body)\n          if (isUndefined(data) || '' === data) {\n            data = [];\n          }\n          if (!isArray(data)) {\n            throw new Error('Response for getList SHOULD be an array and not an object or something else');\n          }\n\n          if (true === config.plainByDefault) {\n            return resolvePromise(subject, response, data, filledArray);\n          }\n\n          let processedData = map(data, function (elem) {\n            if (!__this[config.restangularFields.restangularCollection]) {\n              return restangularizeElem(__this, elem, what, true, data);\n            } else {\n              return restangularizeElem(__this[config.restangularFields.parentResource],\n                elem, __this[config.restangularFields.route], true, data);\n            }\n          });\n\n          processedData = extend(data, processedData);\n\n          if (!__this[config.restangularFields.restangularCollection]) {\n            resolvePromise(\n              subject,\n              response,\n              restangularizeCollection(\n                __this,\n                processedData,\n                what,\n                true,\n                fullParams\n              ),\n              filledArray\n            );\n          } else {\n            resolvePromise(\n              subject,\n              response,\n              restangularizeCollection(\n                __this[config.restangularFields.parentResource],\n                processedData,\n                __this[config.restangularFields.route],\n                true,\n                fullParams\n              ),\n              filledArray\n            );\n          }\n        };\n\n        urlHandler.resource(this, $http, request.httpConfig, request.headers, request.params, what,\n          this[config.restangularFields.etag], operation)[method]()\n        .subscribe(okCallback, function error(response) {\n          if (response.status === 304 && __this[config.restangularFields.restangularCollection]) {\n            resolvePromise(subject, response, __this, filledArray);\n          } else if (every(config.errorInterceptors, function (cb: any) {\n\n            return cb(response, subject, okCallback) !== false;\n          })) {\n            // triggered if no callback returns false\n            subject.error(response);\n          }\n        });\n\n        return restangularizeResponse(subject, true, filledArray);\n      }\n\n      function withHttpConfig(httpConfig) {\n        this[config.restangularFields.httpConfig] = httpConfig;\n        return this;\n      }\n\n      function save(params, headers) {\n        if (this[config.restangularFields.fromServer]) {\n          return this[config.restangularFields.put](params, headers);\n        } else {\n          return bind(elemFunction, this)('post', undefined, params, undefined, headers);\n        }\n      }\n\n      function elemFunction(operation, what, params, obj, headers) {\n        const __this = this;\n        const subject = new BehaviorSubject(null);\n        const resParams = params || {};\n        const route = what || this[config.restangularFields.route];\n        const fetchUrl = urlHandler.fetchUrl(this, what);\n\n        let callObj = obj || this;\n        // fallback to etag on restangular object (since for custom methods we probably don't explicitly specify the etag field)\n        const etag = callObj[config.restangularFields.etag] || (operation !== 'post' ? this[config.restangularFields.etag] : null);\n\n        if (isObject(callObj) && config.isRestangularized(callObj)) {\n          callObj = stripRestangular(callObj);\n        }\n        const request = config.fullRequestInterceptor(\n          callObj,\n          operation,\n          route,\n          fetchUrl,\n          headers || {},\n          resParams || {},\n          this[config.restangularFields.httpConfig] || {}\n        );\n\n        let filledObject = {};\n        filledObject = config.transformElem(filledObject, false, route, service);\n\n        const okCallback = function (response) {\n          const resData = get(response, 'body');\n          const fullParams = get(response, 'config.params');\n\n          const elem = parseResponse(resData, operation, route, fetchUrl, response, subject);\n\n          if (elem) {\n            let data;\n            if (true === config.plainByDefault) {\n              return resolvePromise(subject, response, elem, filledObject);\n            }\n\n            if (operation === 'post' && !__this[config.restangularFields.restangularCollection]) {\n              data = restangularizeElem(\n                __this[config.restangularFields.parentResource],\n                elem,\n                route,\n                true,\n                null,\n                fullParams\n              );\n              resolvePromise(subject, response, data, filledObject);\n            } else {\n              data = restangularizeElem(\n                __this[config.restangularFields.parentResource],\n                elem,\n                __this[config.restangularFields.route],\n                true,\n                null,\n                fullParams\n              );\n\n              data[config.restangularFields.singleOne] = __this[config.restangularFields.singleOne];\n              resolvePromise(subject, response, data, filledObject);\n            }\n\n          } else {\n            resolvePromise(subject, response, undefined, filledObject);\n          }\n        };\n\n        const errorCallback = function (response) {\n          if (response.status === 304 && config.isSafe(operation)) {\n            resolvePromise(subject, response, __this, filledObject);\n          } else if (every(config.errorInterceptors, function (cb: any) {\n            return cb(response, subject, okCallback) !== false;\n          })) {\n            // triggered if no callback returns false\n            subject.error(response);\n          }\n        };\n        // Overriding HTTP Method\n        let callOperation = operation;\n        let callHeaders = extend({}, request.headers);\n        const isOverrideOperation = config.isOverridenMethod(operation);\n        if (isOverrideOperation) {\n          callOperation = 'post';\n          callHeaders = extend(callHeaders, {'X-HTTP-Method-Override': operation === 'remove' ? 'DELETE' : operation.toUpperCase()});\n        } else if (config.jsonp && callOperation === 'get') {\n          callOperation = 'jsonp';\n        }\n\n        if (config.isSafe(operation)) {\n          if (isOverrideOperation) {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n              what, etag, callOperation)[callOperation]({}).subscribe(okCallback, errorCallback);\n          } else {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n              what, etag, callOperation)[callOperation]().subscribe(okCallback, errorCallback);\n          }\n        } else {\n          urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n            what, etag, callOperation)[callOperation](request.element).subscribe(okCallback, errorCallback);\n        }\n\n        return restangularizeResponse(subject, false, filledObject);\n      }\n\n      function getFunction(params, headers) {\n        return bind(elemFunction, this)('get', undefined, params, undefined, headers);\n      }\n\n      function deleteFunction(params, headers) {\n        return bind(elemFunction, this)('remove', undefined, params, undefined, headers);\n      }\n\n      function putFunction(params, headers) {\n        return bind(elemFunction, this)('put', undefined, params, undefined, headers);\n      }\n\n      function postFunction(what, elem, params, headers) {\n        return bind(elemFunction, this)('post', what, params, elem, headers);\n      }\n\n      function headFunction(params, headers) {\n        return bind(elemFunction, this)('head', undefined, params, undefined, headers);\n      }\n\n      function traceFunction(params, headers) {\n        return bind(elemFunction, this)('trace', undefined, params, undefined, headers);\n      }\n\n      function optionsFunction(params, headers) {\n        return bind(elemFunction, this)('options', undefined, params, undefined, headers);\n      }\n\n      function patchFunction(elem, params, headers) {\n        return bind(elemFunction, this)('patch', undefined, params, elem, headers);\n      }\n\n      function customFunction(operation, path, params, headers, elem) {\n        return bind(elemFunction, this)(operation, path, params, elem, headers);\n      }\n\n      function addRestangularMethodFunction(name, operation, path, defaultParams, defaultHeaders, defaultElem) {\n        let bindedFunction;\n        if (operation === 'getList') {\n          bindedFunction = bind(fetchFunction, this, path);\n        } else {\n          bindedFunction = bind(customFunction, this, operation, path);\n        }\n\n        const createdFunction = function (params, headers, elem) {\n          const callParams = defaults({\n            params: params,\n            headers: headers,\n            elem: elem\n          }, {\n            params: defaultParams,\n            headers: defaultHeaders,\n            elem: defaultElem\n          });\n          return bindedFunction(callParams.params, callParams.headers, callParams.elem);\n        };\n\n        if (config.isSafe(operation)) {\n          this[name] = createdFunction;\n        } else {\n          this[name] = function (elem, params, headers) {\n            return createdFunction(params, headers, elem);\n          };\n        }\n      }\n\n      function withConfigurationFunction(configurer) {\n        const newConfig = clone(omit(config, 'configuration'));\n        RestangularConfigurer(newConfig, newConfig);\n        configurer(newConfig);\n        return createServiceForConfiguration(newConfig);\n      }\n\n      function toService(route, parent) {\n        const knownCollectionMethods = values(config.restangularFields);\n        const serv: any = {};\n        const collection = (parent || service).all(route);\n        serv.one = bind(one, (parent || service), parent, route);\n        serv.all = bind(collection.all, collection);\n        serv.post = bind(collection.post, collection);\n        serv.getList = bind(collection.getList, collection);\n        serv.withHttpConfig = bind(collection.withHttpConfig, collection);\n        serv.get = bind(collection.get, collection);\n\n        for (const prop in collection) {\n          if (collection.hasOwnProperty(prop) && isFunction(collection[prop]) && !includes(knownCollectionMethods, prop)) {\n            serv[prop] = bind(collection[prop], collection);\n          }\n        }\n\n        return serv;\n      }\n\n      RestangularConfigurer(service, config);\n\n      service.copy = bind(copyRestangularizedElement, service);\n\n      service.service = bind(toService, service);\n\n      service.withConfig = bind(withConfigurationFunction, service);\n\n      service.one = bind(one, service, null);\n\n      service.all = bind(all, service, null);\n\n      service.several = bind(several, service, null);\n\n      service.oneUrl = bind(oneUrl, service, null);\n\n      service.allUrl = bind(allUrl, service, null);\n\n      service.stripRestangular = bind(stripRestangular, service);\n\n      service.restangularizeElement = bind(restangularizeElem, service);\n\n      service.restangularizeCollection = bind(restangularizeCollectionAndElements, service);\n\n      return service;\n    }\n\n    return createServiceForConfiguration(globalConfiguration);\n  }\n\n}\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf, InjectionToken } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RESTANGULAR, RestangularFactory } from './ngx-restangular.config';\nimport { Restangular } from './ngx-restangular';\nimport { RestangularHttp } from './ngx-restangular-http';\n\nexport const CONFIG_OBJ = new InjectionToken<string>('configObj');\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [RestangularHttp, Restangular]\n})\nexport class RestangularModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: RestangularModule) {\n    if (parentModule) {\n      throw new Error(\n        'RestangularModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static forRoot(configFunction?: (provider: any, ...arg: any[]) => void): ModuleWithProviders<RestangularModule>;\n  static forRoot(providers?: any[], configFunction?: (provider: any, ...arg: any[]) => void): ModuleWithProviders<RestangularModule>;\n  static forRoot(config1?, config2?): ModuleWithProviders<RestangularModule> {\n    return {\n      ngModule: RestangularModule,\n      providers: [\n        {provide: CONFIG_OBJ, useValue: [config1, config2]},\n        {provide: RESTANGULAR, useFactory: RestangularFactory, deps: [CONFIG_OBJ]},\n      ]\n    };\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}