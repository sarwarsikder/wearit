{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/sarwar/wsit/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/home/sarwar/wsit/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _createClass from \"/home/sarwar/wsit/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sarwar/wsit/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sarwar/wsit/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/sarwar/wsit/wearit-backend/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, EventEmitter, Inject, InjectionToken, ChangeDetectorRef, Directive, ElementRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, concat, merge, Observable } from 'rxjs';\nimport { map, share, switchMap, take, toArray } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar TranslateLoader = function TranslateLoader() {\n  _classCallCheck(this, TranslateLoader);\n};\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n\n\nvar TranslateFakeLoader = /*#__PURE__*/function (_TranslateLoader) {\n  _inherits(TranslateFakeLoader, _TranslateLoader);\n\n  var _super = _createSuper(TranslateFakeLoader);\n\n  function TranslateFakeLoader() {\n    _classCallCheck(this, TranslateFakeLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TranslateFakeLoader, [{\n    key: \"getTranslation\",\n    value:\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    function getTranslation(lang) {\n      return of({});\n    }\n  }]);\n\n  return TranslateFakeLoader;\n}(TranslateLoader);\n\nTranslateFakeLoader.ɵfac = function TranslateFakeLoader_Factory(t) {\n  return ɵTranslateFakeLoader_BaseFactory(t || TranslateFakeLoader);\n};\n\nTranslateFakeLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeLoader,\n  factory: TranslateFakeLoader.ɵfac\n});\nvar ɵTranslateFakeLoader_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar MissingTranslationHandler = function MissingTranslationHandler() {\n  _classCallCheck(this, MissingTranslationHandler);\n};\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n\n\nvar FakeMissingTranslationHandler = /*#__PURE__*/function () {\n  function FakeMissingTranslationHandler() {\n    _classCallCheck(this, FakeMissingTranslationHandler);\n  }\n\n  _createClass(FakeMissingTranslationHandler, [{\n    key: \"handle\",\n    value:\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function handle(params) {\n      return params.key;\n    }\n  }]);\n\n  return FakeMissingTranslationHandler;\n}();\n\nFakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n  return new (t || FakeMissingTranslationHandler)();\n};\n\nFakeMissingTranslationHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FakeMissingTranslationHandler,\n  factory: FakeMissingTranslationHandler.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar TranslateCompiler = function TranslateCompiler() {\n  _classCallCheck(this, TranslateCompiler);\n};\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n\n\nvar TranslateFakeCompiler = /*#__PURE__*/function (_TranslateCompiler) {\n  _inherits(TranslateFakeCompiler, _TranslateCompiler);\n\n  var _super2 = _createSuper(TranslateFakeCompiler);\n\n  function TranslateFakeCompiler() {\n    _classCallCheck(this, TranslateFakeCompiler);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(TranslateFakeCompiler, [{\n    key: \"compile\",\n    value:\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    function compile(value, lang) {\n      return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"compileTranslations\",\n    value: function compileTranslations(translations, lang) {\n      return translations;\n    }\n  }]);\n\n  return TranslateFakeCompiler;\n}(TranslateCompiler);\n\nTranslateFakeCompiler.ɵfac = function TranslateFakeCompiler_Factory(t) {\n  return ɵTranslateFakeCompiler_BaseFactory(t || TranslateFakeCompiler);\n};\n\nTranslateFakeCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeCompiler,\n  factory: TranslateFakeCompiler.ɵfac\n});\nvar ɵTranslateFakeCompiler_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\n\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n\n  var\n  /** @type {?} */\n  t1 = typeof o1,\n\n  /** @type {?} */\n  t2 = typeof o2,\n\n  /** @type {?} */\n  length,\n\n  /** @type {?} */\n  key,\n\n  /** @type {?} */\n  keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\n\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\n\n\nfunction mergeDeep(target, source) {\n  var\n  /** @type {?} */\n  output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(function (key) {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, _defineProperty({}, key, source[key]));\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n\n  return output;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar TranslateParser = function TranslateParser() {\n  _classCallCheck(this, TranslateParser);\n};\n\nvar TranslateDefaultParser = /*#__PURE__*/function (_TranslateParser) {\n  _inherits(TranslateDefaultParser, _TranslateParser);\n\n  var _super3 = _createSuper(TranslateDefaultParser);\n\n  function TranslateDefaultParser() {\n    var _this;\n\n    _classCallCheck(this, TranslateDefaultParser);\n\n    _this = _super3.apply(this, arguments);\n    _this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    return _this;\n  }\n  /**\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  _createClass(TranslateDefaultParser, [{\n    key: \"interpolate\",\n    value: function interpolate(expr, params) {\n      var\n      /** @type {?} */\n      result;\n\n      if (typeof expr === 'string') {\n        result = this.interpolateString(expr, params);\n      } else if (typeof expr === 'function') {\n        result = this.interpolateFunction(expr, params);\n      } else {\n        // this should not happen, but an unrelated TranslateService test depends on it\n        result =\n        /** @type {?} */\n        expr;\n      }\n\n      return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue(target, key) {\n      var\n      /** @type {?} */\n      keys = key.split('.');\n      key = '';\n\n      do {\n        key += keys.shift();\n\n        if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n          target = target[key];\n          key = '';\n        } else if (!keys.length) {\n          target = undefined;\n        } else {\n          key += '.';\n        }\n      } while (keys.length);\n\n      return target;\n    }\n    /**\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"interpolateFunction\",\n    value: function interpolateFunction(fn, params) {\n      return fn(params);\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"interpolateString\",\n    value: function interpolateString(expr, params) {\n      var _this2 = this;\n\n      if (!params) {\n        return expr;\n      }\n\n      return expr.replace(this.templateMatcher, function (substring, b) {\n        var\n        /** @type {?} */\n        r = _this2.getValue(params, b);\n\n        return isDefined(r) ? r : substring;\n      });\n    }\n  }]);\n\n  return TranslateDefaultParser;\n}(TranslateParser);\n\nTranslateDefaultParser.ɵfac = function TranslateDefaultParser_Factory(t) {\n  return ɵTranslateDefaultParser_BaseFactory(t || TranslateDefaultParser);\n};\n\nTranslateDefaultParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateDefaultParser,\n  factory: TranslateDefaultParser.ɵfac\n});\nvar ɵTranslateDefaultParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateDefaultParser, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslateStore = function TranslateStore() {\n  _classCallCheck(this, TranslateStore);\n\n  /**\n   * The lang currently used\n   */\n  this.currentLang = this.defaultLang;\n  /**\n   * a list of translations per lang\n   */\n\n  this.translations = {};\n  /**\n   * an array of langs\n   */\n\n  this.langs = [];\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onTranslationChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onLangChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onDefaultLangChange = new EventEmitter();\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nUSE_STORE = new InjectionToken('USE_STORE');\nvar\n/** @type {?} */\nUSE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n\nvar TranslateService = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {?} store an instance of the store (that is supposed to be unique)\n   * @param {?} currentLoader An instance of the loader currently used\n   * @param {?} compiler An instance of the compiler currently used\n   * @param {?} parser An instance of the parser currently used\n   * @param {?} missingTranslationHandler A handler for missing translations.\n   * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param {?=} isolate whether this service should use the store or not\n   */\n  function TranslateService(store, currentLoader, compiler, parser, missingTranslationHandler) {\n    var useDefaultLang = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    var isolate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n    _classCallCheck(this, TranslateService);\n\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n  }\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n\n\n  _createClass(TranslateService, [{\n    key: \"onTranslationChange\",\n    get: function get() {\n      return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n  }, {\n    key: \"onLangChange\",\n    get: function get() {\n      return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDefaultLangChange\",\n    get: function get() {\n      return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"defaultLang\",\n    get: function get() {\n      return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n    ,\n    set: function set(defaultLang) {\n      if (this.isolate) {\n        this._defaultLang = defaultLang;\n      } else {\n        this.store.defaultLang = defaultLang;\n      }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n\n  }, {\n    key: \"currentLang\",\n    get: function get() {\n      return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n    ,\n    set: function set(currentLang) {\n      if (this.isolate) {\n        this._currentLang = currentLang;\n      } else {\n        this.store.currentLang = currentLang;\n      }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"langs\",\n    get: function get() {\n      return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n    ,\n    set: function set(langs) {\n      if (this.isolate) {\n        this._langs = langs;\n      } else {\n        this.store.langs = langs;\n      }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"translations\",\n    get: function get() {\n      return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n    ,\n    set: function set(translations) {\n      if (this.isolate) {\n        this._translations = translations;\n      } else {\n        this.store.translations = translations;\n      }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDefaultLang\",\n    value: function setDefaultLang(lang) {\n      var _this3 = this;\n\n      if (lang === this.defaultLang) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the defaultLang immediately\n        if (!this.defaultLang) {\n          this.defaultLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(function (res) {\n          _this3.changeDefaultLang(lang);\n        });\n      } else {\n        // we already have this language\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDefaultLang\",\n    value: function getDefaultLang() {\n      return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(lang) {\n      var _this4 = this;\n\n      // don't change the language if the language given is already selected\n      if (lang === this.currentLang) {\n        return of(this.translations[lang]);\n      }\n\n      var\n      /** @type {?} */\n      pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n          this.currentLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(function (res) {\n          _this4.changeLang(lang);\n        });\n        return pending;\n      } else {\n        // we have this language, return an Observable\n        this.changeLang(lang);\n        return of(this.translations[lang]);\n      }\n    }\n    /**\n     * Retrieves the given translations\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveTranslations\",\n    value: function retrieveTranslations(lang) {\n      var\n      /** @type {?} */\n      pending; // if this language is unavailable, ask for it\n\n      if (typeof this.translations[lang] === \"undefined\") {\n        this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n        pending = this._translationRequests[lang];\n      }\n\n      return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation(lang) {\n      var _this5 = this;\n\n      this.pending = true;\n      this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n      this.loadingTranslations.pipe(take(1)).subscribe(function (res) {\n        _this5.translations[lang] = _this5.compiler.compileTranslations(res, lang);\n\n        _this5.updateLangs();\n\n        _this5.pending = false;\n      }, function (err) {\n        _this5.pending = false;\n      });\n      return this.loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n\n  }, {\n    key: \"setTranslation\",\n    value: function setTranslation(lang, translations) {\n      var shouldMerge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      translations = this.compiler.compileTranslations(translations, lang);\n\n      if (shouldMerge && this.translations[lang]) {\n        this.translations[lang] = mergeDeep(this.translations[lang], translations);\n      } else {\n        this.translations[lang] = translations;\n      }\n\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLangs\",\n    value: function getLangs() {\n      return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"addLangs\",\n    value: function addLangs(langs) {\n      var _this6 = this;\n\n      langs.forEach(function (lang) {\n        if (_this6.langs.indexOf(lang) === -1) {\n          _this6.langs.push(lang);\n        }\n      });\n    }\n    /**\n     * Update the list of available langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateLangs\",\n    value: function updateLangs() {\n      this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"getParsedResult\",\n    value: function getParsedResult(translations, key, interpolateParams) {\n      var\n      /** @type {?} */\n      res;\n\n      if (key instanceof Array) {\n        var\n        /** @type {?} */\n        result = {},\n\n        /** @type {?} */\n        observables = false;\n\n        var _iterator = _createForOfIteratorHelper(key),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _k = _step.value;\n            result[_k] = this.getParsedResult(translations, _k, interpolateParams);\n\n            if (typeof result[_k].subscribe === \"function\") {\n              observables = true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (observables) {\n          var\n          /** @type {?} */\n          mergedObs;\n\n          var _iterator2 = _createForOfIteratorHelper(key),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var k = _step2.value;\n              var\n              /** @type {?} */\n              obs = typeof result[k].subscribe === \"function\" ? result[k] : of(\n              /** @type {?} */\n              result[k]);\n\n              if (typeof mergedObs === \"undefined\") {\n                mergedObs = obs;\n              } else {\n                mergedObs = merge(mergedObs, obs);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          return mergedObs.pipe(toArray(), map(function (arr) {\n            var\n            /** @type {?} */\n            obj = {};\n            arr.forEach(function (value, index) {\n              obj[key[index]] = value;\n            });\n            return obj;\n          }));\n        }\n\n        return result;\n      }\n\n      if (translations) {\n        res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n        res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\") {\n        var\n        /** @type {?} */\n        params = {\n          key: key,\n          translateService: this\n        };\n\n        if (typeof interpolateParams !== 'undefined') {\n          params.interpolateParams = interpolateParams;\n        }\n\n        res = this.missingTranslationHandler.handle(params);\n      }\n\n      return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key, interpolateParams) {\n      var _this7 = this;\n\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      } // check if we are loading a new translation to use\n\n\n      if (this.pending) {\n        return Observable.create(function (observer) {\n          var\n          /** @type {?} */\n          onComplete = function onComplete(res) {\n            observer.next(res);\n            observer.complete();\n          };\n\n          var\n          /** @type {?} */\n          onError = function onError(err) {\n            observer.error(err);\n          };\n\n          _this7.loadingTranslations.subscribe(function (res) {\n            res = _this7.getParsedResult(_this7.compiler.compileTranslations(res, _this7.currentLang), key, interpolateParams);\n\n            if (typeof res.subscribe === \"function\") {\n              res.subscribe(onComplete, onError);\n            } else {\n              onComplete(res);\n            }\n          }, onError);\n        });\n      } else {\n        var\n        /** @type {?} */\n        res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n        if (typeof res.subscribe === \"function\") {\n          return res;\n        } else {\n          return of(res);\n        }\n      }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream(key, interpolateParams) {\n      var _this8 = this;\n\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      }\n\n      return concat(this.get(key, interpolateParams), this.onLangChange.pipe(switchMap(function (event) {\n        var\n        /** @type {?} */\n        res = _this8.getParsedResult(event.translations, key, interpolateParams);\n\n        if (typeof res.subscribe === \"function\") {\n          return res;\n        } else {\n          return of(res);\n        }\n      })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"instant\",\n    value: function instant(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      }\n\n      var\n      /** @type {?} */\n      res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n      if (typeof res.subscribe !== \"undefined\") {\n        if (key instanceof Array) {\n          var\n          /** @type {?} */\n          obj = {};\n          key.forEach(function (value, index) {\n            obj[key[index]] = key[index];\n          });\n          return obj;\n        }\n\n        return key;\n      } else {\n        return res;\n      }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.currentLang;\n      this.translations[lang][key] = this.compiler.compile(value, lang);\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Changes the current lang\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeLang\",\n    value: function changeLang(lang) {\n      this.currentLang = lang;\n      this.onLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      }); // if there is no default lang, use the one that we just set\n\n      if (!this.defaultLang) {\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Changes the default lang\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeDefaultLang\",\n    value: function changeDefaultLang(lang) {\n      this.defaultLang = lang;\n      this.onDefaultLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"reloadLang\",\n    value: function reloadLang(lang) {\n      this.resetLang(lang);\n      return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"resetLang\",\n    value: function resetLang(lang) {\n      this._translationRequests[lang] = undefined;\n      this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBrowserLang\",\n    value: function getBrowserLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n\n      var\n      /** @type {?} */\n      browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n      if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n      }\n\n      if (browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n      }\n\n      return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBrowserCultureLang\",\n    value: function getBrowserCultureLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n\n      var\n      /** @type {?} */\n      browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n      return browserCultureLang;\n    }\n  }]);\n\n  return TranslateService;\n}();\n\nTranslateService.ɵfac = function TranslateService_Factory(t) {\n  return new (t || TranslateService)(ɵngcc0.ɵɵinject(TranslateStore), ɵngcc0.ɵɵinject(TranslateLoader), ɵngcc0.ɵɵinject(TranslateCompiler), ɵngcc0.ɵɵinject(TranslateParser), ɵngcc0.ɵɵinject(MissingTranslationHandler), ɵngcc0.ɵɵinject(USE_DEFAULT_LANG), ɵngcc0.ɵɵinject(USE_STORE));\n};\n\nTranslateService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateService,\n  factory: TranslateService.ɵfac\n});\n/** @nocollapse */\n\nTranslateService.ctorParameters = function () {\n  return [{\n    type: TranslateStore\n  }, {\n    type: TranslateLoader\n  }, {\n    type: TranslateCompiler\n  }, {\n    type: TranslateParser\n  }, {\n    type: MissingTranslationHandler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_DEFAULT_LANG]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_STORE]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TranslateStore\n    }, {\n      type: TranslateLoader\n    }, {\n      type: TranslateCompiler\n    }, {\n      type: TranslateParser\n    }, {\n      type: MissingTranslationHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_DEFAULT_LANG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_STORE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslateDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} translateService\n   * @param {?} element\n   * @param {?} _ref\n   */\n  function TranslateDirective(translateService, element, _ref) {\n    var _this9 = this;\n\n    _classCallCheck(this, TranslateDirective);\n\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(function (event) {\n        if (event.lang === _this9.translateService.currentLang) {\n          _this9.checkNodes(true, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(function (event) {\n        _this9.checkNodes(true, event.translations);\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(function (event) {\n        _this9.checkNodes(true);\n      });\n    }\n  }\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  _createClass(TranslateDirective, [{\n    key: \"translate\",\n    set: function set(key) {\n      if (key) {\n        this.key = key;\n        this.checkNodes();\n      }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"translateParams\",\n    set: function set(params) {\n      if (!equals(this.currentParams, params)) {\n        this.currentParams = params;\n        this.checkNodes(true);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n\n  }, {\n    key: \"checkNodes\",\n    value: function checkNodes() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var translations = arguments.length > 1 ? arguments[1] : undefined;\n      var\n      /** @type {?} */\n      nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n      if (!nodes.length) {\n        // we add the key as content\n        this.setContent(this.element.nativeElement, this.key);\n        nodes = this.element.nativeElement.childNodes;\n      }\n\n      for (var\n      /** @type {?} */\n      i = 0; i < nodes.length; ++i) {\n        var\n        /** @type {?} */\n        node = nodes[i];\n\n        if (node.nodeType === 3) {\n          // node type 3 is a text node\n          var\n          /** @type {?} */\n          key = void 0;\n\n          if (this.key) {\n            key = this.key;\n\n            if (forceUpdate) {\n              node.lastKey = null;\n            }\n          } else {\n            var\n            /** @type {?} */\n            content = this.getContent(node);\n            var\n            /** @type {?} */\n            trimmedContent = content.trim();\n\n            if (trimmedContent.length) {\n              // we want to use the content as a key, not the translation value\n              if (content !== node.currentValue) {\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = this.getContent(node);\n              } else if (node.originalContent && forceUpdate) {\n                // the content seems ok, but the lang has changed\n                node.lastKey = null; // the current content is the translation, not the key, use the last real content as key\n\n                key = node.originalContent.trim();\n              }\n            }\n          }\n\n          this.updateValue(key, node, translations);\n        }\n      }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(key, node, translations) {\n      var _this10 = this;\n\n      if (key) {\n        if (node.lastKey === key && this.lastParams === this.currentParams) {\n          return;\n        }\n\n        this.lastParams = this.currentParams;\n\n        var\n        /** @type {?} */\n        onTranslation = function onTranslation(res) {\n          if (res !== key) {\n            node.lastKey = key;\n          }\n\n          if (!node.originalContent) {\n            node.originalContent = _this10.getContent(node);\n          }\n\n          node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n          _this10.setContent(node, _this10.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n          _this10._ref.markForCheck();\n        };\n\n        if (isDefined(translations)) {\n          var\n          /** @type {?} */\n          res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onTranslation);\n          } else {\n            onTranslation(res);\n          }\n        } else {\n          this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n        }\n      }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent(node) {\n      return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(node, content) {\n      if (isDefined(node.textContent)) {\n        node.textContent = content;\n      } else {\n        node.data = content;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.onLangChangeSub) {\n        this.onLangChangeSub.unsubscribe();\n      }\n\n      if (this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub.unsubscribe();\n      }\n\n      if (this.onTranslationChangeSub) {\n        this.onTranslationChangeSub.unsubscribe();\n      }\n    }\n  }]);\n\n  return TranslateDirective;\n}();\n\nTranslateDirective.ɵfac = function TranslateDirective_Factory(t) {\n  return new (t || TranslateDirective)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTranslateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TranslateDirective,\n  selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n  inputs: {\n    translate: \"translate\",\n    translateParams: \"translateParams\"\n  }\n});\n/** @nocollapse */\n\nTranslateDirective.ctorParameters = function () {\n  return [{\n    type: TranslateService\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTranslateDirective.propDecorators = {\n  \"translate\": [{\n    type: Input\n  }],\n  \"translateParams\": [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[translate],[ngx-translate]'\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslatePipe = /*#__PURE__*/function () {\n  /**\n   * @param {?} translate\n   * @param {?} _ref\n   */\n  function TranslatePipe(translate, _ref) {\n    _classCallCheck(this, TranslatePipe);\n\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n  }\n  /**\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @param {?=} translations\n   * @return {?}\n   */\n\n\n  _createClass(TranslatePipe, [{\n    key: \"updateValue\",\n    value: function updateValue(key, interpolateParams, translations) {\n      var _this11 = this;\n\n      var\n      /** @type {?} */\n      onTranslation = function onTranslation(res) {\n        _this11.value = res !== undefined ? res : key;\n        _this11.lastKey = key;\n\n        _this11._ref.markForCheck();\n      };\n\n      if (translations) {\n        var\n        /** @type {?} */\n        res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n        if (typeof res.subscribe === 'function') {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      }\n\n      this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n\n  }, {\n    key: \"transform\",\n    value: function transform(query) {\n      var _this12 = this;\n\n      if (!query || query.length === 0) {\n        return query;\n      } // if we ask another time for the same key, return the last value\n\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n        return this.value;\n      }\n\n      var\n      /** @type {?} */\n      interpolateParams;\n\n      if (isDefined(args[0]) && args.length) {\n        if (typeof args[0] === 'string' && args[0].length) {\n          // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n          // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n          var\n          /** @type {?} */\n          validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n          try {\n            interpolateParams = JSON.parse(validArgs);\n          } catch (\n          /** @type {?} */\n          e) {\n            throw new SyntaxError(\"Wrong parameter in TranslatePipe. Expected a valid Object, received: \".concat(args[0]));\n          }\n        } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n          interpolateParams = args[0];\n        }\n      } // store the query, in case it changes\n\n\n      this.lastKey = query; // store the params, in case they change\n\n      this.lastParams = args; // set the value\n\n      this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n      this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n      if (!this.onTranslationChange) {\n        this.onTranslationChange = this.translate.onTranslationChange.subscribe(function (event) {\n          if (_this12.lastKey && event.lang === _this12.translate.currentLang) {\n            _this12.lastKey = null;\n\n            _this12.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onLangChange event, in case the language changes\n\n\n      if (!this.onLangChange) {\n        this.onLangChange = this.translate.onLangChange.subscribe(function (event) {\n          if (_this12.lastKey) {\n            _this12.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            _this12.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n      if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(function () {\n          if (_this12.lastKey) {\n            _this12.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            _this12.updateValue(query, interpolateParams);\n          }\n        });\n      }\n\n      return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n      }\n\n      if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n      }\n\n      if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._dispose();\n    }\n  }]);\n\n  return TranslatePipe;\n}();\n\nTranslatePipe.ɵfac = function TranslatePipe_Factory(t) {\n  return new (t || TranslatePipe)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵinjectPipeChangeDetectorRef());\n};\n\nTranslatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: TranslatePipe,\n  pure: false\n});\nTranslatePipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslatePipe,\n  factory: TranslatePipe.ɵfac\n});\n/** @nocollapse */\n\nTranslatePipe.ctorParameters = function () {\n  return [{\n    type: TranslateService\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslatePipe, [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      pure: false // required to update the value when the promise is resolved\n\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TranslateModule = /*#__PURE__*/function () {\n  function TranslateModule() {\n    _classCallCheck(this, TranslateModule);\n  }\n\n  _createClass(TranslateModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    function forRoot() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, TranslateStore, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, TranslateService]\n      };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, TranslateService]\n      };\n    }\n  }]);\n\n  return TranslateModule;\n}();\n\nTranslateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TranslateModule\n});\nTranslateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TranslateModule_Factory(t) {\n    return new (t || TranslateModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TranslateModule, {\n    declarations: [TranslatePipe, TranslateDirective],\n    exports: [TranslatePipe, TranslateDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { TranslateModule, TranslateLoader, TranslateFakeLoader, USE_STORE, USE_DEFAULT_LANG, TranslateService, MissingTranslationHandler, FakeMissingTranslationHandler, TranslateParser, TranslateDefaultParser, TranslateCompiler, TranslateFakeCompiler, TranslateDirective, TranslatePipe, TranslateStore };","map":{"version":3,"sources":["@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.loader.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/missing-translation-handler.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.compiler.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/util.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.parser.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.store.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.service.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.directive.ts","@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.pipe.ts","@ngx-translate/core/projects/ngx-translate/core/src/public_api.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\n\nexport abstract class TranslateLoader {\n  abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return of({});\n  }\n}\n","import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n  abstract compile(value: string, lang: string): string | Function;\n\n  abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value: string, lang: string): string | Function {\n    return value;\n  }\n\n  compileTranslations(translations: any, lang: string): any {\n    return translations;\n  }\n}\n","/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key: any) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {[key]: source[key]});\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {[key]: source[key]});\n      }\n    });\n  }\n  return output;\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = key.split('.');\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  public defaultLang: string;\n\n  /**\n   * The lang currently used\n   */\n  public currentLang: string = this.defaultLang;\n\n  /**\n   * a list of translations per lang\n   */\n  public translations: any = {};\n\n  /**\n   * an array of langs\n   */\n  public langs: Array<string> = [];\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, merge, Observable, Observer, of} from \"rxjs\";\nimport {map, share, switchMap, take, toArray} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false) {\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable, ask for it\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n    this.loadingTranslations.pipe(take(1))\n      .subscribe((res: Object) => {\n        this.translations[lang] = this.compiler.compileTranslations(res, lang);\n        this.updateLangs();\n        this.pending = false;\n      }, (err: any) => {\n        this.pending = false;\n      });\n\n    return this.loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n      if (observables) {\n        let mergedObs: Observable<string>;\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = merge(mergedObs, obs);\n          }\n        }\n        return mergedObs.pipe(\n          toArray(),\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return Observable.create((observer: Observer<string>) => {\n        let onComplete = (res: string) => {\n          observer.next(res);\n          observer.complete();\n        };\n        let onError = (err: any) => {\n          observer.error(err);\n        };\n        this.loadingTranslations.subscribe((res: any) => {\n          res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of(res);\n      }\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      this.get(key, interpolateParams),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n","import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Directive({\n  selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n  key: string;\n  lastParams: any;\n  currentParams: any;\n  onLangChangeSub: Subscription;\n  onDefaultLangChangeSub: Subscription;\n  onTranslationChangeSub: Subscription;\n\n  @Input() set translate(key: string) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  @Input() set translateParams(params: any) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations?: any) {\n    let nodes: NodeList = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node: any = nodes[i];\n      if (node.nodeType === 3) { // node type 3 is a text node\n        let key: string;\n        if (this.key) {\n          key = this.key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = this.getContent(node);\n            } else if (node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n              node.lastKey = null;\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key: string, node: any, translations: any) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = (res: string) => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (typeof res.subscribe === \"function\") {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node: any): string {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node: any, content: string): void {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n","import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  value: string = '';\n  lastKey: string;\n  lastParams: any[];\n  onTranslationChange: EventEmitter<TranslationChangeEvent>;\n  onLangChange: EventEmitter<LangChangeEvent>;\n  onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n  }\n\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    let onTranslation = (res: string) => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query: string, ...args: any[]): any {\n    if (!query || query.length === 0) {\n      return query;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams: Object;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs: string = args[0]\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n\n    // store the query, in case it changes\n    this.lastKey = query;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(query, interpolateParams);\n\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n\n  /**\n   * Clean any existing subscription to change events\n   */\n  private _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._dispose();\n  }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\nimport {TranslateService} from \"./lib/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\nimport {TranslateDirective} from \"./lib/translate.directive\";\nimport {TranslatePipe} from \"./lib/translate.pipe\";\nimport {TranslateStore} from \"./lib/translate.store\";\nimport {USE_STORE} from \"./lib/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./lib/translate.service\";\n\nexport * from \"./lib/translate.loader\";\nexport * from \"./lib/translate.service\";\nexport * from \"./lib/missing-translation-handler\";\nexport * from \"./lib/translate.parser\";\nexport * from \"./lib/translate.compiler\";\nexport * from \"./lib/translate.directive\";\nexport * from \"./lib/translate.pipe\";\nexport * from \"./lib/translate.store\";\n\nexport interface TranslateModuleConfig {\n  loader?: Provider;\n  compiler?: Provider;\n  parser?: Provider;\n  missingTranslationHandler?: Provider;\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n  isolate?: boolean;\n  useDefaultLang?: boolean;\n}\n\n@NgModule({\n  declarations: [\n    TranslatePipe,\n    TranslateDirective\n  ],\n  exports: [\n    TranslatePipe,\n    TranslateDirective\n  ]\n})\nexport class TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        TranslateStore,\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}