/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS } from '../interfaces/ngx-stripe.interface';
import { WindowRef } from './window-ref.service';
import { LazyStripeAPILoader } from './api-loader.service';
import { StripeInstance } from './stripe-instance.class';
export class StripeService {
    /**
     * @param {?} key
     * @param {?} options
     * @param {?} loader
     * @param {?} window
     */
    constructor(key, options, loader, window) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        if (key) {
            this.stripe = new StripeInstance(this.loader, this.window, key, options);
        }
    }
    /**
     * @return {?}
     */
    getStripeReference() {
        return this.loader.asStream().pipe(filter((/**
         * @param {?} status
         * @return {?}
         */
        (status) => status.loaded === true)), map((/**
         * @return {?}
         */
        () => ((/** @type {?} */ (this.window.getNativeWindow()))).Stripe)));
    }
    /**
     * @return {?}
     */
    getInstance() {
        return this.stripe.getInstance();
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    setKey(key, options) {
        return this.changeKey(key, options);
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    changeKey(key, options) {
        this.stripe = new StripeInstance(this.loader, this.window, key, options);
        return this.stripe;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    elements(options) {
        return this.stripe.elements(options);
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    redirectToCheckout(options) {
        return this.stripe.redirectToCheckout(options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitPayment(clientSecret, data) {
        return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmBancontactPayment(clientSecret, data, options) {
        return this.stripe.confirmBancontactPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardPayment(clientSecret, data, options) {
        return this.stripe.confirmCardPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmEpsPayment(clientSecret, data, options) {
        return this.stripe.confirmEpsPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmFpxPayment(clientSecret, data, options) {
        return this.stripe.confirmFpxPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmGiropayPayment(clientSecret, data, options) {
        return this.stripe.confirmGiropayPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmIdealPayment(clientSecret, data, options) {
        return this.stripe.confirmIdealPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmP24Payment(clientSecret, data, options) {
        return this.stripe.confirmP24Payment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitPayment(clientSecret, data) {
        return this.stripe.confirmSepaDebitPayment(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    handleCardAction(clientSecret) {
        return this.stripe.handleCardAction(clientSecret);
    }
    /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    createPaymentMethod(paymentMethodData) {
        return this.stripe.createPaymentMethod(paymentMethodData);
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrievePaymentIntent(clientSecret) {
        return this.stripe.retrievePaymentIntent(clientSecret);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitSetup(clientSecret, data) {
        return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardSetup(clientSecret, data, options) {
        return this.stripe.confirmCardSetup(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitSetup(clientSecret, data) {
        return this.stripe.confirmSepaDebitSetup(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrieveSetupIntent(clientSecret) {
        return this.stripe.retrieveSetupIntent(clientSecret);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    paymentRequest(options) {
        return this.stripe.paymentRequest(options);
    }
    /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    createToken(tokenType, data) {
        return this.stripe.createToken(tokenType, data);
    }
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    createSource(a, b) {
        return this.stripe.createSource(a, b);
    }
    /**
     * @param {?} source
     * @return {?}
     */
    retrieveSource(source) {
        return this.stripe.retrieveSource(source);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardPayment(clientSecret, element, data) {
        return this.stripe.handleCardPayment(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmPaymentIntent(clientSecret, element, data) {
        return this.stripe.confirmPaymentIntent(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardSetup(clientSecret, element, data) {
        return this.stripe.handleCardSetup(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmSetupIntent(clientSecret, element, data) {
        return this.stripe.confirmSetupIntent(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleFpxPayment(clientSecret, element, data) {
        return this.stripe.handleFpxPayment(clientSecret, element, data);
    }
}
StripeService.decorators = [
    { type: Injectable }
];
StripeService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef }
];
if (false) {
    /** @type {?} */
    StripeService.prototype.stripe;
    /** @type {?} */
    StripeService.prototype.key;
    /** @type {?} */
    StripeService.prototype.options;
    /** @type {?} */
    StripeService.prototype.loader;
    /** @type {?} */
    StripeService.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,