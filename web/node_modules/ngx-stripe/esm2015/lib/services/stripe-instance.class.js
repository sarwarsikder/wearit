/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-instance.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject, from } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
export class StripeInstance {
    /**
     * @param {?} loader
     * @param {?} window
     * @param {?} key
     * @param {?=} options
     */
    constructor(loader, window, key, options) {
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.stripe = this.stripe$
            .asObservable()
            .pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => Boolean(stripe))));
        this.loader
            .asStream()
            .pipe(filter((/**
         * @param {?} status
         * @return {?}
         */
        (status) => status.loaded === true)), first(), map((/**
         * @return {?}
         */
        () => ((/** @type {?} */ (this.window.getNativeWindow()))).Stripe)))
            .subscribe((/**
         * @param {?} stripeInstance
         * @return {?}
         */
        (stripeInstance) => {
            /** @type {?} */
            const stripe = this.options
                ? ((/** @type {?} */ (stripeInstance(this.key, this.options))))
                : ((/** @type {?} */ (stripeInstance(this.key))));
            this.stripe$.next(stripe);
        }));
    }
    /**
     * @return {?}
     */
    getInstance() {
        return this.stripe$.getValue();
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    elements(options) {
        return this.stripe$.asObservable().pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => Boolean(stripe))), map((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => stripe.elements(options))), first());
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    redirectToCheckout(options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.redirectToCheckout(options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmAuBecsDebitPayment(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmBancontactPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmBancontactPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmCardPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmEpsPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmEpsPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmFpxPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmFpxPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmGiropayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmGiropayPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmIdealPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmIdealPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmP24Payment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmP24Payment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmSepaDebitPayment(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    handleCardAction(clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.handleCardAction(clientSecret)))), first());
    }
    /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    createPaymentMethod(paymentMethodData) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.createPaymentMethod(paymentMethodData)))), first());
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrievePaymentIntent(clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.retrievePaymentIntent(clientSecret)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmAuBecsDebitSetup(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardSetup(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmCardSetup(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmSepaDebitSetup(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrieveSetupIntent(clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmSepaDebitSetup(clientSecret)))), first());
    }
    /**
     * @param {?} options
     * @return {?}
     */
    paymentRequest(options) {
        /** @type {?} */
        const stripe = this.getInstance();
        return stripe ? stripe.paymentRequest(options) : undefined;
    }
    /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    createToken(tokenType, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.createToken(tokenType, data)))), first());
    }
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    createSource(a, b) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.createSource(a, b)))), first());
    }
    /**
     * @param {?} source
     * @return {?}
     */
    retrieveSource(source) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.retrieveSource(source)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardPayment(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).handleCardPayment(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmPaymentIntent(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).confirmPaymentIntent(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardSetup(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).handleCardSetup(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmSetupIntent(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).confirmSetupIntent(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleFpxPayment(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).handleFpxPayment(clientSecret, element, data)))), first());
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.stripe$;
    /** @type {?} */
    StripeInstance.prototype.stripe;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.window;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.key;
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,