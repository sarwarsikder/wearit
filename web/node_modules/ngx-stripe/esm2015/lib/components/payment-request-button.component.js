/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/payment-request-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, EventEmitter, Output } from '@angular/core';
import { from } from 'rxjs';
import { StripeInstance } from '../services/stripe-instance.class';
import { StripeElementsService } from '../services/stripe-elements.service';
export class StripePaymentRequestButtonComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.token = new EventEmitter();
        this.paymentMethod = new EventEmitter();
        this.source = new EventEmitter();
        this.cancel = new EventEmitter();
        this.shippingaddresschange = new EventEmitter();
        this.shippingoptionchange = new EventEmitter();
        this.notavailable = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            const elementsOptions = this.elementsOptions;
            /** @type {?} */
            const stripe = this.stripe;
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                /** @type {?} */
                const elements = yield this.stripeElementsService
                    .elements(stripe, elementsOptions)
                    .toPromise();
                this.elements = elements;
                updateElements = true;
            }
            if (changes.paymentOptions && this.paymentRequest) {
                this.updateRequest(this.paymentOptions);
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);
                    this.paymentRequest.on('token', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.token.emit(ev)));
                    this.paymentRequest.on('paymentmethod', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.paymentMethod.emit(ev)));
                    this.paymentRequest.on('source', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.source.emit(ev)));
                    this.paymentRequest.on('cancel', (/**
                     * @return {?}
                     */
                    () => this.cancel.emit()));
                    this.paymentRequest.on('shippingaddresschange', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.shippingaddresschange.emit(ev)));
                    this.paymentRequest.on('shippingoptionchange', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.shippingoptionchange.emit(ev)));
                    this.element = this.elements.create('paymentRequestButton', Object.assign({ paymentRequest: this.paymentRequest }, options));
                    this.canMakePayment().subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    (result) => {
                        if (result) {
                            this.element.on('click', (/**
                             * @param {?} ev
                             * @return {?}
                             */
                            (ev) => this.change.emit(ev)));
                            this.element.on('blur', (/**
                             * @return {?}
                             */
                            () => this.blur.emit()));
                            this.element.on('focus', (/**
                             * @return {?}
                             */
                            () => this.focus.emit()));
                            this.element.on('ready', (/**
                             * @return {?}
                             */
                            () => this.ready.emit()));
                            this.element.mount(this.stripeElementRef.nativeElement);
                            this.load.emit({
                                paymentRequestButton: this.element,
                                paymentRequest: this.paymentRequest
                            });
                        }
                        else {
                            this.notavailable.emit();
                        }
                    }));
                }
            }
        });
    }
    /**
     * @return {?}
     */
    canMakePayment() {
        return from(this.paymentRequest.canMakePayment());
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    updateRequest(options) {
        this.paymentRequest.update(options);
    }
    /**
     * @return {?}
     */
    show() {
        this.paymentRequest.show();
    }
    /**
     * @deprecated
     * @return {?}
     */
    getButton() {
        return this.element;
    }
}
StripePaymentRequestButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-payment-request-button',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripePaymentRequestButtonComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripePaymentRequestButtonComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    paymentOptions: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    change: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    token: [{ type: Output }],
    paymentMethod: [{ type: Output }],
    source: [{ type: Output }],
    cancel: [{ type: Output }],
    shippingaddresschange: [{ type: Output }],
    shippingoptionchange: [{ type: Output }],
    notavailable: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.stripeElementRef;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.element;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.paymentRequest;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.containerClass;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.paymentOptions;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.options;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.elementsOptions;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.stripe;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.load;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.change;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.blur;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.focus;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.ready;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.token;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.paymentMethod;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.source;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.cancel;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.shippingaddresschange;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.shippingoptionchange;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.notavailable;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.elements;
    /** @type {?} */
    StripePaymentRequestButtonComponent.prototype.stripeElementsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1yZXF1ZXN0LWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc3RyaXBlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcGF5bWVudC1yZXF1ZXN0LWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUdQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFtQnhDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQU01RSxNQUFNOzs7O0lBdUNKLFlBQW1CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBNUJyRCxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBRzdCLENBQUM7UUFFSyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBRWhDLENBQUM7UUFDTSxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNoQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNqQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUVqQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQTRCLENBQUM7UUFDckQsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFFdkMsQ0FBQztRQUNNLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBNkIsQ0FBQztRQUN2RCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNsQywwQkFBcUIsR0FBRyxJQUFJLFlBQVksRUFFL0MsQ0FBQztRQUNNLHlCQUFvQixHQUFHLElBQUksWUFBWSxFQUU5QyxDQUFDO1FBQ00saUJBQVksR0FBRyxJQUFJLFlBQVks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dCxcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zLFxuICBTdHJpcGVFbGVtZW50cyxcbiAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICBQYXltZW50UmVxdWVzdCxcbiAgQ2FuTWFrZVBheW1lbnRSZXN1bHQsXG4gIFBheW1lbnRSZXF1ZXN0VXBkYXRlT3B0aW9ucyxcbiAgU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50LFxuICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRDbGlja0V2ZW50LFxuICBQYXltZW50UmVxdWVzdFRva2VuRXZlbnQsXG4gIFBheW1lbnRSZXF1ZXN0UGF5bWVudE1ldGhvZEV2ZW50LFxuICBQYXltZW50UmVxdWVzdFNvdXJjZUV2ZW50LFxuICBQYXltZW50UmVxdWVzdFNoaXBwaW5nQWRkcmVzc0V2ZW50LFxuICBQYXltZW50UmVxdWVzdFNoaXBwaW5nT3B0aW9uRXZlbnRcbn0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQgeyBTdHJpcGVJbnN0YW5jZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0cmlwZS1pbnN0YW5jZS5jbGFzcyc7XG5pbXBvcnQgeyBTdHJpcGVFbGVtZW50c1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdHJpcGUtZWxlbWVudHMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1zdHJpcGUtcGF5bWVudC1yZXF1ZXN0LWJ1dHRvbicsXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cImZpZWxkXCIgI3N0cmlwZUVsZW1lbnRSZWY+PC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBWaWV3Q2hpbGQoJ3N0cmlwZUVsZW1lbnRSZWYnKSBwdWJsaWMgc3RyaXBlRWxlbWVudFJlZiE6IEVsZW1lbnRSZWY7XG4gIGVsZW1lbnQhOiBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnQ7XG4gIHBheW1lbnRSZXF1ZXN0ITogUGF5bWVudFJlcXVlc3Q7XG5cbiAgQElucHV0KCkgY29udGFpbmVyQ2xhc3M6IHN0cmluZztcbiAgQElucHV0KCkgcGF5bWVudE9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0T3B0aW9ucztcbiAgQElucHV0KCkgb3B0aW9uczogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucztcbiAgQElucHV0KCkgZWxlbWVudHNPcHRpb25zOiBQYXJ0aWFsPFN0cmlwZUVsZW1lbnRzT3B0aW9ucz47XG4gIEBJbnB1dCgpIHN0cmlwZTogU3RyaXBlSW5zdGFuY2U7XG5cbiAgQE91dHB1dCgpIGxvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgICBwYXltZW50UmVxdWVzdEJ1dHRvbjogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50O1xuICAgIHBheW1lbnRSZXF1ZXN0OiBQYXltZW50UmVxdWVzdDtcbiAgfT4oKTtcblxuICBAT3V0cHV0KCkgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRDbGlja0V2ZW50XG4gID4oKTtcbiAgQE91dHB1dCgpIGJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBmb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIEBPdXRwdXQoKSB0b2tlbiA9IG5ldyBFdmVudEVtaXR0ZXI8UGF5bWVudFJlcXVlc3RUb2tlbkV2ZW50PigpO1xuICBAT3V0cHV0KCkgcGF5bWVudE1ldGhvZCA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgUGF5bWVudFJlcXVlc3RQYXltZW50TWV0aG9kRXZlbnRcbiAgPigpO1xuICBAT3V0cHV0KCkgc291cmNlID0gbmV3IEV2ZW50RW1pdHRlcjxQYXltZW50UmVxdWVzdFNvdXJjZUV2ZW50PigpO1xuICBAT3V0cHV0KCkgY2FuY2VsID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgc2hpcHBpbmdhZGRyZXNzY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBQYXltZW50UmVxdWVzdFNoaXBwaW5nQWRkcmVzc0V2ZW50XG4gID4oKTtcbiAgQE91dHB1dCgpIHNoaXBwaW5nb3B0aW9uY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBQYXltZW50UmVxdWVzdFNoaXBwaW5nT3B0aW9uRXZlbnRcbiAgPigpO1xuICBAT3V0cHV0KCkgbm90YXZhaWxhYmxlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIGVsZW1lbnRzOiBTdHJpcGVFbGVtZW50cztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RyaXBlRWxlbWVudHNTZXJ2aWNlOiBTdHJpcGVFbGVtZW50c1NlcnZpY2UpIHt9XG5cbiAgYXN5bmMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZS5tZXJnZU9wdGlvbnMoXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICB0aGlzLmNvbnRhaW5lckNsYXNzXG4gICAgKTtcbiAgICBjb25zdCBlbGVtZW50c09wdGlvbnMgPSB0aGlzLmVsZW1lbnRzT3B0aW9ucztcbiAgICBjb25zdCBzdHJpcGUgPSB0aGlzLnN0cmlwZTtcbiAgICBsZXQgdXBkYXRlRWxlbWVudHMgPSBmYWxzZTtcblxuICAgIGlmIChjaGFuZ2VzLmVsZW1lbnRzT3B0aW9ucyB8fCBjaGFuZ2VzLnN0cmlwZSB8fCAhdGhpcy5lbGVtZW50cykge1xuICAgICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZVxuICAgICAgICAuZWxlbWVudHMoc3RyaXBlLCBlbGVtZW50c09wdGlvbnMpXG4gICAgICAgIC50b1Byb21pc2UoKTtcbiAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgIHVwZGF0ZUVsZW1lbnRzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5wYXltZW50T3B0aW9ucyAmJiB0aGlzLnBheW1lbnRSZXF1ZXN0KSB7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVlc3QodGhpcy5wYXltZW50T3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY2hhbmdlcy5vcHRpb25zIHx8XG4gICAgICBjaGFuZ2VzLmNvbnRhaW5lckNsYXNzIHx8XG4gICAgICAhdGhpcy5lbGVtZW50IHx8XG4gICAgICB1cGRhdGVFbGVtZW50c1xuICAgICkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudCAmJiAhdXBkYXRlRWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy51cGRhdGUob3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudHMgJiYgdXBkYXRlRWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy5wYXltZW50UmVxdWVzdCA9IHRoaXMuc3RyaXBlRWxlbWVudHNTZXJ2aWNlLnBheW1lbnRSZXF1ZXN0KFxuICAgICAgICAgIHN0cmlwZSxcbiAgICAgICAgICB0aGlzLnBheW1lbnRPcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucGF5bWVudFJlcXVlc3Qub24oJ3Rva2VuJywgKGV2KSA9PiB0aGlzLnRva2VuLmVtaXQoZXYpKTtcbiAgICAgICAgdGhpcy5wYXltZW50UmVxdWVzdC5vbigncGF5bWVudG1ldGhvZCcsIChldikgPT5cbiAgICAgICAgICB0aGlzLnBheW1lbnRNZXRob2QuZW1pdChldilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wYXltZW50UmVxdWVzdC5vbignc291cmNlJywgKGV2KSA9PiB0aGlzLnNvdXJjZS5lbWl0KGV2KSk7XG4gICAgICAgIHRoaXMucGF5bWVudFJlcXVlc3Qub24oJ2NhbmNlbCcsICgpID0+IHRoaXMuY2FuY2VsLmVtaXQoKSk7XG4gICAgICAgIHRoaXMucGF5bWVudFJlcXVlc3Qub24oJ3NoaXBwaW5nYWRkcmVzc2NoYW5nZScsIChldikgPT5cbiAgICAgICAgICB0aGlzLnNoaXBwaW5nYWRkcmVzc2NoYW5nZS5lbWl0KGV2KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnBheW1lbnRSZXF1ZXN0Lm9uKCdzaGlwcGluZ29wdGlvbmNoYW5nZScsIChldikgPT5cbiAgICAgICAgICB0aGlzLnNoaXBwaW5nb3B0aW9uY2hhbmdlLmVtaXQoZXYpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudHMuY3JlYXRlKCdwYXltZW50UmVxdWVzdEJ1dHRvbicsIHtcbiAgICAgICAgICBwYXltZW50UmVxdWVzdDogdGhpcy5wYXltZW50UmVxdWVzdCxcbiAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY2FuTWFrZVBheW1lbnQoKS5zdWJzY3JpYmUoKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbignY2xpY2snLCAoZXYpID0+IHRoaXMuY2hhbmdlLmVtaXQoZXYpKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbignYmx1cicsICgpID0+IHRoaXMuYmx1ci5lbWl0KCkpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm9uKCdmb2N1cycsICgpID0+IHRoaXMuZm9jdXMuZW1pdCgpKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbigncmVhZHknLCAoKSA9PiB0aGlzLnJlYWR5LmVtaXQoKSk7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5tb3VudCh0aGlzLnN0cmlwZUVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgICAgIHRoaXMubG9hZC5lbWl0KHtcbiAgICAgICAgICAgICAgcGF5bWVudFJlcXVlc3RCdXR0b246IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgICAgcGF5bWVudFJlcXVlc3Q6IHRoaXMucGF5bWVudFJlcXVlc3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5vdGF2YWlsYWJsZS5lbWl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYW5NYWtlUGF5bWVudCgpOiBPYnNlcnZhYmxlPENhbk1ha2VQYXltZW50UmVzdWx0IHwgbnVsbD4ge1xuICAgIHJldHVybiBmcm9tKHRoaXMucGF5bWVudFJlcXVlc3QuY2FuTWFrZVBheW1lbnQoKSk7XG4gIH1cblxuICB1cGRhdGUob3B0aW9uczogUGFydGlhbDxTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zPikge1xuICAgIHRoaXMuZWxlbWVudC51cGRhdGUob3B0aW9ucyk7XG4gIH1cblxuICB1cGRhdGVSZXF1ZXN0KG9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0VXBkYXRlT3B0aW9ucykge1xuICAgIHRoaXMucGF5bWVudFJlcXVlc3QudXBkYXRlKG9wdGlvbnMpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLnBheW1lbnRSZXF1ZXN0LnNob3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgZ2V0QnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==