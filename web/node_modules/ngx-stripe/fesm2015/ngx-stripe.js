import { filter, first, map, switchMap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { __awaiter } from 'tslib';
import { BehaviorSubject, from } from 'rxjs';
import { InjectionToken, Injectable, Inject, PLATFORM_ID, Component, Input, ViewChild, EventEmitter, Output, Directive, Optional, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-instance.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeInstance {
    /**
     * @param {?} loader
     * @param {?} window
     * @param {?} key
     * @param {?=} options
     */
    constructor(loader, window, key, options) {
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.stripe = this.stripe$
            .asObservable()
            .pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => Boolean(stripe))));
        this.loader
            .asStream()
            .pipe(filter((/**
         * @param {?} status
         * @return {?}
         */
        (status) => status.loaded === true)), first(), map((/**
         * @return {?}
         */
        () => ((/** @type {?} */ (this.window.getNativeWindow()))).Stripe)))
            .subscribe((/**
         * @param {?} stripeInstance
         * @return {?}
         */
        (stripeInstance) => {
            /** @type {?} */
            const stripe = this.options
                ? ((/** @type {?} */ (stripeInstance(this.key, this.options))))
                : ((/** @type {?} */ (stripeInstance(this.key))));
            this.stripe$.next(stripe);
        }));
    }
    /**
     * @return {?}
     */
    getInstance() {
        return this.stripe$.getValue();
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    elements(options) {
        return this.stripe$.asObservable().pipe(filter((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => Boolean(stripe))), map((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => stripe.elements(options))), first());
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    redirectToCheckout(options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.redirectToCheckout(options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmAuBecsDebitPayment(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmBancontactPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmBancontactPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmCardPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmEpsPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmEpsPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmFpxPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmFpxPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmGiropayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmGiropayPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmIdealPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmIdealPayment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmP24Payment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmP24Payment(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmSepaDebitPayment(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    handleCardAction(clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.handleCardAction(clientSecret)))), first());
    }
    /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    createPaymentMethod(paymentMethodData) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.createPaymentMethod(paymentMethodData)))), first());
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrievePaymentIntent(clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.retrievePaymentIntent(clientSecret)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmAuBecsDebitSetup(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardSetup(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmCardSetup(clientSecret, data, options)))), first());
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmSepaDebitSetup(clientSecret, data)))), first());
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrieveSetupIntent(clientSecret) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.confirmSepaDebitSetup(clientSecret)))), first());
    }
    /**
     * @param {?} options
     * @return {?}
     */
    paymentRequest(options) {
        /** @type {?} */
        const stripe = this.getInstance();
        return stripe ? stripe.paymentRequest(options) : undefined;
    }
    /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    createToken(tokenType, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.createToken(tokenType, data)))), first());
    }
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    createSource(a, b) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.createSource(a, b)))), first());
    }
    /**
     * @param {?} source
     * @return {?}
     */
    retrieveSource(source) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(stripe.retrieveSource(source)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardPayment(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).handleCardPayment(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmPaymentIntent(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).confirmPaymentIntent(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardSetup(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).handleCardSetup(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmSetupIntent(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).confirmSetupIntent(clientSecret, element, data)))), first());
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleFpxPayment(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((/**
         * @param {?} stripe
         * @return {?}
         */
        (stripe) => from(((/** @type {?} */ (stripe))).handleFpxPayment(clientSecret, element, data)))), first());
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/ngx-stripe.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
/** @type {?} */
const STRIPE_OPTIONS = new InjectionToken('Stripe Options');

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/window-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WindowRef {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    getNativeWindow() {
        if (isPlatformBrowser(this.platformId)) {
            return window;
        }
        return (/** @type {?} */ ({}));
    }
}
WindowRef.decorators = [
    { type: Injectable }
];
WindowRef.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/document-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DocumentRef {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    getNativeDocument() {
        if (isPlatformBrowser(this.platformId)) {
            return document;
        }
        return (/** @type {?} */ ({}));
    }
}
DocumentRef.decorators = [
    { type: Injectable }
];
DocumentRef.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/api-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LazyStripeAPILoader {
    /**
     * @param {?} platformId
     * @param {?} window
     * @param {?} document
     */
    constructor(platformId, window, document) {
        this.platformId = platformId;
        this.window = window;
        this.document = document;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    /**
     * @return {?}
     */
    asStream() {
        this.load();
        return this.status.asObservable();
    }
    /**
     * @return {?}
     */
    isReady() {
        return this.status.getValue().loaded;
    }
    /**
     * @return {?}
     */
    load() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        /** @type {?} */
        const status = this.status.getValue();
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else if (!status.loaded && !status.loading) {
            this.status.next(Object.assign({}, status, { loading: true }));
            /** @type {?} */
            const script = this.document.getNativeDocument().createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
            script.src = 'https://js.stripe.com/v3/';
            script.onload = (/**
             * @return {?}
             */
            () => {
                this.status.next({
                    error: false,
                    loaded: true,
                    loading: false
                });
            });
            script.onerror = (/**
             * @return {?}
             */
            () => {
                this.status.next({
                    error: true,
                    loaded: false,
                    loading: false
                });
            });
            this.document.getNativeDocument().body.appendChild(script);
        }
    }
}
LazyStripeAPILoader.decorators = [
    { type: Injectable }
];
LazyStripeAPILoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: WindowRef },
    { type: DocumentRef }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeService {
    /**
     * @param {?} key
     * @param {?} options
     * @param {?} loader
     * @param {?} window
     */
    constructor(key, options, loader, window) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        if (key) {
            this.stripe = new StripeInstance(this.loader, this.window, key, options);
        }
    }
    /**
     * @return {?}
     */
    getStripeReference() {
        return this.loader.asStream().pipe(filter((/**
         * @param {?} status
         * @return {?}
         */
        (status) => status.loaded === true)), map((/**
         * @return {?}
         */
        () => ((/** @type {?} */ (this.window.getNativeWindow()))).Stripe)));
    }
    /**
     * @return {?}
     */
    getInstance() {
        return this.stripe.getInstance();
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    setKey(key, options) {
        return this.changeKey(key, options);
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    changeKey(key, options) {
        this.stripe = new StripeInstance(this.loader, this.window, key, options);
        return this.stripe;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    elements(options) {
        return this.stripe.elements(options);
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    redirectToCheckout(options) {
        return this.stripe.redirectToCheckout(options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitPayment(clientSecret, data) {
        return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmBancontactPayment(clientSecret, data, options) {
        return this.stripe.confirmBancontactPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardPayment(clientSecret, data, options) {
        return this.stripe.confirmCardPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmEpsPayment(clientSecret, data, options) {
        return this.stripe.confirmEpsPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmFpxPayment(clientSecret, data, options) {
        return this.stripe.confirmFpxPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmGiropayPayment(clientSecret, data, options) {
        return this.stripe.confirmGiropayPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmIdealPayment(clientSecret, data, options) {
        return this.stripe.confirmIdealPayment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmP24Payment(clientSecret, data, options) {
        return this.stripe.confirmP24Payment(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitPayment(clientSecret, data) {
        return this.stripe.confirmSepaDebitPayment(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    handleCardAction(clientSecret) {
        return this.stripe.handleCardAction(clientSecret);
    }
    /**
     * @param {?} paymentMethodData
     * @return {?}
     */
    createPaymentMethod(paymentMethodData) {
        return this.stripe.createPaymentMethod(paymentMethodData);
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrievePaymentIntent(clientSecret) {
        return this.stripe.retrievePaymentIntent(clientSecret);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmAuBecsDebitSetup(clientSecret, data) {
        return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    confirmCardSetup(clientSecret, data, options) {
        return this.stripe.confirmCardSetup(clientSecret, data, options);
    }
    /**
     * @param {?} clientSecret
     * @param {?=} data
     * @return {?}
     */
    confirmSepaDebitSetup(clientSecret, data) {
        return this.stripe.confirmSepaDebitSetup(clientSecret, data);
    }
    /**
     * @param {?} clientSecret
     * @return {?}
     */
    retrieveSetupIntent(clientSecret) {
        return this.stripe.retrieveSetupIntent(clientSecret);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    paymentRequest(options) {
        return this.stripe.paymentRequest(options);
    }
    /**
     * @param {?} tokenType
     * @param {?} data
     * @return {?}
     */
    createToken(tokenType, data) {
        return this.stripe.createToken(tokenType, data);
    }
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    createSource(a, b) {
        return this.stripe.createSource(a, b);
    }
    /**
     * @param {?} source
     * @return {?}
     */
    retrieveSource(source) {
        return this.stripe.retrieveSource(source);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardPayment(clientSecret, element, data) {
        return this.stripe.handleCardPayment(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmPaymentIntent(clientSecret, element, data) {
        return this.stripe.confirmPaymentIntent(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleCardSetup(clientSecret, element, data) {
        return this.stripe.handleCardSetup(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    confirmSetupIntent(clientSecret, element, data) {
        return this.stripe.confirmSetupIntent(clientSecret, element, data);
    }
    /**
     * @deprecated
     * @param {?} clientSecret
     * @param {?=} element
     * @param {?=} data
     * @return {?}
     */
    handleFpxPayment(clientSecret, element, data) {
        return this.stripe.handleFpxPayment(clientSecret, element, data);
    }
}
StripeService.decorators = [
    { type: Injectable }
];
StripeService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-elements.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeElementsService {
    /**
     * @param {?} stripeService
     */
    constructor(stripeService) {
        this.stripeService = stripeService;
    }
    /**
     * @param {?} stripe
     * @param {?=} options
     * @return {?}
     */
    elements(stripe, options = {}) {
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    }
    /**
     * @param {?} stripe
     * @param {?} options
     * @return {?}
     */
    paymentRequest(stripe, options) {
        return stripe
            ? stripe.paymentRequest(options)
            : this.stripeService.paymentRequest(options);
    }
    /**
     * @param {?} options
     * @param {?} containerClass
     * @return {?}
     */
    mergeOptions(options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return Object.assign({}, (options || {}), { classes: {
                    base: containerClass,
                    complete: `${containerClass}--complete`,
                    empty: `${containerClass}--empty`,
                    focus: `${containerClass}--focus`,
                    invalid: `${containerClass}--invalid`,
                    webkitAutoFill: `${containerClass}--webkit-autoFill`
                } });
        }
        return options || {};
    }
}
StripeElementsService.decorators = [
    { type: Injectable }
];
StripeElementsService.ctorParameters = () => [
    { type: StripeService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeCardComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe, this.elementsOptions)
                    .toPromise();
                updateElements = true;
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.createElement(options);
                }
            }
            this.state = 'ready';
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.createElement();
                this.state = 'ready';
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getCard() {
        return this.element;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    createElement(options = {}) {
        this.element = this.elements.create('card', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => this.change.emit(ev)));
        this.element.on('blur', (/**
         * @return {?}
         */
        () => this.blur.emit()));
        this.element.on('focus', (/**
         * @return {?}
         */
        () => this.focus.emit()));
        this.element.on('ready', (/**
         * @return {?}
         */
        () => this.ready.emit()));
        this.element.on('escape', (/**
         * @return {?}
         */
        () => this.escape.emit()));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-card',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeCardComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeCardComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/card-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeCardGroupDirective {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.elements = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            /** @type {?} */
            const elementsOptions = this.elementsOptions;
            /** @type {?} */
            const stripe = this.stripe;
            if (changes.elementsOptions || changes.stripe || !this._elements) {
                this._elements = yield this.stripeElementsService
                    .elements(stripe, elementsOptions)
                    .toPromise();
                this.elements.emit(this._elements);
            }
            this.state = 'ready';
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this._elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.elements.emit(this._elements);
                this.state = 'ready';
            }
        });
    }
}
StripeCardGroupDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'
            },] }
];
StripeCardGroupDirective.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeCardGroupDirective.propDecorators = {
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    elements: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card-number.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeCardNumberComponent {
    /**
     * @param {?} stripeElementsService
     * @param {?} cardGroup
     */
    constructor(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes.options || changes.containerClass) {
                this.setupElement('options');
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((/**
             * @param {?} elements
             * @return {?}
             */
            (elements) => {
                this.elements = elements;
                this.setupElement('elements');
            }));
        }
        else {
            throw new Error('StripeCardNumberComponent must have StripeCardGroupDirective parent');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getCardNumber() {
        return this.element;
    }
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    setupElement(source) {
        /** @type {?} */
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardNumber', options);
            this.element.on('change', (/**
             * @param {?} ev
             * @return {?}
             */
            (ev) => this.change.emit(ev)));
            this.element.on('blur', (/**
             * @return {?}
             */
            () => this.blur.emit()));
            this.element.on('focus', (/**
             * @return {?}
             */
            () => this.focus.emit()));
            this.element.on('ready', (/**
             * @return {?}
             */
            () => this.ready.emit()));
            this.element.on('escape', (/**
             * @return {?}
             */
            () => this.escape.emit()));
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    }
}
StripeCardNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-card-number',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeCardNumberComponent.ctorParameters = () => [
    { type: StripeElementsService },
    { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
];
StripeCardNumberComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card-expiry.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeCardExpiryComponent {
    /**
     * @param {?} stripeElementsService
     * @param {?} cardGroup
     */
    constructor(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes.options || changes.containerClass) {
                this.setupElement('options');
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((/**
             * @param {?} elements
             * @return {?}
             */
            (elements) => {
                this.elements = elements;
                this.setupElement('elements');
            }));
        }
        else {
            throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getCardExpiry() {
        return this.element;
    }
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    setupElement(source) {
        /** @type {?} */
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardExpiry', options);
            this.element.on('change', (/**
             * @param {?} ev
             * @return {?}
             */
            (ev) => this.change.emit(ev)));
            this.element.on('blur', (/**
             * @return {?}
             */
            () => this.blur.emit()));
            this.element.on('focus', (/**
             * @return {?}
             */
            () => this.focus.emit()));
            this.element.on('ready', (/**
             * @return {?}
             */
            () => this.ready.emit()));
            this.element.on('escape', (/**
             * @return {?}
             */
            () => this.escape.emit()));
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    }
}
StripeCardExpiryComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-card-expiry',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeCardExpiryComponent.ctorParameters = () => [
    { type: StripeElementsService },
    { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
];
StripeCardExpiryComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/card-cvc.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeCardCvcComponent {
    /**
     * @param {?} stripeElementsService
     * @param {?} cardGroup
     */
    constructor(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes.options || changes.containerClass) {
                this.setupElement('options');
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((/**
             * @param {?} elements
             * @return {?}
             */
            (elements) => {
                this.elements = elements;
                this.setupElement('elements');
            }));
        }
        else {
            throw new Error('StripeCardCvcComponent must have StripeCardGroupDirective parent');
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getCardCvc() {
        return this.element;
    }
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    setupElement(source) {
        /** @type {?} */
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardCvc', options);
            this.element.on('change', (/**
             * @param {?} ev
             * @return {?}
             */
            (ev) => this.change.emit(ev)));
            this.element.on('blur', (/**
             * @return {?}
             */
            () => this.blur.emit()));
            this.element.on('focus', (/**
             * @return {?}
             */
            () => this.focus.emit()));
            this.element.on('ready', (/**
             * @return {?}
             */
            () => this.ready.emit()));
            this.element.on('escape', (/**
             * @return {?}
             */
            () => this.escape.emit()));
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    }
}
StripeCardCvcComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-card-cvc',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeCardCvcComponent.ctorParameters = () => [
    { type: StripeElementsService },
    { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
];
StripeCardCvcComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/fpx-bank.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeFpxBankComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe, this.elementsOptions)
                    .toPromise();
                updateElements = true;
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.createElement(options);
                }
            }
            this.state = 'ready';
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.createElement();
                this.state = 'ready';
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getFpxBank() {
        return this.element;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    createElement(options = { accountHolderType: 'individual' }) {
        this.element = this.elements.create('fpxBank', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => this.change.emit(ev)));
        this.element.on('blur', (/**
         * @return {?}
         */
        () => this.blur.emit()));
        this.element.on('focus', (/**
         * @return {?}
         */
        () => this.focus.emit()));
        this.element.on('ready', (/**
         * @return {?}
         */
        () => this.ready.emit()));
        this.element.on('escape', (/**
         * @return {?}
         */
        () => this.escape.emit()));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeFpxBankComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-fpx-bank',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeFpxBankComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeFpxBankComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ideal-bank.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeIdealBankComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe, this.elementsOptions)
                    .toPromise();
                updateElements = true;
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.createElement(options);
                }
            }
            this.state = 'ready';
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.createElement();
                this.state = 'ready';
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getIdealBank() {
        return this.element;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    createElement(options = {}) {
        this.element = this.elements.create('idealBank', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => this.change.emit(ev)));
        this.element.on('blur', (/**
         * @return {?}
         */
        () => this.blur.emit()));
        this.element.on('focus', (/**
         * @return {?}
         */
        () => this.focus.emit()));
        this.element.on('ready', (/**
         * @return {?}
         */
        () => this.ready.emit()));
        this.element.on('escape', (/**
         * @return {?}
         */
        () => this.escape.emit()));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeIdealBankComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-ideal-bank',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeIdealBankComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeIdealBankComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/iban.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeIbanComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe, this.elementsOptions)
                    .toPromise();
                updateElements = true;
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.createElement(options);
                }
            }
            this.state = 'ready';
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.createElement();
                this.state = 'ready';
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getIban() {
        return this.element;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    createElement(options = {}) {
        this.element = this.elements.create('iban', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => this.change.emit(ev)));
        this.element.on('blur', (/**
         * @return {?}
         */
        () => this.blur.emit()));
        this.element.on('focus', (/**
         * @return {?}
         */
        () => this.focus.emit()));
        this.element.on('ready', (/**
         * @return {?}
         */
        () => this.ready.emit()));
        this.element.on('escape', (/**
         * @return {?}
         */
        () => this.escape.emit()));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeIbanComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-iban',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeIbanComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeIbanComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/au-bank-account.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeAuBankAccountComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe, this.elementsOptions)
                    .toPromise();
                updateElements = true;
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.createElement(options);
                }
            }
            this.state = 'ready';
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this.elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.createElement();
                this.state = 'ready';
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     * @return {?}
     */
    getAuBankAccount() {
        return this.element;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    createElement(options = {}) {
        this.element = this.elements.create('auBankAccount', options);
        this.element.on('change', (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => this.change.emit(ev)));
        this.element.on('blur', (/**
         * @return {?}
         */
        () => this.blur.emit()));
        this.element.on('focus', (/**
         * @return {?}
         */
        () => this.focus.emit()));
        this.element.on('ready', (/**
         * @return {?}
         */
        () => this.ready.emit()));
        this.element.on('escape', (/**
         * @return {?}
         */
        () => this.escape.emit()));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeAuBankAccountComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-au-bank-account',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripeAuBankAccountComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeAuBankAccountComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/payment-request-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripePaymentRequestButtonComponent {
    /**
     * @param {?} stripeElementsService
     */
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.token = new EventEmitter();
        this.paymentMethod = new EventEmitter();
        this.source = new EventEmitter();
        this.cancel = new EventEmitter();
        this.shippingaddresschange = new EventEmitter();
        this.shippingoptionchange = new EventEmitter();
        this.notavailable = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
            /** @type {?} */
            const elementsOptions = this.elementsOptions;
            /** @type {?} */
            const stripe = this.stripe;
            /** @type {?} */
            let updateElements = false;
            if (changes.elementsOptions || changes.stripe || !this.elements) {
                /** @type {?} */
                const elements = yield this.stripeElementsService
                    .elements(stripe, elementsOptions)
                    .toPromise();
                this.elements = elements;
                updateElements = true;
            }
            if (changes.paymentOptions && this.paymentRequest) {
                this.updateRequest(this.paymentOptions);
            }
            if (changes.options ||
                changes.containerClass ||
                !this.element ||
                updateElements) {
                if (this.element && !updateElements) {
                    this.update(options);
                }
                else if (this.elements && updateElements) {
                    this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);
                    this.paymentRequest.on('token', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.token.emit(ev)));
                    this.paymentRequest.on('paymentmethod', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.paymentMethod.emit(ev)));
                    this.paymentRequest.on('source', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.source.emit(ev)));
                    this.paymentRequest.on('cancel', (/**
                     * @return {?}
                     */
                    () => this.cancel.emit()));
                    this.paymentRequest.on('shippingaddresschange', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.shippingaddresschange.emit(ev)));
                    this.paymentRequest.on('shippingoptionchange', (/**
                     * @param {?} ev
                     * @return {?}
                     */
                    (ev) => this.shippingoptionchange.emit(ev)));
                    this.element = this.elements.create('paymentRequestButton', Object.assign({ paymentRequest: this.paymentRequest }, options));
                    this.canMakePayment().subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    (result) => {
                        if (result) {
                            this.element.on('click', (/**
                             * @param {?} ev
                             * @return {?}
                             */
                            (ev) => this.change.emit(ev)));
                            this.element.on('blur', (/**
                             * @return {?}
                             */
                            () => this.blur.emit()));
                            this.element.on('focus', (/**
                             * @return {?}
                             */
                            () => this.focus.emit()));
                            this.element.on('ready', (/**
                             * @return {?}
                             */
                            () => this.ready.emit()));
                            this.element.mount(this.stripeElementRef.nativeElement);
                            this.load.emit({
                                paymentRequestButton: this.element,
                                paymentRequest: this.paymentRequest
                            });
                        }
                        else {
                            this.notavailable.emit();
                        }
                    }));
                }
            }
        });
    }
    /**
     * @return {?}
     */
    canMakePayment() {
        return from(this.paymentRequest.canMakePayment());
    }
    /**
     * @param {?} options
     * @return {?}
     */
    update(options) {
        this.element.update(options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    updateRequest(options) {
        this.paymentRequest.update(options);
    }
    /**
     * @return {?}
     */
    show() {
        this.paymentRequest.show();
    }
    /**
     * @deprecated
     * @return {?}
     */
    getButton() {
        return this.element;
    }
}
StripePaymentRequestButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-stripe-payment-request-button',
                template: `<div class="field" #stripeElementRef></div>`
            }] }
];
StripePaymentRequestButtonComponent.ctorParameters = () => [
    { type: StripeElementsService }
];
StripePaymentRequestButtonComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    paymentOptions: [{ type: Input }],
    options: [{ type: Input }],
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    load: [{ type: Output }],
    change: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    token: [{ type: Output }],
    paymentMethod: [{ type: Output }],
    source: [{ type: Output }],
    cancel: [{ type: Output }],
    shippingaddresschange: [{ type: Output }],
    shippingoptionchange: [{ type: Output }],
    notavailable: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripeFactoryService {
    /**
     * @param {?} baseKey
     * @param {?} baseOptions
     * @param {?} loader
     * @param {?} window
     */
    constructor(baseKey, baseOptions, loader, window) {
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    /**
     * @param {?=} key
     * @param {?=} options
     * @return {?}
     */
    create(key, options) {
        if (!key && !this.baseKey) {
            return null;
        }
        return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    }
}
StripeFactoryService.decorators = [
    { type: Injectable }
];
StripeFactoryService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-stripe.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const components = [
    StripeCardComponent,
    StripeCardNumberComponent,
    StripeCardExpiryComponent,
    StripeCardCvcComponent,
    StripeFpxBankComponent,
    StripeIdealBankComponent,
    StripeIbanComponent,
    StripeAuBankAccountComponent,
    StripePaymentRequestButtonComponent
];
/** @type {?} */
const directives = [StripeCardGroupDirective];
class NgxStripeModule {
    /**
     * @param {?=} publishableKey
     * @param {?=} options
     * @return {?}
     */
    static forRoot(publishableKey, options) {
        return {
            ngModule: NgxStripeModule,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                StripeElementsService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
    /**
     * @param {?=} publishableKey
     * @param {?=} options
     * @return {?}
     */
    static forChild(publishableKey, options) {
        return {
            ngModule: NgxStripeModule,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                StripeElementsService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
}
NgxStripeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [...components, ...directives],
                exports: [...components, ...directives]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-stripe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxStripeModule, StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIbanComponent, StripeIdealBankComponent, StripeAuBankAccountComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective, StripeService, StripeFactoryService, StripeInstance, LazyStripeAPILoader, WindowRef, DocumentRef, StripeElementsService, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS };

//# sourceMappingURL=ngx-stripe.js.map