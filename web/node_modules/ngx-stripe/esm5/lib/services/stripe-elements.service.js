/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/stripe-elements.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { StripeService } from './stripe.service';
var StripeElementsService = /** @class */ (function () {
    function StripeElementsService(stripeService) {
        this.stripeService = stripeService;
    }
    /**
     * @param {?} stripe
     * @param {?=} options
     * @return {?}
     */
    StripeElementsService.prototype.elements = /**
     * @param {?} stripe
     * @param {?=} options
     * @return {?}
     */
    function (stripe, options) {
        if (options === void 0) { options = {}; }
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    };
    /**
     * @param {?} stripe
     * @param {?} options
     * @return {?}
     */
    StripeElementsService.prototype.paymentRequest = /**
     * @param {?} stripe
     * @param {?} options
     * @return {?}
     */
    function (stripe, options) {
        return stripe
            ? stripe.paymentRequest(options)
            : this.stripeService.paymentRequest(options);
    };
    /**
     * @param {?} options
     * @param {?} containerClass
     * @return {?}
     */
    StripeElementsService.prototype.mergeOptions = /**
     * @param {?} options
     * @param {?} containerClass
     * @return {?}
     */
    function (options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return tslib_1.__assign({}, (options || {}), { classes: {
                    base: containerClass,
                    complete: containerClass + "--complete",
                    empty: containerClass + "--empty",
                    focus: containerClass + "--focus",
                    invalid: containerClass + "--invalid",
                    webkitAutoFill: containerClass + "--webkit-autoFill"
                } });
        }
        return options || {};
    };
    StripeElementsService.decorators = [
        { type: Injectable }
    ];
    StripeElementsService.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    return StripeElementsService;
}());
export { StripeElementsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    StripeElementsService.prototype.stripeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc3RyaXBlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0cmlwZS1lbGVtZW50cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFrQjNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRDtJQUVFLCtCQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7Ozs7OztJQUVwRCx3Q0FBUTs7Ozs7SUFBUixVQUNFLE1BQU0sRUFDTixPQUFtQztRQUFuQyx3QkFBQSxFQUFBLFlBQW1DO1FBRW5DLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNqQztZQUNELE9BQU8sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFCO2FBQU07WUFDTCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QztZQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN0QztJQUNILENBQUM7Ozs7OztJQUVELDhDQUFjOzs7OztJQUFkLFVBQ0UsTUFBTSxFQUNOLE9BQThCO1FBRTlCLE9BQU8sTUFBTTtZQUNYLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQztZQUNoQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7O0lBa0NELDRDQUFZOzs7OztJQUFaLFVBQWEsT0FBTyxFQUFFLGNBQXNCO1FBQzFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25ELE9BQU8sT0FBTyxJQUFJLEVBQUUsQ0FBQztTQUN0QjtRQUVELElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ2hDLDRCQUNLLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxJQUNsQixPQUFPLEVBQUU7b0JBQ1AsSUFBSSxFQUFFLGNBQWM7b0JBQ3BCLFFBQVEsRUFBSyxjQUFjLGVBQVk7b0JBQ3ZDLEtBQUssRUFBSyxjQUFjLFlBQVM7b0JBQ2pDLEtBQUssRUFBSyxjQUFjLFlBQVM7b0JBQ2pDLE9BQU8sRUFBSyxjQUFjLGNBQVc7b0JBQ3JDLGNBQWMsRUFBSyxjQUFjLHNCQUFtQjtpQkFDckQsSUFDRDtTQUNIO1FBRUQsT0FBTyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7O2dCQWxGRixVQUFVOzs7Z0JBRkYsYUFBYTs7SUFxRnRCLDRCQUFDO0NBQUEsQUFuRkQsSUFtRkM7U0FsRlkscUJBQXFCOzs7Ozs7SUFDcEIsOENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBQYXltZW50UmVxdWVzdCxcbiAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICBTdHJpcGVDYXJkRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUF1QmFua0FjY291bnRFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlQ2FyZE51bWJlckVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUVsZW1lbnRzLFxuICBTdHJpcGVFbGVtZW50c09wdGlvbnMsXG4gIFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlSWJhbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVJZGVhbEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9uc1xufSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7IFN0cmlwZVNlcnZpY2UgfSBmcm9tICcuL3N0cmlwZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZUVsZW1lbnRzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyaXBlU2VydmljZTogU3RyaXBlU2VydmljZSkge31cblxuICBlbGVtZW50cyhcbiAgICBzdHJpcGUsXG4gICAgb3B0aW9uczogU3RyaXBlRWxlbWVudHNPcHRpb25zID0ge31cbiAgKTogT2JzZXJ2YWJsZTxTdHJpcGVFbGVtZW50cz4ge1xuICAgIGlmIChzdHJpcGUpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBzdHJpcGUuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaXBlLmVsZW1lbnRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgcGF5bWVudFJlcXVlc3QoXG4gICAgc3RyaXBlLFxuICAgIG9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0T3B0aW9uc1xuICApOiBQYXltZW50UmVxdWVzdCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHN0cmlwZVxuICAgICAgPyBzdHJpcGUucGF5bWVudFJlcXVlc3Qob3B0aW9ucylcbiAgICAgIDogdGhpcy5zdHJpcGVTZXJ2aWNlLnBheW1lbnRSZXF1ZXN0KG9wdGlvbnMpO1xuICB9XG5cbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlSWRlYWxCYW5rRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnMsIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcpIHtcbiAgICBpZiAoIWNvbnRhaW5lckNsYXNzIHx8IChvcHRpb25zICYmIG9wdGlvbnMuY2xhc3NlcykpIHtcbiAgICAgIHJldHVybiBvcHRpb25zIHx8IHt9O1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5jbGFzc2VzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgICBiYXNlOiBjb250YWluZXJDbGFzcyxcbiAgICAgICAgICBjb21wbGV0ZTogYCR7Y29udGFpbmVyQ2xhc3N9LS1jb21wbGV0ZWAsXG4gICAgICAgICAgZW1wdHk6IGAke2NvbnRhaW5lckNsYXNzfS0tZW1wdHlgLFxuICAgICAgICAgIGZvY3VzOiBgJHtjb250YWluZXJDbGFzc30tLWZvY3VzYCxcbiAgICAgICAgICBpbnZhbGlkOiBgJHtjb250YWluZXJDbGFzc30tLWludmFsaWRgLFxuICAgICAgICAgIHdlYmtpdEF1dG9GaWxsOiBgJHtjb250YWluZXJDbGFzc30tLXdlYmtpdC1hdXRvRmlsbGBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucyB8fCB7fTtcbiAgfVxufVxuIl19