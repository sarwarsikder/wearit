/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/card-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { StripeInstance } from '../services/stripe-instance.class';
import { StripeElementsService } from '../services/stripe-elements.service';
var StripeCardGroupDirective = /** @class */ (function () {
    function StripeCardGroupDirective(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.elements = new EventEmitter();
        this.state = 'notready';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    StripeCardGroupDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var elementsOptions, stripe, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.state = 'starting';
                        elementsOptions = this.elementsOptions;
                        stripe = this.stripe;
                        if (!(changes.elementsOptions || changes.stripe || !this._elements)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(stripe, elementsOptions)
                                .toPromise()];
                    case 1:
                        _a._elements = _b.sent();
                        this.elements.emit(this._elements);
                        _b.label = 2;
                    case 2:
                        this.state = 'ready';
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StripeCardGroupDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.state === 'notready')) return [3 /*break*/, 2];
                        this.state = 'starting';
                        _a = this;
                        return [4 /*yield*/, this.stripeElementsService
                                .elements(this.stripe)
                                .toPromise()];
                    case 1:
                        _a._elements = _b.sent();
                        this.elements.emit(this._elements);
                        this.state = 'ready';
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    StripeCardGroupDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'
                },] }
    ];
    StripeCardGroupDirective.ctorParameters = function () { return [
        { type: StripeElementsService }
    ]; };
    StripeCardGroupDirective.propDecorators = {
        elementsOptions: [{ type: Input }],
        stripe: [{ type: Input }],
        elements: [{ type: Output }]
    };
    return StripeCardGroupDirective;
}());
export { StripeCardGroupDirective };
if (false) {
    /** @type {?} */
    StripeCardGroupDirective.prototype.elementsOptions;
    /** @type {?} */
    StripeCardGroupDirective.prototype.stripe;
    /** @type {?} */
    StripeCardGroupDirective.prototype.elements;
    /** @type {?} */
    StripeCardGroupDirective.prototype._elements;
    /** @type {?} */
    StripeCardGroupDirective.prototype.state;
    /** @type {?} */
    StripeCardGroupDirective.prototype.stripeElementsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc3RyaXBlLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY2FyZC1ncm91cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBSUwsTUFBTSxFQUNOLFlBQVksRUFDYixNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFNUU7SUFZRSxrQ0FBbUIscUJBQTRDO1FBQTVDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFMckQsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBR3hELFVBQUssR0FBc0MsVUFBVSxDQUFDO0lBRVksQ0FBQzs7Ozs7SUFFN0QsOENBQVc7Ozs7SUFBakIsVUFBa0IsT0FBc0I7Ozs7Ozt3QkFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7d0JBRWxCLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZTt3QkFDdEMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNOzZCQUV0QixDQUFBLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUEsRUFBNUQsd0JBQTREO3dCQUM5RCxLQUFBLElBQUksQ0FBQTt3QkFBYSxxQkFBTSxJQUFJLENBQUMscUJBQXFCO2lDQUM5QyxRQUFRLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQztpQ0FDakMsU0FBUyxFQUFFLEVBQUE7O3dCQUZkLEdBQUssU0FBUyxHQUFHLFNBRUgsQ0FBQzt3QkFDZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Ozt3QkFHckMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7Ozs7O0tBQ3RCOzs7O0lBRUssMkNBQVE7OztJQUFkOzs7Ozs7NkJBQ00sQ0FBQSxJQUFJLENBQUMsS0FBSyxLQUFLLFVBQVUsQ0FBQSxFQUF6Qix3QkFBeUI7d0JBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO3dCQUV4QixLQUFBLElBQUksQ0FBQTt3QkFBYSxxQkFBTSxJQUFJLENBQUMscUJBQXFCO2lDQUM5QyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztpQ0FDckIsU0FBUyxFQUFFLEVBQUE7O3dCQUZkLEdBQUssU0FBUyxHQUFHLFNBRUgsQ0FBQzt3QkFDZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBRW5DLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDOzs7Ozs7S0FFeEI7O2dCQXpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDRDQUE0QztpQkFDdkQ7OztnQkFKUSxxQkFBcUI7OztrQ0FNM0IsS0FBSzt5QkFDTCxLQUFLOzJCQUVMLE1BQU07O0lBbUNULCtCQUFDO0NBQUEsQUExQ0QsSUEwQ0M7U0F2Q1ksd0JBQXdCOzs7SUFDbkMsbURBQXlEOztJQUN6RCwwQ0FBZ0M7O0lBRWhDLDRDQUF3RDs7SUFFeEQsNkNBQTBCOztJQUMxQix5Q0FBc0Q7O0lBRTFDLHlEQUFtRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3RyaXBlRWxlbWVudHMsIFN0cmlwZUVsZW1lbnRzT3B0aW9ucyB9IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJztcblxuaW1wb3J0IHsgU3RyaXBlSW5zdGFuY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdHJpcGUtaW5zdGFuY2UuY2xhc3MnO1xuaW1wb3J0IHsgU3RyaXBlRWxlbWVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICduZ3gtc3RyaXBlLWNhcmQtZ3JvdXAsW25neFN0cmlwZUNhcmRHcm91cF0nXG59KVxuZXhwb3J0IGNsYXNzIFN0cmlwZUNhcmRHcm91cERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgZWxlbWVudHNPcHRpb25zOiBQYXJ0aWFsPFN0cmlwZUVsZW1lbnRzT3B0aW9ucz47XG4gIEBJbnB1dCgpIHN0cmlwZTogU3RyaXBlSW5zdGFuY2U7XG5cbiAgQE91dHB1dCgpIGVsZW1lbnRzID0gbmV3IEV2ZW50RW1pdHRlcjxTdHJpcGVFbGVtZW50cz4oKTtcblxuICBfZWxlbWVudHM6IFN0cmlwZUVsZW1lbnRzO1xuICBzdGF0ZTogJ25vdHJlYWR5JyB8ICdzdGFydGluZycgfCAncmVhZHknID0gJ25vdHJlYWR5JztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RyaXBlRWxlbWVudHNTZXJ2aWNlOiBTdHJpcGVFbGVtZW50c1NlcnZpY2UpIHt9XG5cbiAgYXN5bmMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIHRoaXMuc3RhdGUgPSAnc3RhcnRpbmcnO1xuXG4gICAgY29uc3QgZWxlbWVudHNPcHRpb25zID0gdGhpcy5lbGVtZW50c09wdGlvbnM7XG4gICAgY29uc3Qgc3RyaXBlID0gdGhpcy5zdHJpcGU7XG5cbiAgICBpZiAoY2hhbmdlcy5lbGVtZW50c09wdGlvbnMgfHwgY2hhbmdlcy5zdHJpcGUgfHwgIXRoaXMuX2VsZW1lbnRzKSB7XG4gICAgICB0aGlzLl9lbGVtZW50cyA9IGF3YWl0IHRoaXMuc3RyaXBlRWxlbWVudHNTZXJ2aWNlXG4gICAgICAgIC5lbGVtZW50cyhzdHJpcGUsIGVsZW1lbnRzT3B0aW9ucylcbiAgICAgICAgLnRvUHJvbWlzZSgpO1xuICAgICAgdGhpcy5lbGVtZW50cy5lbWl0KHRoaXMuX2VsZW1lbnRzKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gJ3JlYWR5JztcbiAgfVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSAnbm90cmVhZHknKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ3N0YXJ0aW5nJztcblxuICAgICAgdGhpcy5fZWxlbWVudHMgPSBhd2FpdCB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZVxuICAgICAgICAuZWxlbWVudHModGhpcy5zdHJpcGUpXG4gICAgICAgIC50b1Byb21pc2UoKTtcbiAgICAgIHRoaXMuZWxlbWVudHMuZW1pdCh0aGlzLl9lbGVtZW50cyk7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSAncmVhZHknO1xuICAgIH1cbiAgfVxufVxuIl19